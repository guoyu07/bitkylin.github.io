<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>比特麒麟</title>
  <subtitle>https://github.com/bitkylin</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bitky.cc/"/>
  <updated>2018-01-16T17:19:26.181Z</updated>
  <id>http://bitky.cc/</id>
  
  <author>
    <name>雪中亮「123lml123」</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 Vue.js 2.0 酷炫自适应背景视频登录页面的设计</title>
    <link href="http://bitky.cc/2018/01/17/vue/"/>
    <id>http://bitky.cc/2018/01/17/vue/</id>
    <published>2018-01-17T04:00:00.000Z</published>
    <updated>2018-01-16T17:19:26.181Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述如何实现拥有酷炫背景视频的登录页面，浏览器窗口随意拉伸，背景视频及前景登录组件均能完美适配，背景视频可始终铺满窗口，前景组件始终居中，视频的内容始终得到最大限度的保留，可以得到最好的视觉效果。并且基于 Vue.js 2.0 全家桶。具体效果如下图所示：</p>
<a id="more"></a>
<p><strong>最终效果可以翻到文章最后观看。</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-3cf58aeebb39d341.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="背景视频登录页面"></p>
<h2 id="1-背景视频-Web-页面的既有实现方式"><a href="#1-背景视频-Web-页面的既有实现方式" class="headerlink" title="1. 背景视频 Web 页面的既有实现方式"></a>1. 背景视频 Web 页面的既有实现方式</h2><p>国外有一个很好的网站<a href="http://www.coverr.co/" target="_blank" rel="external">「Coverr」</a>，提供了完善的教程和视频资源，帮助前端开发者构建酷炫的背景视频主页，网站效果示例如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-e1c385aaf0a5ceea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Coverr 网站效果展示"></p>
<p>教程如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-6b87b78eb83ec731.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Coverr 提供的简易教程"></p>
<p>从图中以及我的实践可以得出以下观点：</p>
<ul>
<li><p>该教程使用了<a href="https://jquery.com/" target="_blank" rel="external"> jQuery </a>。由于我们想要使用 Vue.js，则 jQuery 可被完全替代掉。</p>
</li>
<li><p>该教程的 CSS、JavaScript 代码均过于冗余。</p>
</li>
<li><p>直接运行示例，发现效果并不好，浏览器窗口随意拉伸时，背景视频并不能完美适配「会出现黑边等瑕疵」，效果未达到预期。</p>
</li>
</ul>
<h2 id="2-设计完美的背景视频-Web-页面"><a href="#2-设计完美的背景视频-Web-页面" class="headerlink" title="2. 设计完美的背景视频 Web 页面"></a>2. 设计完美的背景视频 Web 页面</h2><p>首先基于脚手架工具 vue-cli 来创建一个使用 vue-loader 的项目，构建完毕后，在相应目录下创建「.vue」文件，作为登录页面的模板文件，具体细节不再赘述。本节内容仅局限于该.vue文件。</p>
<h3 id="2-1-HTML-模板"><a href="#2-1-HTML-模板" class="headerlink" title="2.1 HTML 模板"></a>2.1 HTML 模板</h3><p>基于需求，对 Coverr 提供的 HTML 模板进行了细微修改，结果如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"homepage-hero-module"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video-container"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"fixStyle"</span> <span class="attr">class</span>=<span class="string">"filter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">video</span> <span class="attr">:style</span>=<span class="string">"fixStyle"</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">class</span>=<span class="string">"fillWidth"</span> <span class="attr">v-on:canplay</span>=<span class="string">"canplay"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"PATH_TO_MP4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>/&gt;</span></div><div class="line">        浏览器不支持 video 标签，建议升级浏览器。</div><div class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"PATH_TO_WEBM"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>/&gt;</span></div><div class="line">        浏览器不支持 video 标签，建议升级浏览器。</div><div class="line">      <span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"poster hidden"</span> <span class="attr">v-if</span>=<span class="string">"!vedioCanPlay"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:style</span>=<span class="string">"fixStyle"</span> <span class="attr">src</span>=<span class="string">"PATH_TO_JPEG"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<p>模板中，<code>filter</code> 类的 <code>div</code> 标签是一层背景视频的蒙版，可以通过蒙版控制视频的亮暗以及色温等。</p>
<p><code>video</code> 标签为标准的 HTML5 标签，提供两种格式的视频以及一张图片占位符，背景视频在加载完毕后即自动播放。</p>
<p>Coverr 提供的原始模板，直接调试，页面只显示图片，而无法播放视频，通过使用 Vue.js 的 <code>v-if</code> 指令解决了该问题。</p>
<h3 id="2-2-CSS"><a href="#2-2-CSS" class="headerlink" title="2.2 CSS"></a>2.2 CSS</h3><p>对原始模板 CSS 代码进行了大幅精简，修改后的 CSS 代码如下所示：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped&gt;</div><div class="line">  .homepage-hero-module,</div><div class="line">  .video-container &#123;</div><div class="line">    position: relative;</div><div class="line">    height: 100vh;</div><div class="line">    overflow: hidden;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .video-container .poster img,</div><div class="line">  .video-container video &#123;</div><div class="line">    z-index: 0;</div><div class="line">    position: absolute;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .video-container .filter &#123;</div><div class="line">    z-index: 1;</div><div class="line">    position: absolute;</div><div class="line">    background: rgba(0, 0, 0, 0.4);</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>由于大多数样式均被项目全局修改了，所以在此专用于此模板的样式只剩下三条，简要说明如下：</p>
<ul>
<li>容器 div 铺满浏览器窗口</li>
<li>蒙版 div 位于视频的上方，以起到蒙版的作用。</li>
</ul>
<h3 id="2-3-JavaScript-代码"><a href="#2-3-JavaScript-代码" class="headerlink" title="2.3 JavaScript 代码"></a>2.3 JavaScript 代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'login'</span>,</div><div class="line">    data() &#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">vedioCanPlay</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">fixStyle</span>: <span class="string">''</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      canplay() &#123;</div><div class="line">        <span class="keyword">this</span>.vedioCanPlay = <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">window</span>.onresize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> windowWidth = <span class="built_in">document</span>.body.clientWidth</div><div class="line">        <span class="keyword">const</span> windowHeight = <span class="built_in">document</span>.body.clientHeight</div><div class="line">        <span class="keyword">const</span> windowAspectRatio = windowHeight / windowWidth</div><div class="line">        <span class="keyword">let</span> videoWidth</div><div class="line">        <span class="keyword">let</span> videoHeight</div><div class="line">        <span class="keyword">if</span> (windowAspectRatio &lt; <span class="number">0.5625</span>) &#123;</div><div class="line">          videoWidth = windowWidth</div><div class="line">          videoHeight = videoWidth * <span class="number">0.5625</span></div><div class="line">          <span class="keyword">this</span>.fixStyle = &#123;</div><div class="line">            <span class="attr">height</span>: windowWidth * <span class="number">0.5625</span> + <span class="string">'px'</span>,</div><div class="line">            <span class="attr">width</span>: windowWidth + <span class="string">'px'</span>,</div><div class="line">            <span class="string">'margin-bottom'</span>: (windowHeight - videoHeight) / <span class="number">2</span> + <span class="string">'px'</span>,</div><div class="line">            <span class="string">'margin-left'</span>: <span class="string">'initial'</span></div><div class="line">          &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          videoHeight = windowHeight</div><div class="line">          videoWidth = videoHeight / <span class="number">0.5625</span></div><div class="line">          <span class="keyword">this</span>.fixStyle = &#123;</div><div class="line">            <span class="attr">height</span>: windowHeight + <span class="string">'px'</span>,</div><div class="line">            <span class="attr">width</span>: windowHeight / <span class="number">0.5625</span> + <span class="string">'px'</span>,</div><div class="line">            <span class="string">'margin-left'</span>: (windowWidth - videoWidth) / <span class="number">2</span> + <span class="string">'px'</span>,</div><div class="line">            <span class="string">'margin-bottom'</span>: <span class="string">'initial'</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">window</span>.onresize()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>以上代码中最重要的部分是对 window 对象的 onresize 事件的监听。当窗口大小更改时，程序同步修改 video 及蒙版 dom 的尺寸，使得视频的最窄的边始终撑满浏览器的窗口，而长的边左右两边被均匀地裁减。</p>
<p>这样操作，可以使得视频不会被拉伸，视频中心始终位于浏览器的中心，并且在随意拉伸浏览器窗口时，视频的内容始终得到最大限度的保留，并且可以得到最好的视觉效果。</p>
<p>最终效果如下所示：<br><img src="http://upload-images.jianshu.io/upload_images/1555570-aba3cf75f9b9c849.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自适应 web 页面背景视频"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://www.coverr.co/" target="_blank" rel="external">资源网站「Coverr」</a></li>
<li><a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue.js 中文官网</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述如何实现拥有酷炫背景视频的登录页面，浏览器窗口随意拉伸，背景视频及前景登录组件均能完美适配，背景视频可始终铺满窗口，前景组件始终居中，视频的内容始终得到最大限度的保留，可以得到最好的视觉效果。并且基于 Vue.js 2.0 全家桶。具体效果如下图所示：&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://bitky.cc/categories/web/"/>
    
    
      <category term="Web" scheme="http://bitky.cc/tags/Web/"/>
    
      <category term="Vue.js" scheme="http://bitky.cc/tags/Vue-js/"/>
    
      <category term="JavaScript" scheme="http://bitky.cc/tags/JavaScript/"/>
    
      <category term="HTML5" scheme="http://bitky.cc/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>经典排序算法及其 Java 实现</title>
    <link href="http://bitky.cc/2017/08/17/java/"/>
    <id>http://bitky.cc/2017/08/17/java/</id>
    <published>2017-08-17T04:00:00.000Z</published>
    <updated>2018-01-16T17:17:02.349Z</updated>
    
    <content type="html"><![CDATA[<p>网上有很多排序算法的总结，不过有很多缺点，比如有些根本就是错的，无法通过测试用例，有些过于冗长。所以我总结了一套短小精悍的 Java 实现，经测试，该套实现可通过牛客网的关于此的所有测试用例。</p>
<a id="more"></a>
<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> <span class="keyword">implements</span> <span class="title">KySort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kySort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size - i - <span class="number">1</span>; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</div><div class="line">                    swap(a, j, j + <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2. 插入排序"></a>2. 插入排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> <span class="keyword">implements</span> <span class="title">KySort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kySort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</div><div class="line">            <span class="keyword">int</span> temp = a[i];</div><div class="line">            <span class="keyword">int</span> j = i;</div><div class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; a[j - <span class="number">1</span>] &gt; temp) &#123;</div><div class="line">                a[j] = a[j - <span class="number">1</span>];</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">            a[j] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3. 选择排序"></a>3. 选择排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> <span class="keyword">implements</span> <span class="title">KySort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kySort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> min = i;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; size; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (a[j] &lt; a[min]) &#123;</div><div class="line">                    min = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i != min) &#123;</div><div class="line">                swap(a, i, min);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-堆排序"><a href="#4-堆排序" class="headerlink" title="4. 堆排序"></a>4. 堆排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> <span class="keyword">implements</span> <span class="title">KySort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kySort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            heapAdjust(a, i, n - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">            swap(a, <span class="number">0</span>, i);</div><div class="line">            heapAdjust(a, <span class="number">0</span>, i - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> index 父节点索引</div><div class="line">     * <span class="doctag">@param</span> n     尾节点索引</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapAdjust</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> index, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = a[index];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> child = index * <span class="number">2</span> + <span class="number">1</span>; child &lt;= n; child = index * <span class="number">2</span> + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (child &lt; n &amp;&amp; a[child] &lt; a[child + <span class="number">1</span>]) &#123;</div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (temp &gt; a[child]) <span class="keyword">break</span>;</div><div class="line">            a[index] = a[child];</div><div class="line">            index = child;</div><div class="line">        &#125;</div><div class="line">        a[index] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5. 归并排序"></a>5. 归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> <span class="keyword">implements</span> <span class="title">KySort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kySort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        sort(a, <span class="number">0</span>, size - <span class="number">1</span>, <span class="keyword">new</span> <span class="keyword">int</span>[a.length]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</div><div class="line">        sort(a, left, mid, temp);</div><div class="line">        sort(a, mid + <span class="number">1</span>, right, temp);</div><div class="line">        merge(a, left, mid, right, temp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> k = left;</div><div class="line">        <span class="keyword">int</span> i = left;</div><div class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</div><div class="line">            <span class="keyword">if</span> (a[i] &lt; a[j]) &#123;</div><div class="line">                temp[k++] = a[i++];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                temp[k++] = a[j++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (i &lt;= mid) &#123;</div><div class="line">            temp[k++] = a[i++];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (j &lt;= right) &#123;</div><div class="line">            temp[k++] = a[j++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</div><div class="line">            a[left] = temp[left];</div><div class="line">            left++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6. 快速排序"></a>6. 快速排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> <span class="keyword">implements</span> <span class="title">KySort</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kySort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        quickSort(a, <span class="number">0</span>, size - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (right - left &lt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (a[left] &gt; a[right])</div><div class="line">                swap(a, left, right);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> p = middleBy3(a, left, right);</div><div class="line"></div><div class="line">        quickSort(a, left, p - <span class="number">1</span>);</div><div class="line">        quickSort(a, p + <span class="number">1</span>, right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">middleBy3</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> p = (left + right) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> end = right;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (a[left] &gt; a[p]) swap(a, left, p);</div><div class="line">        <span class="keyword">if</span> (a[left] &gt; a[right]) swap(a, left, right);</div><div class="line">        <span class="keyword">if</span> (a[p] &gt; a[right]) swap(a, p, right);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> temp = a[p];</div><div class="line">        swap(a, p, right);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">while</span> (a[++left] &lt; temp) ;</div><div class="line">            <span class="keyword">while</span> (a[--right] &gt; temp) ;</div><div class="line">            <span class="keyword">if</span> (left &gt;= right) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">else</span> swap(a, left, right);</div><div class="line">        &#125;</div><div class="line">        swap(a, left, end);</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="7-附录"><a href="#7-附录" class="headerlink" title="7. 附录"></a>7. 附录</h2><h3 id="7-1-交换方法"><a href="#7-1-交换方法" class="headerlink" title="7.1 交换方法"></a>7.1 交换方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> k = a[i];</div><div class="line">        a[i] = a[j];</div><div class="line">        a[j] = k;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="7-2-基于策略模式的主程序实现"><a href="#7-2-基于策略模式的主程序实现" class="headerlink" title="7.2 基于策略模式的主程序实现"></a>7.2 基于策略模式的主程序实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortMain</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> KySort sorter;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] a;<span class="comment">//定义一个数组</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SortMain</span><span class="params">(<span class="keyword">int</span>... values)</span> </span>&#123;   <span class="comment">//构造函数</span></div><div class="line">        a = values;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        setSorter(<span class="keyword">new</span> QuickSort());</div><div class="line">        SortMain arr;</div><div class="line">        arr = <span class="keyword">new</span> SortMain(<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        arr.display();</div><div class="line">        arr.kySort();</div><div class="line">        arr.display();</div><div class="line">        System.out.println(<span class="string">"--------"</span>);</div><div class="line">        arr = <span class="keyword">new</span> SortMain(<span class="number">54</span>, <span class="number">35</span>, <span class="number">48</span>, <span class="number">36</span>, <span class="number">27</span>, <span class="number">12</span>, <span class="number">44</span>, <span class="number">44</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">17</span>, <span class="number">28</span>);</div><div class="line">        arr.display();</div><div class="line">        arr.kySort();</div><div class="line">        arr.display();</div><div class="line">        System.out.println(<span class="string">"--------"</span>);</div><div class="line">        arr = <span class="keyword">new</span> SortMain(<span class="number">32</span>, <span class="number">103</span>, <span class="number">24</span>, <span class="number">88</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">97</span>, <span class="number">15</span>, <span class="number">102</span>, <span class="number">6</span>, <span class="number">79</span>, <span class="number">46</span>, <span class="number">51</span>, <span class="number">37</span>, <span class="number">93</span>, <span class="number">108</span>, <span class="number">9</span>, <span class="number">58</span>, <span class="number">53</span>, <span class="number">58</span>, <span class="number">79</span>, <span class="number">36</span>, <span class="number">58</span>, <span class="number">91</span>, <span class="number">78</span>, <span class="number">58</span>, <span class="number">61</span>, <span class="number">81</span>);    <span class="comment">//初始化数组</span></div><div class="line">        arr.display();</div><div class="line">        arr.kySort();</div><div class="line">        arr.display();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSorter</span><span class="params">(KySort sorter)</span> </span>&#123;</div><div class="line">        SortMain.sorter = sorter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;   <span class="comment">//遍历数组中每一个元素</span></div><div class="line">            System.out.print(i + <span class="string">" "</span>);   <span class="comment">//展示</span></div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">kySort</span><span class="params">()</span> </span>&#123;</div><div class="line">        sorter.kySort(a, a.length);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上有很多排序算法的总结，不过有很多缺点，比如有些根本就是错的，无法通过测试用例，有些过于冗长。所以我总结了一套短小精悍的 Java 实现，经测试，该套实现可通过牛客网的关于此的所有测试用例。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="algorithm" scheme="http://bitky.cc/tags/algorithm/"/>
    
      <category term="sort" scheme="http://bitky.cc/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>基于 Netty 的帧调度策略，自行实现流量控制及可靠性通信</title>
    <link href="http://bitky.cc/2017/07/19/java/"/>
    <id>http://bitky.cc/2017/07/19/java/</id>
    <published>2017-07-19T09:00:00.000Z</published>
    <updated>2017-07-19T08:34:33.482Z</updated>
    
    <content type="html"><![CDATA[<p>最近正在做一个 Java 后端项目「大规模集群设备的管理平台」。使用 Spring 作为基础框架，使用 Netty 搭建 TCP 服务器与<strong>上万台设备</strong>组成的集群通信，使用基于 JavaFX 的图形界面应用程序模拟上万台设备的行为，并可对服务器进行压力测试。</p>
<p>Java 服务器中，由于众多硬件设备的<strong>数据帧处理能力较差</strong>，<strong>可靠性较差</strong>，所以在 Netty 模块中使用的帧调度算法。服务器大规模下发数据帧时，可进行有效的<strong>拥塞控制、超时重发</strong>，可有效提升集群设备的可靠性，降低集群设备的研发难度。</p>
<a id="more"></a>
<blockquote>
<p>本项目的基础实现架构已开源，访问以下地址获取：<br>「GitHub」<a href="https://github.com/bitkylin/ClusterDeviceControlPlatform" target="_blank" rel="external">https://github.com/bitkylin/ClusterDeviceControlPlatform</a></p>
</blockquote>
<h2 id="1-Netty-模块和大规模集群设备通信遇到的问题"><a href="#1-Netty-模块和大规模集群设备通信遇到的问题" class="headerlink" title="1. Netty 模块和大规模集群设备通信遇到的问题"></a>1. Netty 模块和大规模集群设备通信遇到的问题</h2><ul>
<li><p><strong>硬件设备的帧处理能力较差</strong>，单台设备最大处理能力为 20 帧/秒，服务器需进行流量控制，避免到达设备的处理极限。</p>
</li>
<li><p><strong>硬件设备的可靠性较差</strong>，偶尔会出现丢帧的情况，故虽使用 TCP 协议，服务器仍需自行保证整个通信的可靠性。</p>
</li>
</ul>
<h2 id="2-帧调度策略"><a href="#2-帧调度策略" class="headerlink" title="2. 帧调度策略"></a>2. 帧调度策略</h2><p>由于这些问题，故自行制定如下帧调度策略，实践表明，该策略可最大程度上解决以上问题。</p>
<blockquote>
<p><strong>「注」</strong>本部分为源码「Netty服务器」部分的解释说明，需结合源码进行阅读。<br>源码从此处获取：<a href="https://github.com/bitkylin/ClusterDeviceControlPlatform" target="_blank" rel="external">「GitHub」</a></p>
</blockquote>
<h3 id="2-1-服务器发送-Message-指令策略"><a href="#2-1-服务器发送-Message-指令策略" class="headerlink" title="2.1 服务器发送 Message 指令策略"></a>2.1 服务器发送 Message 指令策略</h3><p>服务器 ServerTcpMessageHandler 对象首先检查链表双端队列「LinkedBlockingDeque」中待发送帧的数量，若数量大于限定数量，则将待执行指令「Message」传入时间轮进行等待，使之在预订的时间后执行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-154490a94336ff9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="服务器发送 Message 指令策略"></p>
<h3 id="2-2-Message-指令执行策略"><a href="#2-2-Message-指令执行策略" class="headerlink" title="2.2 Message 指令执行策略"></a>2.2 Message 指令执行策略</h3><blockquote>
<p>待执行的指令 Message 有两种：</p>
<ul>
<li>基本指令：普通帧生成指令，该指令分为以下 2 种：<ul>
<li>复合指令：一条指令需要多个 CAN 帧才能完整表示</li>
<li>简单指令：一条指令生成一个 CAN 帧</li>
</ul>
</li>
<li>WebMsgSpecial：包含特殊执行指令，该指令均内含一条普通指令，该指令分为以下 2 种：<ul>
<li>广播发送：发送至一组或多组设备</li>
<li>紧急发送：将生成的 CAN 帧放置在队列首位，以便优先发送</li>
<li>不设置检错重发：该 CAN 帧无回复，或重复发送该帧易导致设备异常</li>
</ul>
</li>
</ul>
</blockquote>
<p>Netty 通道「WebMsgOutBoundHandler」接收到待执行的指令 Message，根据 Message 指令进行执行，生成 CAN 帧并被 SendableMsg 对象包裹，具体执行策略如下：</p>
<ul>
<li>若为基本指令：生成相对应的一个或多个 CAN 帧，并添加进入不同的 SendableMsg 对象，执行策略设为非紧急和开启检错重发机制。</li>
<li>若为 WebMsgSpecial 指令<ul>
<li>若为广播指令：将内含 Message 根据广播指令生成多条其他 WebMsgSpecial 指令</li>
<li>若为其他指令：生成 CAN 帧和对应的 SendableMsg 对象的同时，将「紧急」和「检错重发」标识添加进  SendableMsg 对象</li>
</ul>
</li>
</ul>
<p>Netty 通道「WebMsgOutBoundHandler」接收到待执行的「执行通道」指令 SendableMsg，根据指令进行执行：</p>
<h4 id="1-SendableMsg-指令执行策略"><a href="#1-SendableMsg-指令执行策略" class="headerlink" title="1) SendableMsg 指令执行策略"></a>1) SendableMsg 指令执行策略</h4><p>若为「紧急」指令，将内含的 CAN 帧放置在队列首位，以便优先发送<br>若为「不检错重发」指令，在内含的 CAN 帧被发送后，不执行「检错重发」操作<br>若为「普通」指令，执行「非紧急」操作和「检错重发」操作</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-26bf7dceb252dd5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="检错重发操作执行策略"></p>
<h4 id="2-检错重发操作执行策略"><a href="#2-检错重发操作执行策略" class="headerlink" title="2) 检错重发操作执行策略"></a>2) 检错重发操作执行策略</h4><p>在队列中选取首位 SendableMsg 对象，内含 CAN 帧被发送的同时，CAN 帧的「组号」、「设备号」和「功能位」组成 Key，CAN 帧作为 Value，添加进 HashMap 中，并在时间轮上设置「检错重发」策略，该策略在约定延迟时间后执行，之后在 TCP 通道发送该 CAN 帧。</p>
<p>在约定延迟时间内，Netty 的 InBound 处理通道收到特定 CAN 帧的回复，则将特定 CAN 帧的「Key, Value」对从 HashMap 中移除。</p>
<p>在约定时间后，执行时间轮「检错重发」策略：</p>
<ul>
<li>检测 HashMap 中相应 CAN 帧的「Key, Value」对：<ul>
<li>若为空，则服务器收到该 CAN 帧的回复，该策略终止</li>
<li>若不为空，则服务器未收到该 CAN 帧的回复，查看 SendableMsg 对象的执行次数<ul>
<li>若次数大于 3 次，Netty 模块向 Server 模块发送设备通信故障 Message，将该设备设为异常状态。</li>
<li>若次数小于 3 次，根据 SendableMsg 指令的内含操作重新执行。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h2><ol>
<li><a href="https://github.com/bitkylin/ClusterDeviceControlPlatform" target="_blank" rel="external">本项目的「GitHub」</a></li>
<li><a href="https://zacard.net/2016/12/02/netty-hashedwheeltimer/" target="_blank" rel="external">Netty 源码解读之时间轮算法实现-HashedWheelTimer</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正在做一个 Java 后端项目「大规模集群设备的管理平台」。使用 Spring 作为基础框架，使用 Netty 搭建 TCP 服务器与&lt;strong&gt;上万台设备&lt;/strong&gt;组成的集群通信，使用基于 JavaFX 的图形界面应用程序模拟上万台设备的行为，并可对服务器进行压力测试。&lt;/p&gt;
&lt;p&gt;Java 服务器中，由于众多硬件设备的&lt;strong&gt;数据帧处理能力较差&lt;/strong&gt;，&lt;strong&gt;可靠性较差&lt;/strong&gt;，所以在 Netty 模块中使用的帧调度算法。服务器大规模下发数据帧时，可进行有效的&lt;strong&gt;拥塞控制、超时重发&lt;/strong&gt;，可有效提升集群设备的可靠性，降低集群设备的研发难度。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Netty" scheme="http://bitky.cc/tags/Netty/"/>
    
      <category term="Spring" scheme="http://bitky.cc/tags/Spring/"/>
    
      <category term="CAN" scheme="http://bitky.cc/tags/CAN/"/>
    
  </entry>
  
  <entry>
    <title>「译」Maven 集成 JavaFX 8 以及「fx:root」问题探讨</title>
    <link href="http://bitky.cc/2017/05/22/javafx/"/>
    <id>http://bitky.cc/2017/05/22/javafx/</id>
    <published>2017-05-22T05:17:47.000Z</published>
    <updated>2017-05-22T05:29:59.951Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章探讨了使用 IntelliJ IDEA 创建 JavaFX 工程，进而开发了所需应用程序。更实际的情况是需要使用 Maven, Gradle 等进行项目的构建。本文探讨使用 Maven 构建集成 JavaFX 8 的可执行程序的方法，以及 <code>&lt;fx:root&gt;</code> 根节点问题。</p>
<a id="more"></a>
<h1 id="1-Maven-构建的程序未集成-FXML-布局文件"><a href="#1-Maven-构建的程序未集成-FXML-布局文件" class="headerlink" title="1. Maven 构建的程序未集成 FXML 布局文件"></a>1. Maven 构建的程序未集成 FXML 布局文件</h1><p>使用 Maven 直接构建，在 <code>compile</code> 阶段, <code>.class</code> 文件均被复制到 <code>target/classes/</code> 目录，而对于 <code>.FXML</code> 文件，则分如下情况：</p>
<ol>
<li><p><code>simple.fxml</code> 文件位于 <code>src/main/resources/</code> 目录中，在 <code>compile</code> 阶段，<code>simple.fxml</code> 会按照层级复制到 <code>target/classes/</code> 目录中，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getClass().getClassLoader().getResource(&quot;simple.fxml&quot;)</div><div class="line">getClass().getResource(&quot;/simple.fxml&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p>为了方便使用，<code>simple.fxml</code> 文件位于其 Controller 的同级目录中，此时在 <code>compile</code> 阶段，<code>simple.fxml</code> 会被忽略掉，Maven 不会复制位于 <code>src</code> 目录下的任何资源文件，故需要采取其他策略，通过搜索 <a href="http://stackoverflow.com/questions/22000423/javafx-and-maven-nullpointerexception-location-is-required" target="_blank" rel="external"><code>StackOverflow</code></a> 发现了解决方法如下：</p>
<blockquote>
<p>在 <code>pom.xml</code> 文件中添加如下 <code>resource</code> 插件即可解决问题：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.fxml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span>             </div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p>此时所有的 <code>.fxml</code> 文件均会被完整复制到 <code>src</code> 下的同级目录。</p>
<p>使用 Maven 构建可执行 Jar 可使用通用方法，具体参考：<a href="http://www.jianshu.com/p/b3cbcebd8e28" target="_blank" rel="external">镜像1</a>、<a href="http://bitky.cc/2017/04/06/maven/">镜像2</a></p>
<p>可执行 Jar 构建完毕后，在 Windows 平台下可以直接双击执行。</p>
<h1 id="2-FXML-文件中，「fx-root」根节点问题探讨"><a href="#2-FXML-文件中，「fx-root」根节点问题探讨" class="headerlink" title="2. FXML 文件中，「fx:root」根节点问题探讨"></a>2. FXML 文件中，「fx:root」根节点问题探讨</h1><p>为了更加方便灵活地使用自定义控件，更方便的集成 Controller 和 FXML 资源文件，以下内容对 <a href="http://stackoverflow.com/questions/23600926/how-to-understand-and-use-fxroot-in-javafx" target="_blank" rel="external"><code>StackOverflow</code></a> 的一则回复进行翻译修改：</p>
<p>假设想要设计一个自定义控件：<code>HBox</code> 中包含 <code>TextField</code> 和 <code>Button</code>，不使用 <code>FXML</code> 文件时，自定义控件设计如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">HBox</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextField textField ;</div><div class="line">    <span class="keyword">private</span> Button button ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        textField = <span class="keyword">new</span> TextField();</div><div class="line">        button = <span class="keyword">new</span> Button();</div><div class="line">        <span class="keyword">this</span>.getChildren().addAll(textField, button);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时可对该自定义控件方便地设计逻辑代码。</p>
<p>若使用 <code>FXML</code> 文件时，如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">HBox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">fx:id</span>=<span class="string">"textField"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">fx:id</span>=<span class="string">"button"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">HBox</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>此时 <code>HBox</code> 的 Controller 定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">HBox</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@FXML</span></div><div class="line">    <span class="keyword">private</span> TextField textField ;</div><div class="line"></div><div class="line">    <span class="meta">@FXML</span></div><div class="line">    <span class="keyword">private</span> Button button ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FXMLLoader loader = <span class="keyword">new</span> FXMLLoader(getClass().getResource(<span class="string">"MyComponent.fxml"</span>));</div><div class="line">            loader.setController(<span class="keyword">this</span>);</div><div class="line">            HBox hbox = loader.load();</div><div class="line">            <span class="keyword">this</span>.getChildren().add(hbox);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException exc) &#123;</div><div class="line">            <span class="comment">// handle exception</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时该自定义控件为一个 <code>HBox</code> 包裹一个 <code>HBox</code>，子 <code>HBox</code> 才包含 <code>TextField</code> 和 <code>Button</code>，所以无法实现开始时，纯代码方式的自定义控件设计。</p>
<p>而使用 <code>&lt;fx:root&gt;</code> 后，可指导 Controller 类作为「根节点」，避免了 <code>HBox</code> 嵌套 <code>HBox</code> 的情况。</p>
<p>FXML 文件设计如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">fx:root</span> <span class="attr">type</span>=<span class="string">"javafx.scene.layout.HBox"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">fx:id</span>=<span class="string">"textField"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">fx:id</span>=<span class="string">"button"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fx:root</span>&gt;</span></div></pre></td></tr></table></figure>
<p>FXML 文件同时指明了根节点的类型，资源文件对应的 Controller 设计如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">HBox</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@FXML</span> </div><div class="line">    <span class="keyword">private</span> TextField textField ;</div><div class="line"></div><div class="line">    <span class="meta">@FXML</span></div><div class="line">    <span class="keyword">private</span> Button button ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FXMLLoader loader = <span class="keyword">new</span> FXMLLoader(getClass().getResource(<span class="string">"MyComponent.fxml"</span>));</div><div class="line">            loader.setController(<span class="keyword">this</span>);</div><div class="line">            loader.setRoot(<span class="keyword">this</span>);</div><div class="line">            loader.load();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException exc) &#123;</div><div class="line">            <span class="comment">// handle exception</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时可实现开始时，纯代码方式的自定义控件设计。</p>
<h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><ol>
<li><p><a href="http://stackoverflow.com/questions/22000423/javafx-and-maven-nullpointerexception-location-is-required" target="_blank" rel="external">JavaFX and Maven: NullPointerException: Location is required</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/23600926/how-to-understand-and-use-fxroot-in-javafx" target="_blank" rel="external">How to understand and use <code>&lt;fx:root&gt;</code>, in JavaFX</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章探讨了使用 IntelliJ IDEA 创建 JavaFX 工程，进而开发了所需应用程序。更实际的情况是需要使用 Maven, Gradle 等进行项目的构建。本文探讨使用 Maven 构建集成 JavaFX 8 的可执行程序的方法，以及 &lt;code&gt;&amp;lt;fx:root&amp;gt;&lt;/code&gt; 根节点问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="GUI" scheme="http://bitky.cc/tags/GUI/"/>
    
      <category term="JavaFX" scheme="http://bitky.cc/tags/JavaFX/"/>
    
      <category term="FXML" scheme="http://bitky.cc/tags/FXML/"/>
    
      <category term="自定义控件" scheme="http://bitky.cc/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaFX 8 下简化自定义控件的外部调用以及流式布局示例</title>
    <link href="http://bitky.cc/2017/05/21/javafx/"/>
    <id>http://bitky.cc/2017/05/21/javafx/</id>
    <published>2017-05-21T04:57:47.000Z</published>
    <updated>2017-05-22T05:21:05.506Z</updated>
    
    <content type="html"><![CDATA[<p>本文探讨在 JavaFX 8 环境下实现自定义控件的相关方法，以及自定义控件在流式布局中的布置方式，由于自定义控件使用时需要同时引用布局文件和控制器类，较为繁琐，故也探讨了其简化方式。</p>
<a id="more"></a>
<p>有一个项目，需要模拟数千台设备的工作情况，这数千个设备分为若干组，每组 100 台。故需要设计一款 GUI 程序，包含 100 个自定义控件，模拟一组设备的工作情况，通过 ListView 对设备组进行选择，即可成功模拟数千台设备。</p>
<p>由于 Java 拥有丰富的第三方库，便于项目的底层实现，故基于最新的 Java GUI 框架「JavaFX 8」实现该 GUI 界面，该应用程序需使用 100 个相同的自定义控件，故需要使用流面板 (FlowPane) 对这些自定义控件进行有效布局。</p>
<p>最终实现效果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-32555c9418d60498.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终实现效果"></p>
<p>FlowPane 布局面板中包含的自定义控件会在水平方向上按行连续地平铺放置，并且会在边界处自动换行，点击左侧 ListView 中的 Item，右侧的自定义控件组会显示选定设备组的状态信息。综上，该设计可实现预定目标。</p>
<h2 id="1-Java-FX-8-基本说明"><a href="#1-Java-FX-8-基本说明" class="headerlink" title="1. Java FX 8 基本说明"></a>1. Java FX 8 基本说明</h2><p>可以使用这篇「<a href="http://code.makery.ch/library/javafx-8-tutorial/zh-cn/" target="_blank" rel="external">JavaFX 8 教程</a>」作为 JavaFX 8 的入门使用，拥有 GUI 设计经验的开发人员均可快速入门 Java FX 8，</p>
<h3 id="1-1-界面生成方式"><a href="#1-1-界面生成方式" class="headerlink" title="1.1 界面生成方式"></a>1.1 界面生成方式</h3><p>Java FX 8 与大多数现代 GUI 开发相同，用户界面有两种创建方式：</p>
<ul>
<li>XML文件定义</li>
<li>java代码创建</li>
</ul>
<p>本文为了更加清晰直观，采用两种界面布局方法相结合的方式。</p>
<h3 id="1-2-问题说明"><a href="#1-2-问题说明" class="headerlink" title="1.2 问题说明"></a>1.2 问题说明</h3><p>由于 Java FX 8 并不主流，遇到问题很难在中文网站上找到解决方法，故有许多坑需要填补，所以本文遇到一些坑时不进行说明，而是在另一篇文章中列出了这些坑的填补方法。</p>
<h2 id="2-界面根布局的设计"><a href="#2-界面根布局的设计" class="headerlink" title="2. 界面根布局的设计"></a>2. 界面根布局的设计</h2><p>使用「Scene Builder」打开 FXML 布局文件，在如图所示左下角，填入一个自定义 Class 作为控制器类，激活需要操作的控件，在右侧「fx:id」处填入 Class 的 Field，下方填入事件处理方法，之后通过 View -&gt; Show Sample Controller skeleton 可查看填入 Controller 中的代码示例。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-00ef0c734266ab49.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Scene Builder"></p>
<p>在程序的入口类中填入如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//入口方法已隐式实现，故可删除</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        launch(args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage primaryStage)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        primaryStage.setTitle(<span class="string">"bitkyApp"</span>);</div><div class="line">        FXMLLoader fxmlLoader = <span class="keyword">new</span> FXMLLoader(getClass().getResource(<span class="string">"sample.fxml"</span>));</div><div class="line">        AnchorPane anchorPane = fxmlLoader.load();           <span class="comment">//返回类型设置为布局文件根节点类型</span></div><div class="line">        Controller controller = fxmlLoader.getController();  <span class="comment">//可获取该布局的 Controller 类</span></div><div class="line"></div><div class="line">        BorderPane rootLayout = FXMLLoader.load(getClass().getResource(<span class="string">"rootLayout.fxml"</span>));</div><div class="line">        rootLayout.setCenter(anchorPane);</div><div class="line">        primaryStage.setScene(<span class="keyword">new</span> Scene(rootLayout, <span class="number">800</span>, <span class="number">650</span>));</div><div class="line">        primaryStage.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法为教程中的方法，为了实现 Controller 和外部的交互，将 FXML 布局文件和 Controller 均耦合在了外部类中，显得较为繁琐。故可采用自定义控件的方式简化外部的代码调用。</p>
<h2 id="3-自定义控件的设计"><a href="#3-自定义控件的设计" class="headerlink" title="3. 自定义控件的设计"></a>3. 自定义控件的设计</h2><blockquote>
<p>JavaFX 2 版本之后，FXML 提供 <fx:root> 写法，此时要求 Controller 必须继承自 FXML 节点对象，使用 FXMLLoader 加载时，必须调用 setRoot() 方法。</fx:root></p>
<p>不要在 FXML 中指定 Controller，通常情况下一个 FXML 可以对应多个 Controller，为了灵活性，我们应当在 FXMLLoader 中指定 Controller。</p>
</blockquote>
<p>根据具体实践，可以采用如下方式：</p>
<p>Scene Builder 左下角的 Controller 面板中，勾选使用 fx:root 构造，并且不应该填入 Controller 类，如图，此时 <fx:root> 作为根节点，：</fx:root></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-28ee3302a0c184ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实现自定义控件的 Scene Builder 相关设置"></p>
<p>此时在 FXML 文件中的代码例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;fx:root xmlns:fx="http://javafx.com/fxml/1"</div><div class="line">         type="TabPane"</div><div class="line">         xmlns="http://javafx.com/javafx/8.0.111"&gt;</div><div class="line">    </div><div class="line">......</div><div class="line"></div><div class="line">&lt;/fx:root&gt;</div></pre></td></tr></table></figure>
<p>此时，Controller 类继承根节点的类型，例如「TabPane」。可选实现「Initializable」接口进行控件生成之后的初始化操作，代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Controller 类继承 FXML 布局文件的根节点类型「TabPane」</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceView</span> <span class="keyword">extends</span> <span class="title">TabPane</span> <span class="keyword">implements</span> <span class="title">Initializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeviceView</span><span class="params">()</span> </span>&#123;</div><div class="line">        loadFxml();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFxml</span><span class="params">()</span> </span>&#123;</div><div class="line">        FXMLLoader loader = <span class="keyword">new</span> FXMLLoader(getClass().getResource(<span class="string">"device_view.fxml"</span>));</div><div class="line">        loader.setRoot(<span class="keyword">this</span>);</div><div class="line">        loader.setController(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            loader.load();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//该方法在构造方法执行完毕后执行</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(URL location, ResourceBundle resources)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时，在主布局对应的 Controller 中，直接生成该类「DeviceView」的对象作为自定义控件，通过 FlowPane 控件的引用添加该对象为 FlowPane 的子控件，即可实现设计目的，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</div><div class="line"></div><div class="line">    <span class="comment">//在 FlowPane 中添加自定义控件「DeviceView」</span></div><div class="line">    DeviceView deviceView = <span class="keyword">new</span> DeviceView(i);</div><div class="line">    deviceFlowPane.getChildren().add(deviceView);</div><div class="line">	</div><div class="line">	<span class="comment">//使用观察者模式添加子控件「DeviceView」的监听器</span></div><div class="line">    deviceView.setListener((status -&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) listener.btnChanged(status);</div><div class="line">    &#125;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-使用自定义控件的方式简化主界面的外部调用代码"><a href="#4-使用自定义控件的方式简化主界面的外部调用代码" class="headerlink" title="4. 使用自定义控件的方式简化主界面的外部调用代码"></a>4. 使用自定义控件的方式简化主界面的外部调用代码</h2><p>综上所述，最终实现的主界面代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainView</span> <span class="keyword">extends</span> <span class="title">BorderPane</span> <span class="keyword">implements</span> <span class="title">Initializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainView mainView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MainView</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        FXMLLoader loader = <span class="keyword">new</span> FXMLLoader(getClass().getResource(<span class="string">"rootLayout.fxml"</span>));</div><div class="line">        loader.setRoot(<span class="keyword">this</span>);</div><div class="line">        loader.setController(<span class="keyword">this</span>);</div><div class="line">        loader.load();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainView <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mainView == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mainView = <span class="keyword">new</span> MainView();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mainView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(URL location, ResourceBundle resources)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此段代码使用了自定义控件的方式，并且使用了单例模式中的懒汉式方便外部调用，外部调用代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainLauncher</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage primaryStage)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">           startApp(primaryStage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startApp</span><span class="params">(Stage primaryStage)</span> </span>&#123;</div><div class="line">        primaryStage.setTitle(<span class="string">"设备模拟客户端"</span>);</div><div class="line">        primaryStage.setScene(<span class="keyword">new</span> Scene(MainView.getInstance()));</div><div class="line">        primaryStage.setMaximized(<span class="keyword">true</span>);</div><div class="line">        primaryStage.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><ol>
<li><a href="http://www.javafxchina.net/blog/2015/06/doc05_buildinlayout/" target="_blank" rel="external">使用内置的布局面板</a></li>
<li><a href="http://code.makery.ch/library/javafx-8-tutorial/zh-cn/" target="_blank" rel="external">JavaFX 8 教程「中文」</a></li>
<li><a href="https://docs.oracle.com/javase/8/javafx/api/" target="_blank" rel="external">JavaFX 8 API Document</a></li>
<li><a href="http://gluonhq.com/products/scene-builder/" target="_blank" rel="external">Gluon Scene Builder</a></li>
<li><a href="http://zhk.me/832.html" target="_blank" rel="external">JavaFX 创建自定义控件</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文探讨在 JavaFX 8 环境下实现自定义控件的相关方法，以及自定义控件在流式布局中的布置方式，由于自定义控件使用时需要同时引用布局文件和控制器类，较为繁琐，故也探讨了其简化方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="GUI" scheme="http://bitky.cc/tags/GUI/"/>
    
      <category term="JavaFX" scheme="http://bitky.cc/tags/JavaFX/"/>
    
      <category term="FXML" scheme="http://bitky.cc/tags/FXML/"/>
    
      <category term="自定义控件" scheme="http://bitky.cc/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="Scene Builder" scheme="http://bitky.cc/tags/Scene-Builder/"/>
    
  </entry>
  
  <entry>
    <title>Netty 框架总结「ChannelHandler 及 EventLoop」</title>
    <link href="http://bitky.cc/2017/05/05/netty/"/>
    <id>http://bitky.cc/2017/05/05/netty/</id>
    <published>2017-05-05T04:57:47.000Z</published>
    <updated>2017-05-05T09:06:53.844Z</updated>
    
    <content type="html"><![CDATA[<p>学习了一段时间的 Netty，将重点与学习心得总结如下，本文主要总结ChannelHandler 及 EventLoop 的知识点和基本用法，本文章节排序参照《Netty in Action》的章节排序。</p>
<a id="more"></a>
<blockquote>
<p>以下内容主要参考「并发编程网」的 <a href="http://ifeve.com/netty-in-action/" target="_blank" rel="external">《Netty in Action》中文版</a> 以及《Netty in Action》原版图书，辅助参考 <a href="https://waylau.com/essential-netty-in-action/" target="_blank" rel="external">Essential Netty in Action 《Netty 实战(精髓)》</a> 以及 Netty 官网的 <a href="http://netty.io/4.1/api/index.html" target="_blank" rel="external">Netty 4.1 JavaDoc</a> 。</p>
</blockquote>
<h1 id="6-ChannelHandler-和-ChannelPipeline"><a href="#6-ChannelHandler-和-ChannelPipeline" class="headerlink" title="6. ChannelHandler 和 ChannelPipeline"></a>6. ChannelHandler 和 ChannelPipeline</h1><p>一个 Channel 正常的生命周期如下图所示。随着状态发生变化，相应的 event 产生。这些 event 被转发到 ChannelPipeline 中的 ChannelHandler 来采取相应的操作。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-32f2f760f448b713.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Channel状态模型"></p>
<h2 id="6-1-ChannelHandler"><a href="#6-1-ChannelHandler" class="headerlink" title="6.1 ChannelHandler"></a>6.1 ChannelHandler</h2><p>ChannelHandler 有两个重要的子接口：</p>
<ul>
<li>「ChannelInboundHandler」处理输入数据和所有类型的状态变化</li>
<li>「ChannelOutboundHandler」处理输出数据，可以拦截所有操作</li>
</ul>
<h3 id="6-1-1-ChannelInboundHandler"><a href="#6-1-1-ChannelInboundHandler" class="headerlink" title="6.1.1  ChannelInboundHandler"></a>6.1.1  ChannelInboundHandler</h3><p>下表列出接口 ChannelInboundHandler 的方法。当收到数据或相关 Channel 的状态改变时，这些方法被调用，<strong>这些方法和Channel的生命周期密切相关</strong>。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>channelRegistered</td>
<td>当一个Channel注册到EventLoop上，可以处理I/O时被调用</td>
</tr>
<tr>
<td>channelUnregistered</td>
<td>当一个Channel从它的EventLoop上解除注册，不再处理I/O时被调用</td>
</tr>
<tr>
<td>channelActive</td>
<td>当Channel变成活跃状态时被调用；Channel是连接/绑定、就绪的</td>
</tr>
<tr>
<td>channelInactive</td>
<td>当Channel离开活跃状态，不再连接到某个远端时被调用</td>
</tr>
<tr>
<td><strong>channelReadComplete</strong></td>
<td>当Channel上的某个读操作完成时被调用</td>
</tr>
<tr>
<td><strong>channelRead</strong></td>
<td>当从Channel中读数据时被调用</td>
</tr>
</tbody>
</table>
<h3 id="6-1-2-ChannelOutboundHandler"><a href="#6-1-2-ChannelOutboundHandler" class="headerlink" title="6.1.2 ChannelOutboundHandler"></a>6.1.2 ChannelOutboundHandler</h3><p>输出的操作和数据由 ChannelOutBoundHandler 处理。它的方法可以被 Channel，ChannelPipeline 和 ChannelHandlerContext 调用，子接口 ChannelOutboundHandler 的主要方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>bind(ChannelHandlerContext,SocketAddress,ChannelPromise)</td>
<td>请求绑定 Channel 到一个本地地址</td>
</tr>
<tr>
<td>connect(ChannelHandlerContext, SocketAddress,SocketAddress,ChannelPromise)</td>
<td>请求连接 Channel 到远端</td>
</tr>
<tr>
<td>disconnect(ChannelHandlerContext, ChannelPromise)</td>
<td>请求从远端断开 Channel</td>
</tr>
<tr>
<td>close(ChannelHandlerContext,ChannelPromise)</td>
<td>请求关闭 Channel</td>
</tr>
<tr>
<td>deregister(ChannelHandlerContext, ChannelPromise)</td>
<td>请求 Channel 从它的 EventLoop 上解除注册</td>
</tr>
<tr>
<td>read(ChannelHandlerContext)</td>
<td>请求从 Channel 中读更多的数据</td>
</tr>
<tr>
<td><strong>flush(ChannelHandlerContext)</strong></td>
<td>请求通过 Channel 刷队列数据到远端</td>
</tr>
<tr>
<td><strong>write(ChannelHandlerContext,Object, ChannelPromise)</strong></td>
<td>请求通过 Channel 写数据到远端</td>
</tr>
</tbody>
</table>
<h3 id="6-1-3-ChannelHandler-适配器类"><a href="#6-1-3-ChannelHandler-适配器类" class="headerlink" title="6.1.3 ChannelHandler 适配器类"></a>6.1.3 ChannelHandler 适配器类</h3><p>ChannelInboundHandlerAdapter 和 ChannelOutboundHandlerAdapter 这两个适配器类分别提供了 ChannelInboundHandler 和 ChannelOutboundHandler 的基本实现，它们继承了共同的父接口 ChannelHandler 的方法，扩展了抽象类 ChannelHandlerAdapter。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-2b19efbbd8ae56cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ChannelHandlerAdapter类层级关系"></p>
<ul>
<li><p>ChannelHandlerAdapter 提供了工具方法 isSharable()。如果类实现带 @Sharable 注解，那么这个方法就会返回 true，意味着这个对象可以被添加到多个 ChannelPipeline 中。</p>
</li>
<li><p>ChannelInboundHandlerAdapter 和 ChannelOutboundHandlerAdapter 中的方法调用相关 ChannelHandlerContext 中的等效方法，因此将事件转发到管道中的下一个ChannelHandler。</p>
</li>
</ul>
<h3 id="6-1-4-ChannelFuture-和-ChannelPromise"><a href="#6-1-4-ChannelFuture-和-ChannelPromise" class="headerlink" title="6.1.4 ChannelFuture 和 ChannelPromise"></a>6.1.4 ChannelFuture 和 ChannelPromise</h3><ul>
<li>ChannelPromise 是 ChannelFuture 的子接口</li>
<li>而 ChannelFuture 是不可变对象</li>
<li>ChannelPromise 定义了可写的方法，比如 setSuccess(),  setFailure()</li>
</ul>
<h3 id="6-1-5-释放资源"><a href="#6-1-5-释放资源" class="headerlink" title="6.1.5 释放资源"></a>6.1.5 释放资源</h3><p><strong>1. 输入方向「Inbound」</strong><br>当一个 ChannelInboundHandler 实现类重写 channelRead() 方法时，它要负责释放 ByteBuf 相关的内存。可使用 Netty 提供的工具方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ReferenceCountUtil.release(「ByteBuf 的对象」)</div></pre></td></tr></table></figure>
<p>更简单的，可使用子类 SimpleChannelInboundHandler ，一条消息在被 ChannelRead0() 读取后，会被自动释放资源，此时任何对消息的引用都会变成无效，所以不能保存这些引用待后来使用。</p>
<p><strong>2. 输出方向「Outbound」</strong><br>在输出方向，如果处理一个 write() 操作并且丢弃一条消息（没有写入 Channel），就应该负责释放这条消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@ChannelHandler.Sharable public </div><div class="line">class DiscardOutboundHandler extends ChannelOutboundHandlerAdapter &#123;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) &#123;</div><div class="line">    ReferenceCountUtil.release(msg);  //使用 ReferenceCountUtil.release(...) 释放资源</div><div class="line">    promise.setSuccess();  //通知 ChannelPromise 数据已经被处理</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果一个消息被“消费”或者丢弃，没有送到 ChannelPipeline 中的下一个 ChannelOutboundHandler，用户就要负责调用 ReferenceCountUtil.release()。如果消息到达了真正的传输层，在它被写到 Socket 中或者 Channel 关闭时，会被自动释放，用户不用管。</p>
<h2 id="6-2-ChannelPipeline-接口"><a href="#6-2-ChannelPipeline-接口" class="headerlink" title="6.2 ChannelPipeline 接口"></a>6.2 ChannelPipeline 接口</h2><ul>
<li><p>每个新创建的 Channel 都会分配一个新的 ChannelPipeline，Channel 不可以更换或解除当前的 ChannelPipeline，在 Netty 组件的整个生命周期中这个关系是固定的。</p>
</li>
<li><p>一个 ChannelPipeline 可看成是一串 ChannelHandler 实例，拦截穿过 Channel 的输入输出 event。</p>
</li>
<li><p>根据来源，一个 event 可以被一个 ChannelInboundHandler 或 ChannelOutboundHandler 处理。接下来，通过调用 ChannelHandlerContext 的方法，event 会被转发到下一个同类型的 handler。</p>
</li>
</ul>
<h3 id="6-2-1-ChannelHandlerContext"><a href="#6-2-1-ChannelHandlerContext" class="headerlink" title="6.2.1 ChannelHandlerContext"></a>6.2.1 ChannelHandlerContext</h3><ul>
<li><p>通过 ChannelHandlerContext，一个 handler 可以通知 ChannelPipeline 中的下一个ChannelHandler，甚至动态改动下一个ChannelHandler 所属的 ChannelPipeline。</p>
</li>
<li><p>ChannelPipeline 主要由一系列 ChannelHandler 组成的。ChannelPipeline 提供在 ChannelPipeline 中传送 event 的方法。</p>
</li>
<li><p>ChannelHandlerContext 的一些方法和其他类（Channel 和 ChannelPipeline）的方法名字相似，但是 ChannelHandlerContext 的方法采用了更短的 event 传递路程。我们应该尽可能利用这一点来实现最好的性能。</p>
</li>
<li><p>如果你在 Channel 或者 ChannelPipeline 实例上调用这些方法，它们的调用会穿过整个 pipeline。而在 ChannelHandlerContext 上调用的同样的方法，仅仅从当前 ChannelHandler 开始，走到 pipeline 中下一个可以处理这个 event 的 ChannelHandler。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-03d6432455caa91e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ChannelPipeline 和 ChannelHandlers"></p>
<p><strong>「本节参考」</strong> <a href="http://ifeve.com/netty-in-action-6/" target="_blank" rel="external">第六章 ChannelHandler 和 ChannelPipeline</a></p>
<h1 id="7-EventLoop-和-EventLoopGroup"><a href="#7-EventLoop-和-EventLoopGroup" class="headerlink" title="7. EventLoop 和 EventLoopGroup"></a>7. EventLoop 和 EventLoopGroup</h1><h2 id="7-1-Java-基本的线程池模式"><a href="#7-1-Java-基本的线程池模式" class="headerlink" title="7.1 Java 基本的线程池模式"></a>7.1 Java 基本的线程池模式</h2><ul>
<li>从池中空闲的线程中选出一个，分配一个提交的task「一个Runnable的实现」</li>
<li>当task完成，线程返回池中，等待复用「下一次task分配」</li>
</ul>
<h2 id="7-2-EventLoop「事件循环」"><a href="#7-2-EventLoop「事件循环」" class="headerlink" title="7.2 EventLoop「事件循环」"></a>7.2 EventLoop「事件循环」</h2><ul>
<li>EventLoop 始终由一个线程驱动</li>
<li>一个 EventLoop 可以被指派来服务多个 Channel</li>
<li>一个 Channel 只拥有一个 EventLoop</li>
</ul>
<p>task (Runnable或Callable) 可以直接提交到 EventLoop 实现即刻或者延后执行。根据配置和可用的CPU核，可以创建多个 EventLoop 来优化资源利用。</p>
<p>一个 event 的本质决定了它将如何被处理；它可能从网络协议栈传送数据到你的应用，或者反过来，或者做一些完全不一样的事情。但是 event 处理逻辑必须足够通用和灵活，来对付所有可能的情况。</p>
<p>所以，在 Netty 4，所有的 I/O 操作和 event 都是由分配给 EventLoop 的那一个 Thread 来处理的。Netty 4 采用的线程模型，在同一个线程的 EventLoop 中处理所有发生的事。</p>
<h2 id="7-3-EventLoopGroup"><a href="#7-3-EventLoopGroup" class="headerlink" title="7.3 EventLoopGroup"></a>7.3 EventLoopGroup</h2><ul>
<li>EventLoopGroup 负责分配 EventLoop 到新创建的 Channel</li>
<li>异步实现只用了很少 EventLoop，这几个 EventLoop 被所有 Channel 共享</li>
<li>一但 Channel 被指派了一个 EventLoop，在它的整个生命周期过程中，都会用这个 EventLoop</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-9126a72ae84c6011.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="针对非阻塞传输的EventLoop分配"></p>
<p>为 Channel 的 I/O 和 event 提供服务的 EventLoop 都包含在一个 EventLoopGroup 中。EventLoop 创建和分配的方式根据传输实现的不同而有所不同。</p>
<p>异步实现只用了很少几个 EventLoop（和它们关联的线程），在目前 Netty 的模型中，这几个 EventLoop 被所有 Channel 共享。这让很多 Channel 被最少数量的线程服务，而不是每个 Channel 分配一个线程。</p>
<p>EventLoopGroup 负责分配一个 EventLoop 到每个新创建的 Channel。在目前的实现中，采用循环 (round-robin) 策略可以满足一个平衡的分配，同一个 Eventloop 还可能会被分配到多个 Channel。</p>
<p><strong>「本节参考」</strong> <a href="http://ifeve.com/netty-in-action-7/" target="_blank" rel="external">第七章 EventLoop和线程模型</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://ifeve.com/netty-in-action/" target="_blank" rel="external">《Netty in Action》中文版</a></li>
<li><a href="https://waylau.com/essential-netty-in-action/" target="_blank" rel="external">Essential Netty in Action 《Netty 实战(精髓)》</a></li>
<li><a href="http://netty.io/4.1/api/index.html" target="_blank" rel="external">Netty 4.1 JavaDoc</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习了一段时间的 Netty，将重点与学习心得总结如下，本文主要总结ChannelHandler 及 EventLoop 的知识点和基本用法，本文章节排序参照《Netty in Action》的章节排序。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Netty" scheme="http://bitky.cc/tags/Netty/"/>
    
      <category term="TCP" scheme="http://bitky.cc/tags/TCP/"/>
    
      <category term="ChannelHandler" scheme="http://bitky.cc/tags/ChannelHandler/"/>
    
      <category term="EventLoop" scheme="http://bitky.cc/tags/EventLoop/"/>
    
  </entry>
  
  <entry>
    <title>加速访问基于 Github Pages 和 Hexo 的博客</title>
    <link href="http://bitky.cc/2017/04/19/blog/"/>
    <id>http://bitky.cc/2017/04/19/blog/</id>
    <published>2017-04-19T04:57:47.000Z</published>
    <updated>2017-04-22T11:31:29.906Z</updated>
    
    <content type="html"><![CDATA[<p>本文探讨如何加速访问基于 Github Pages 和 Hexo 的博客。大家搭建博客广泛采用了 Hexo + NexT + Github Pages 的方式。众所周知，这种类型的博客未经优化，打开速度比较慢，本文探讨优化的方法，包括修改依赖的字体资源，更换博客托管平台等方式，加速博客的访问。</p>
<a id="more"></a>
<h1 id="1-探索-Hexo-NexT-的博客打开速度比较慢的原因"><a href="#1-探索-Hexo-NexT-的博客打开速度比较慢的原因" class="headerlink" title="1. 探索 Hexo + NexT 的博客打开速度比较慢的原因"></a>1. 探索 Hexo + NexT 的博客打开速度比较慢的原因</h1><p>由于我本人原本就比较重视博客的打开速度，所以博客中使用的资源均已进行了不同程度的优化。比如博文中的图片均外链于图床「简书、七牛等」，博客的头像和网站的图标均优化了分辨率和画质，关闭了所有 NexT 自带的动画效果等。</p>
<p>经过上述优化后，打开我的博客，通过 Chrome 的开发者工具可以看到，访问博客所请求的资源大多均可在 1 秒内获得相应，但是其中仍然有三个资源请求失败：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-ddb2b22dbc892491.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三个 HTTP 请求失败"></p>
<p>通过查询这些 HTTP 请求，可以发现，请求失败的原因是无法从 Google 的服务器中获取到 Lato 字体相关的资源「翻墙后可正常获取这些资源文件」：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-ebd3817f58962406.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Lato 字体资源无法获取"></p>
<h1 id="2-修改博客所依赖的字体资源"><a href="#2-修改博客所依赖的字体资源" class="headerlink" title="2. 修改博客所依赖的字体资源"></a>2. 修改博客所依赖的字体资源</h1><p>打开 NexT 的主题配置文件「_config.yml」，找到如下图所示的字体设置区域，删除全局字体族「Lato」。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-7efbcb031604cca0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NexT 主题的字体族设置"></p>
<p>之后再次访问博客，速度会大大加快。当然也可以设置网页所使用的字体族，具体设置方式参见文末的参考链接。</p>
<h1 id="3-博客托管平台比较"><a href="#3-博客托管平台比较" class="headerlink" title="3. 博客托管平台比较"></a>3. 博客托管平台比较</h1><p>由于博客部署在 Github Pages, 所以在国内访问速度显然会比较慢。可选方案为国内的代码托管平台<a href="https://coding.net/" target="_blank" rel="external">「码云」</a>，码云提供了 Coding Pages 服务，使用起来比 Github Pages 更加方便。但是同样的 Hexo + NexT 博客部署到码云，打开时会出现部分 Js 资源无法找到的错误，如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-0700f2d3eb4fa597.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开「码云」上的静态网页出现错误"></p>
<p>以上错误的原因我未过多探究，由于该平台有此错误，故我采用的方案是：将博客部署在「七牛云存储」中，这样做可显著提高博客的访问速度。</p>
<p>使用站长之家的<a href="http://tool.chinaz.com/" target="_blank" rel="external">「网站测速工具」</a>对分别部署在「七牛」和「Github Pages」的我的两个博客进行测速，结果如下所示，速度高下立判。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-27c8d96a3bc273eb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="部署在「Github Pages」的博客"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-96916b8a0c019f6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="部署在「七牛」的博客"></p>
<h1 id="4-将博客部署到七牛云存储时遇到的坑"><a href="#4-将博客部署到七牛云存储时遇到的坑" class="headerlink" title="4. 将博客部署到七牛云存储时遇到的坑"></a>4. 将博客部署到七牛云存储时遇到的坑</h1><p>参考文末链接中的方法即可顺利将博客部署在七牛中，并可使用七牛提供的临时域名访问博客，不过我仍遇到一些坑，造成了一些困扰。</p>
<p>遇到的问题一：虽然博客部署成功，但是通过我自己的域名访问直接报 404 错误。后来发现的原因是 DNS 有问题，更换 DNS 后即可正常访问「如使用 <a href="http://alidns.com/" target="_blank" rel="external">阿里 DNS</a>」。我这里的网络一向对七牛支持不好，不知是什么原因。</p>
<p>遇到的问题二：七牛默认采用「融合 CDN」技术手段，加速网站的访问，该方案会显著影响动态文件的请求效果，如更新某篇文章后，默认情况下过了 30 天才能在网页上看到更新。官方提供了方案用来及时刷新缓存：</p>
<p><a href="https://developer.qiniu.com/fusion/kb/1325/refresh-the-cache-and-the-effect-of-time" target="_blank" rel="external">刷新缓存和生效时间</a><br><a href="https://developer.qiniu.com/fusion/kb/1680/cdn-cache-rule-set" target="_blank" rel="external">CDN 缓存规则设置</a></p>
<p>所以七牛提供的加速功能最好只针对静态文件，但对于我们的静态博客来说，更新博客后手动刷新一下缓存其实并不麻烦，并且七牛的缓存刷新时间可以进行设置，利大于弊。</p>
<h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h1><ol>
<li><a href="https://anyof.me/articles/425" target="_blank" rel="external">NexT 主题中从服务器加载 Google 字体</a></li>
<li><a href="http://wjchan.com/blog/2016/03/30/font-slow.html" target="_blank" rel="external">Google 字库导致 Hexo NexT 首页加载变慢</a></li>
<li><a href="http://www.uisdc.com/web-font" target="_blank" rel="external">Web 中文字体应用指南</a></li>
<li><a href="http://www.uisdc.com/web-font-style" target="_blank" rel="external">跨平台字体效果浅析</a></li>
<li><a href="http://www.uisdc.com/163-uedc-1" target="_blank" rel="external">浅析中英文基本字形的演变和发展</a></li>
<li><a href="http://www.uisdc.com/select-the-font-five-principles" target="_blank" rel="external">新手入门：选择字体的五个原则</a></li>
<li><a href="http://www.isetsuna.com/hexo/deploy-qiniu/" target="_blank" rel="external">Hexo 博客系列：部署到七牛</a></li>
<li><a href="https://developer.qiniu.com/kodo/tools/1299/qrsbox" target="_blank" rel="external">多平台同步上传客户端「七牛」</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文探讨如何加速访问基于 Github Pages 和 Hexo 的博客。大家搭建博客广泛采用了 Hexo + NexT + Github Pages 的方式。众所周知，这种类型的博客未经优化，打开速度比较慢，本文探讨优化的方法，包括修改依赖的字体资源，更换博客托管平台等方式，加速博客的访问。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="GitHub Pages" scheme="http://bitky.cc/tags/GitHub-Pages/"/>
    
      <category term="Hexo" scheme="http://bitky.cc/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://bitky.cc/tags/NexT/"/>
    
      <category term="博客" scheme="http://bitky.cc/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>SLF4J 和 Logback 在 Maven 项目中的使用方法</title>
    <link href="http://bitky.cc/2017/04/17/log/"/>
    <id>http://bitky.cc/2017/04/17/log/</id>
    <published>2017-04-17T14:57:47.000Z</published>
    <updated>2017-04-17T14:43:14.168Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 SLF4J 和 Logback 在 Maven 项目中的用法，包括日志框架的依赖、使用，以及 XML 配置文件的引入。本文的精华内容翻译 Base22，文章来源见文末。</p>
<a id="more"></a>
<h1 id="1-将框架-SLF4J-＆-Logback-添加到-Maven-项目中。"><a href="#1-将框架-SLF4J-＆-Logback-添加到-Maven-项目中。" class="headerlink" title="1. 将框架 SLF4J ＆ Logback 添加到 Maven 项目中。"></a>1. 将框架 SLF4J ＆ Logback 添加到 Maven 项目中。</h1><p>通过简单的几个步骤，即可将 SLF4J 和 Logback 添加到 Maven 项目中。</p>
<h2 id="1-1-将依赖添加到-Maven-的-POM-xml-中"><a href="#1-1-将依赖添加到-Maven-的-POM-xml-中" class="headerlink" title="1.1 将依赖添加到 Maven 的 POM.xml 中"></a>1.1 将依赖添加到 Maven 的 POM.xml 中</h2><p>直接在 <a href="">Maven Repository</a> 中搜索 <code>Logback</code>, 选择使用量最大的「<a href="http://mvnrepository.com/artifact/ch.qos.logback/logback-classic" target="_blank" rel="external">Logback Classic Module</a>」, 将该依赖添加到 POM.xml 中，例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将会在项目中导入如下类库：</p>
<ul>
<li>logback-classic.x.x.x.jar</li>
<li>logback-core.x.x.x.jar</li>
<li>slf4j-api-x.x.x.jar</li>
</ul>
<h2 id="1-2-使用-XML-配置文件初始化"><a href="#1-2-使用-XML-配置文件初始化" class="headerlink" title="1.2 使用 XML 配置文件初始化"></a>1.2 使用 XML 配置文件初始化</h2><p>将 XML 配置文件 <code>logback.xml</code> 和 <code>logback-test.xml</code> 按照以下层次结构添加到项目中：</p>
<ul>
<li>src<ul>
<li>main<ul>
<li>resources<ul>
<li>logback.xml</li>
</ul>
</li>
</ul>
</li>
<li>test<ul>
<li>resources<ul>
<li>logback-test.xml</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>其中，两配置文件的内容如下：</p>
<p><strong> logback.xml </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line"></div><div class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;Pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/Pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;logger name=&quot;com.base22&quot; level=&quot;TRACE&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;root level=&quot;debug&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line"></div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p><strong> logback-test.xml </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line"></div><div class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;Pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/Pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;root level=&quot;debug&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line"></div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>在 <code>logback.xml</code> 中可以看到，包 <code>com.base22</code> 的 level 是 <code>TRACE</code>, 通过设置 <code>logger</code> 节点，可以指定特定包的 level。</p>
<p>除了特定包之外，项目的日志 level 均由 <code>root</code> 节点指定。</p>
<h1 id="2-Log-的基本使用"><a href="#2-Log-的基本使用" class="headerlink" title="2. Log 的基本使用"></a>2. Log 的基本使用</h1><p>使用 Log 时，需要在每个 <code>class</code> 文件中进行初始化操作。</p>
<p>首先导入如下内容：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div></pre></td></tr></table></figure>
<p>之后可使用如下语句引入 log ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static final Logger logger = LoggerFactory.getLogger(MyClassName.class);</div></pre></td></tr></table></figure>
<p>其中 <code>MyClassName</code> 改为该类的类名。</p>
<p>亦可在类的构造方法中使用如下语句初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Logger logger = LoggerFactory.getLogger(getClass());</div></pre></td></tr></table></figure>
<p>之后可在方法中调用如下语句进行 log 操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">logger.debug(<span class="string">"debug"</span>);</div><div class="line">logger.info(<span class="string">"info"</span>);</div></pre></td></tr></table></figure>
<h1 id="3-日志的级别-level-参考"><a href="#3-日志的级别-level-参考" class="headerlink" title="3. 日志的级别 (level) 参考"></a>3. 日志的级别 (level) 参考</h1><p>日志的级别 (level) 由低到高排列如下：</p>
<ul>
<li>trace</li>
<li>debug</li>
<li>info</li>
<li>warn</li>
<li>error</li>
</ul>
<h1 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h1><ol>
<li><a href="https://wiki.base22.com/display/btg/How+to+setup+SLF4J+and+LOGBack+in+a+web+app+-+fast" target="_blank" rel="external">How to setup SLF4J and LOGBack in a web app - fast</a></li>
<li><a href="https://logback.qos.ch/codes.html#layoutInsteadOfEncoder" target="_blank" rel="external">This appender no longer admits a layout as a sub-component, set an encoder instead. </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 SLF4J 和 Logback 在 Maven 项目中的用法，包括日志框架的依赖、使用，以及 XML 配置文件的引入。本文的精华内容翻译 Base22，文章来源见文末。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Maven" scheme="http://bitky.cc/tags/Maven/"/>
    
      <category term="SLF4J" scheme="http://bitky.cc/tags/SLF4J/"/>
    
      <category term="Logback" scheme="http://bitky.cc/tags/Logback/"/>
    
      <category term="log" scheme="http://bitky.cc/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Maven 常用技巧总结</title>
    <link href="http://bitky.cc/2017/04/06/maven/"/>
    <id>http://bitky.cc/2017/04/06/maven/</id>
    <published>2017-04-06T04:57:47.000Z</published>
    <updated>2017-04-26T14:54:36.344Z</updated>
    
    <content type="html"><![CDATA[<p>Maven 的常用技巧总结，包括设置 Java JDK 的版本为 JDK 1.8，构建生成可执行的 Jar，读取 resources 目录中的资源文件等。</p>
<a id="more"></a>
<h1 id="1-设置-Java-JDK-的版本为「JDK-1-8」"><a href="#1-设置-Java-JDK-的版本为「JDK-1-8」" class="headerlink" title="1. 设置 Java JDK 的版本为「JDK 1.8」"></a>1. 设置 Java JDK 的版本为「JDK 1.8」</h1><p>可以修改 <code>pom.xml</code> 添加如下语句实现使用 Java 8 语言特性，共有两种方式，可任选其一：</p>
<h2 id="1-1-添加-property"><a href="#1-1-添加-property" class="headerlink" title="1.1 添加 property"></a>1.1 添加 property</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">  [...]</div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">  [...]</div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="1-2-直接配置插件"><a href="#1-2-直接配置插件" class="headerlink" title="1.2 直接配置插件"></a>1.2 直接配置插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">  [...]</div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    [...]</div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    [...]</div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line">  [...]</div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="2-Maven-构建生成可执行的-Jar"><a href="#2-Maven-构建生成可执行的-Jar" class="headerlink" title="2. Maven 构建生成可执行的 Jar"></a>2. Maven 构建生成可执行的 Jar</h1><h2 id="2-1-简单构建可执行的-Jar"><a href="#2-1-简单构建可执行的-Jar" class="headerlink" title="2.1 简单构建可执行的 Jar"></a>2.1 简单构建可执行的 Jar</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">  [...]</div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    [...]</div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">          [...]</div><div class="line">          <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.sample.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        [...]</div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">      [...]</div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时可使用如下命令构建可执行 Jar</p>
<pre><code>mvn assembly:single
</code></pre><h2 id="2-2-将-Assembly-的-single-目标绑定到项目的构建生命周期中"><a href="#2-2-将-Assembly-的-single-目标绑定到项目的构建生命周期中" class="headerlink" title="2.2 将 Assembly 的 single 目标绑定到项目的构建生命周期中"></a>2.2 将 Assembly 的 single 目标绑定到项目的构建生命周期中</h2><p>可在 pom.xml 文件中添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span>    </div><div class="line">  [...]              </div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span>        </div><div class="line">    [...]                            </div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- append assembly id in release file name --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>true<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--构建可执行的 Jar--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>cc.bitky.fx.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--使用「Jar集成依赖」的描述符--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">              <span class="comment">&lt;!-- this is used for inheritance merges --&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">              <span class="comment">&lt;!-- bind to the packaging phase --&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    [...]  </div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>之后，为了生成项目的 Jar 文件，可以简单地执行如下生命周期阶段命令：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn package</div></pre></td></tr></table></figure>
<p>构建完毕后，可以看到已经生成了类似于以下名字的文件：</p>
<pre><code>target / sample-1.0-SNAPSHOT-jar-with-dependencies.jar

target / sample-1.0.jar
</code></pre><p>appendAssemblyId: 控制是否在已生成的文件的文件名中包含「ssembly id」。</p>
<p>execution: 用于将 maven-assembly-plugin 集成至标准的 Maven 构建生命周期中，此时执行 <code>maven package</code> 时就会执行指定的操作，从而实现自定义打包。</p>
<h2 id="2-3-Assembly-插件的-Maven-Goals"><a href="#2-3-Assembly-插件的-Maven-Goals" class="headerlink" title="2.3 Assembly 插件的 Maven Goals"></a>2.3 Assembly 插件的 Maven Goals</h2><ul>
<li>assembly:assembly: 「已弃用」会自动执行 package 生命周期。</li>
<li>assembly:single: 仅会装配成 jar-with-dependencies，我们不想让 package 阶段运行两次 package，所以配置为这个。</li>
</ul>
<h1 id="3-可执行-Jar-文件执行时出现乱码"><a href="#3-可执行-Jar-文件执行时出现乱码" class="headerlink" title="3. 可执行 Jar 文件执行时出现乱码"></a>3. 可执行 Jar 文件执行时出现乱码</h1><p>使用 Maven 生成的可执行 Jar 文件，在 cmd 中执行时出现乱码，项目编码统一为 UTF-8，日志使用 SLF4J 框架。</p>
<h2 id="3-1-方法-1：windows-默认使用-GBK-编码，执行-Jar-时动态指定编码"><a href="#3-1-方法-1：windows-默认使用-GBK-编码，执行-Jar-时动态指定编码" class="headerlink" title="3.1 方法 1：windows 默认使用 GBK 编码，执行 Jar 时动态指定编码"></a>3.1 方法 1：windows 默认使用 GBK 编码，执行 Jar 时动态指定编码</h2><p>运行 <code>java -jar</code> 命令时添加参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Dfile.encoding=UTF-8</div></pre></td></tr></table></figure></p>
<p>格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar -Dfile.encoding=UTF-8 simpler.jar</div></pre></td></tr></table></figure></p>
<p>或添加环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JAVA_TOOL_OPTIONS = -Dfile.encoding=UTF-8</div></pre></td></tr></table></figure></p>
<h2 id="3-2-使用临时的活动代码页运行"><a href="#3-2-使用临时的活动代码页运行" class="headerlink" title="3.2 使用临时的活动代码页运行"></a>3.2 使用临时的活动代码页运行</h2><p>在控制台执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chcp 65001</div></pre></td></tr></table></figure></p>
<p>可将当前 cmd 的编码临时变为 UTF-8，执行 <code>chcp</code> 命令可显示当前 cmd 的编码。</p>
<h1 id="4-Maven-中读取资源文件"><a href="#4-Maven-中读取资源文件" class="headerlink" title="4. Maven 中读取资源文件"></a>4. Maven 中读取资源文件</h1><p>在 Maven 项目的根目录下，有如下必要的目录结构:</p>
<blockquote>
<ul>
<li>src<ul>
<li>main<ul>
<li>resources「存放一些资源文件」</li>
<li>java</li>
</ul>
</li>
<li>test<ul>
<li>resources「存放一些资源文件」</li>
<li>java</li>
</ul>
</li>
</ul>
</li>
<li>pom.xml</li>
</ul>
</blockquote>
<p>在项目的 <code>compile</code> 时期，所有的资源文件和 <code>.class</code> 文件均被复制到 <code>target/classes/</code> 目录中，获取资源文件，可参考如下语句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. <span class="keyword">this</span>.getClass().getResource（<span class="string">""</span>）</div><div class="line">   <span class="comment">//得到的是当前类 class 文件所在的目录 URL。</span></div><div class="line"></div><div class="line"><span class="number">2</span>. <span class="keyword">this</span>.getClass().getResource（<span class="string">"/"</span>）</div><div class="line"><span class="number">3</span>. <span class="keyword">this</span>.getClass().getClassLoader().getResource（<span class="string">""</span>）</div><div class="line"><span class="number">4</span>. ClassLoader.getSystemResource（<span class="string">""</span>）</div><div class="line"><span class="number">5</span>. Thread.currentThread().getContextClassLoader().getResource（<span class="string">""</span>）</div><div class="line">   <span class="comment">//得到的是当前 ClassPath 的绝对 URI 路径。</span></div></pre></td></tr></table></figure>
<p>所以，如若想要获取 <code>resources</code> 文件夹中的资源文件 <code>ky.xml</code>，可使用如下语句之一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getClass().getClassLoader().getResource(&quot;ky.xml&quot;)</div><div class="line">getClass().getResource(&quot;/ky.fxml&quot;)</div></pre></td></tr></table></figure>
<h1 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h1><ol>
<li><a href="http://maven.apache.org/components/plugins/maven-compiler-plugin/examples/set-compiler-source-and-target.html" target="_blank" rel="external">Setting the -source and -target of the Java Compiler</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-5things13/" target="_blank" rel="external">关于 Apache Maven 您不知道的 5 件事</a></li>
<li><a href="https://my.oschina.net/simpleton/blog/607776" target="_blank" rel="external">Maven 打包可执行 Jar 的方法</a></li>
<li><a href="http://tonglin.iteye.com/blog/556449" target="_blank" rel="external"><a href="http://tonglin.iteye.com/blog/556449" target="_blank" rel="external">关于创建可执行的 Jar 文件</a></a></li>
<li><a href="http://www.blogjava.net/aoxj/archive/2009/01/16/251615.html" target="_blank" rel="external">初学 Maven - 使用 Assembly Plugin 实现自定义打包</a></li>
<li><a href="http://stackoverflow.com/questions/22000423/javafx-and-maven-nullpointerexception-location-is-required" target="_blank" rel="external">JavaFX and maven: NullPointerException: Location is required</a></li>
<li><a href="http://liumh.com/2014/01/14/get-path-of-file-with-java/" target="_blank" rel="external">Java 获取文件的路径</a></li>
<li><a href="http://www.oschina.net/question/2317047_2192640" target="_blank" rel="external">Maven 项目打包成 Jar 后执行日志乱码</a></li>
<li><a href="http://www.cnblogs.com/tsoukw/archive/2010/10/20/1856497.html" target="_blank" rel="external">Console 输出 UTF-8</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven 的常用技巧总结，包括设置 Java JDK 的版本为 JDK 1.8，构建生成可执行的 Jar，读取 resources 目录中的资源文件等。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Maven" scheme="http://bitky.cc/tags/Maven/"/>
    
      <category term="可执行 Jar" scheme="http://bitky.cc/tags/%E5%8F%AF%E6%89%A7%E8%A1%8C-Jar/"/>
    
      <category term="资源文件" scheme="http://bitky.cc/tags/%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>基于 Netty 的自定义帧高可靠性读取方案</title>
    <link href="http://bitky.cc/2017/03/26/netty/"/>
    <id>http://bitky.cc/2017/03/26/netty/</id>
    <published>2017-03-26T11:57:47.000Z</published>
    <updated>2017-05-05T09:10:35.985Z</updated>
    
    <content type="html"><![CDATA[<p>本文采用 Netty 这一最流行的 Java NIO 框架，作为 Java 服务器通信部分的基础框架，探索使用一个通道、一台服务器对多个客户端提供服务。</p>
<p>完成客户端 - 服务器通信，需要基于 TCP 协议之上，自定义一套简单的通信协议，其中数据交换方式需要使用自定义帧。为实现以上方案，本文采用 Netty 框架实现 Java 服务器的通信部分。</p>
<a id="more"></a>
<blockquote>
<p><strong>Netty</strong> 是由 JBoss 提供的一个 Java开源 框架。Netty 提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。</p>
<p>也就是说，Netty 是一个基于 NIO 的客户、服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户，服务端应用。Netty 相当简化和流线化了网络应用的编程开发过程，例如，TCP 和 UDP 的 socket 服务开发。</p>
</blockquote>
<p>本项目的硬件设备集群使用 CAN 总线作为通信协议，硬件设备产生的数据和工作人员的控制指令均由服务器后端应用程序处理并存储。由于服务器并未原生支持 CAN 总线，故为了方便起见，使用「CAN转以太网」模块作为 CAN 协议和 TCP 协议交换的中介，以谋求实现的简单化。项目总体架构图如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-e9dce2216d4609a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目总体架构图"></p>
<blockquote>
<p>CAN - bus，即控制器局域网，是国际上应用最广泛的现场总线之一。</p>
<p>作为一种技术先进、可靠性高、功能完善、成本合理的远程网络通信控制方式，CAN - bus 已经被广泛应用到各个自动化控制系统中。从高速的网络到低价位的多路接线都可以使用 CAN - bus。例如，在汽车电子、自动控制、智能大厦、电路系统、安防监控等领域。</p>
</blockquote>
<h1 id="1-Netty-框架的学习"><a href="#1-Netty-框架的学习" class="headerlink" title="1. Netty 框架的学习"></a>1. Netty 框架的学习</h1><p>以下提供几篇不错的文章，帮助大家学习 Netty 这一颇受瞩目的框架。</p>
<ol>
<li><a href="http://ifeve.com/netty-in-action/" target="_blank" rel="external">《Netty in Action》中文版 - 并发编程网</a></li>
<li><a href="https://waylau.com/essential-netty-in-action/" target="_blank" rel="external">Essential Netty in Action -《Netty 实战(精髓)》</a></li>
<li><a href="https://waylau.gitbooks.io/netty-4-user-guide/" target="_blank" rel="external">Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》</a></li>
</ol>
<h1 id="2-Bootstrapping-服务器方案"><a href="#2-Bootstrapping-服务器方案" class="headerlink" title="2. Bootstrapping 服务器方案"></a>2. Bootstrapping 服务器方案</h1><p>以下代码是 Bootstrapping 服务器的实现方案：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KyServer</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> SuccessfulListener launchListener;</div><div class="line">  <span class="keyword">private</span> SuccessfulListener finishListener;</div><div class="line">  <span class="keyword">private</span> NioEventLoopGroup group;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">      group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">      ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">      bootstrap.group(group)</div><div class="line">          .channel(NioServerSocketChannel.class)</div><div class="line">          .childHandler(<span class="keyword">new</span> ServerChannelInitializerTest());</div><div class="line">      ChannelFuture channelFuture = bootstrap.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">30232</span>));</div><div class="line">      channelFuture.addListener(</div><div class="line">          (ChannelFutureListener) future -&gt; startListenerHandle(future, launchListener));</div><div class="line">    &#125;).start();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startListenerHandle</span><span class="params">(Future future, SuccessfulListener listener)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!future.isSuccess()) future.cause().printStackTrace();</div><div class="line">    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) listener.onSuccess(future.isSuccess());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLaunchSuccessfulListener</span><span class="params">(</span></span></div><div class="line">      SuccessfulListener successfulListener) &#123;</div><div class="line">    <span class="keyword">this</span>.launchListener = successfulListener;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinishSuccessfulListener</span><span class="params">(</span></span></div><div class="line">      SuccessfulListener finishListener) &#123;</div><div class="line">    <span class="keyword">this</span>.finishListener = finishListener;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (group != <span class="keyword">null</span>) &#123;</div><div class="line">      Future&lt;?&gt; futureShutdown = group.shutdownGracefully();</div><div class="line">      futureShutdown.addListener(future -&gt; startListenerHandle(future, finishListener));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-1-Bootstrapping-服务器的设计要点"><a href="#2-1-Bootstrapping-服务器的设计要点" class="headerlink" title="2.1 Bootstrapping 服务器的设计要点"></a>2.1 Bootstrapping 服务器的设计要点</h2><ul>
<li>创建一个 ServerBootstrap 实例来启动和绑定服务器</li>
<li>创建并且分配一个 NioEventLoopgroup 实例来处理 event，比如接受新的连接和读/写数据</li>
<li>指定本地 InetSocketAddress 到服务器绑定的端口</li>
<li>用 ChannelHandler 实例来初始化 Channel</li>
<li>调用 ServerBootstrap.bind() 来绑定服务器</li>
</ul>
<h2 id="2-2-服务器监听器的设计「观察者模式」"><a href="#2-2-服务器监听器的设计「观察者模式」" class="headerlink" title="2.2 服务器监听器的设计「观察者模式」"></a>2.2 服务器监听器的设计「观察者模式」</h2><p>首先在该类中设置成员变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">private SuccessfulListener launchListener;</div><div class="line">private SuccessfulListener finishListener;</div></pre></td></tr></table></figure></p>
<p>而后添加该变量的 <code>set</code> 方法，以及监听器的处理方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private void startListenerHandle(Future future, SuccessfulListener listener) &#123;</div><div class="line">    if (!future.isSuccess()) future.cause().printStackTrace();</div><div class="line">    if (listener != null) listener.onSuccess(future.isSuccess());</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void setLaunchSuccessfulListener(SuccessfulListener successfulListener) &#123;</div><div class="line">    this.launchListener = successfulListener;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void setFinishSuccessfulListener(SuccessfulListener finishListener) &#123;</div><div class="line">    this.finishListener = finishListener;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在服务器启动监听时，执行如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ChannelFuture channelFuture = bootstrap.bind(new InetSocketAddress(30232));</div><div class="line">channelFuture.addListener(future -&gt; startListenerHandle(future, launchListener));</div></pre></td></tr></table></figure></p>
<p>在外部关闭服务器时，执行该方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public void shutdown() &#123;</div><div class="line">    if (group != null) &#123;</div><div class="line">        Future&lt;?&gt; futureShutdown = group.shutdownGracefully();</div><div class="line">        futureShutdown.addListener(future -&gt; startListenerHandle(future, finishListener));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过如上方法，外部操作者可以方便得知服务器是否启动成功以及是否结束成功，使用观察者模式，完美实现了对服务器启动及关闭的监听。</p>
<h1 id="3-服务器业务逻辑的实现"><a href="#3-服务器业务逻辑的实现" class="headerlink" title="3. 服务器业务逻辑的实现"></a>3. 服务器业务逻辑的实现</h1><p>首先使用初始化方法 <code>ServerChannelInitializer</code> 完成所有 <code>ChannelHandler</code> 对 <code>Channel</code> 的绑定操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerChannelInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">NioSocketChannel</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> </span>&#123;</div><div class="line">        ch.pipeline().addLast(<span class="keyword">new</span> LoggingHandler(<span class="string">"NO1"</span>));</div><div class="line">        <span class="keyword">byte</span> head = <span class="number">0x11</span>;</div><div class="line">        ch.pipeline().addLast(<span class="keyword">new</span> FrameIdentifierChannelInboundHandler(head));</div><div class="line">        ch.pipeline().addLast(<span class="keyword">new</span> ShowByteBufAsFrameInBoundHandler());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-1-输入数据处理方案"><a href="#3-1-输入数据处理方案" class="headerlink" title="3.1 输入数据处理方案"></a>3.1 输入数据处理方案</h2><h3 id="3-1-1-自定义帧方案"><a href="#3-1-1-自定义帧方案" class="headerlink" title="3.1.1 自定义帧方案"></a>3.1.1 自定义帧方案</h3><p>自定义帧包括「帧标识位」、「数据长度」、「数据体」，如下图所示，：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-1e3784eb89e41957.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自定义帧示意图"></p>
<ul>
<li>帧标识位：0x11。</li>
<li>数据长度：两个字节，可表示数据部分大小最大为 2 ^ 16 - 1 。</li>
<li>数据体：实际有用的数据。</li>
</ul>
<h3 id="3-1-2-输入数据处理器"><a href="#3-1-2-输入数据处理器" class="headerlink" title="3.1.2 输入数据处理器"></a>3.1.2 输入数据处理器</h3><p>以下为输入数据的第一个处理器，可以保证无论 TCP 帧经历怎样的粘包、拆包，均可以准确提取每一个自定义帧的数据部分。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 入端自定义帧提取处理器</div><div class="line"> * 将数据流提取出完整的自定义帧并传入下一个处理器</div><div class="line"> */</div><div class="line">public class FrameIdentifierChannelInboundHandler extends SimpleChannelInboundHandler&lt;ByteBuf&gt; &#123;</div><div class="line">  private byte[] frameHead;</div><div class="line">  private int frameHeadLength;</div><div class="line">  private int frameBodyLength;</div><div class="line">  private FrameReceivedEnum frameStatus = FrameReceivedEnum.READY;</div><div class="line">  private ByteBuf holdByteBuf = Unpooled.buffer(1024);</div><div class="line"></div><div class="line">  FrameIdentifierChannelInboundHandler(byte... frameHead) &#123;</div><div class="line">    this();</div><div class="line">    this.frameHead = frameHead;</div><div class="line">    frameHeadLength = frameHead.length;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void channelRead0 (ChannelHandlerContext ctx, ByteBuf msg) &#123;</div><div class="line">    //数据读入本地buffer</div><div class="line">    holdByteBuf.writeBytes(msg);</div><div class="line">    while (true) &#123;</div><div class="line">      //若读取状态为: 开始读取</div><div class="line">      if (frameStatus == FrameReceivedEnum.READY) &#123;</div><div class="line">        if (!matchFrameHead(holdByteBuf)) &#123;</div><div class="line">          holdByteBuf.clear();</div><div class="line">          break;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      //若读取状态为: 帧长读取</div><div class="line">      //数据体完全包含在 buffer 内，则可通过此状态</div><div class="line">      if (frameStatus == FrameReceivedEnum.READING_LENGTH) &#123;</div><div class="line">        if (holdByteBuf.readableBytes() &lt;= 1) break;</div><div class="line">        //无符号 short 需要用 int 型引用</div><div class="line">        int currentFrameLength = holdByteBuf.getUnsignedShort(holdByteBuf.readerIndex());</div><div class="line"></div><div class="line">        //可读byte数为长度计数(2)+数据体长度; 所以当前帧长+2 &lt;= 可读帧长</div><div class="line">        if (currentFrameLength + 2 &lt;= holdByteBuf.readableBytes()) &#123;</div><div class="line">          frameBodyLength = holdByteBuf.readUnsignedShort();</div><div class="line">          frameStatus = FrameReceivedEnum.READING_BODY;</div><div class="line">        &#125; else &#123;</div><div class="line">          break;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      //若读取状态为: 数据体读取</div><div class="line">      //预设数据体完全包含在buffer内，否则抛出异常</div><div class="line">      if (frameStatus == FrameReceivedEnum.READING_BODY) &#123;</div><div class="line">        if (frameBodyLength == 0) &#123;</div><div class="line">          frameStatus = FrameReceivedEnum.READY;</div><div class="line">          frameBodyLength = -1;</div><div class="line">          holdByteBuf.discardReadBytes();</div><div class="line">        &#125; else if (frameBodyLength &gt; 0) &#123;</div><div class="line">          ByteBuf returnBuf = Unpooled.buffer(frameBodyLength);</div><div class="line">          holdByteBuf.readBytes(returnBuf);</div><div class="line">          frameStatus = FrameReceivedEnum.READY;</div><div class="line">          //    ctx.fireChannelRead(returnBuf);</div><div class="line">          ctx.writeAndFlush(returnBuf);</div><div class="line">          frameBodyLength = -1;</div><div class="line">          holdByteBuf.discardReadBytes();</div><div class="line">        &#125; else &#123;</div><div class="line">          throw new FrameLoadException(&quot;自定义帧长度计数异常&quot;);</div><div class="line">        &#125;</div><div class="line">      &#125; else &#123;</div><div class="line">        throw new FrameLoadException(&quot;自定义帧读取异常&quot;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private boolean matchFrameHead(ByteBuf byteBuf) &#123;</div><div class="line">    while (true) &#123;</div><div class="line">      if (byteBuf.readableBytes() &lt; frameHeadLength) &#123;</div><div class="line">        return false;</div><div class="line">      &#125;</div><div class="line">      if (frameHead[0] == byteBuf.readByte()) &#123;</div><div class="line">        frameStatus = FrameReceivedEnum.READING_LENGTH;</div><div class="line">        return true;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下为第二个输入数据处理器，可将前一处理器的结果「优雅」打印到控制台上并原样发送至客户端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class ShowByteBufAsFrameInBoundHandler extends SimpleChannelInboundHandler&lt;ByteBuf&gt; &#123;</div><div class="line">  </div><div class="line">    @Override</div><div class="line">    protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) &#123;</div><div class="line">        System.out.println(ByteBufUtil.prettyHexDump(byteBuf));</div><div class="line">        ctx.pipeline().writeAndFlush(Unpooled.copiedBuffer(msg));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h1><ol>
<li><a href="http://www.gzenpu.com/CANToTcp.html" target="_blank" rel="external">CAN 转以太网设备介绍</a></li>
<li><a href="http://baike.baidu.com/item/netty" target="_blank" rel="external">Netty - 百度百科</a></li>
<li><a href="http://ifeve.com/netty-in-action/" target="_blank" rel="external">《Netty in Action》中文版 - 并发编程网</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文采用 Netty 这一最流行的 Java NIO 框架，作为 Java 服务器通信部分的基础框架，探索使用一个通道、一台服务器对多个客户端提供服务。&lt;/p&gt;
&lt;p&gt;完成客户端 - 服务器通信，需要基于 TCP 协议之上，自定义一套简单的通信协议，其中数据交换方式需要使用自定义帧。为实现以上方案，本文采用 Netty 框架实现 Java 服务器的通信部分。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Netty" scheme="http://bitky.cc/tags/Netty/"/>
    
      <category term="TCP" scheme="http://bitky.cc/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>为你的简书和 GitHub 设定个性域名</title>
    <link href="http://bitky.cc/2017/03/26/website/"/>
    <id>http://bitky.cc/2017/03/26/website/</id>
    <published>2017-03-26T04:57:47.000Z</published>
    <updated>2017-07-21T07:39:32.285Z</updated>
    
    <content type="html"><![CDATA[<p>为你的简书和 GitHub 设定个性的二级域名。</p>
<a id="more"></a>
<p>首先对比技术类博客网站：</p>
<ul>
<li><p>CSDN 的写作体验很好，但是发布的文章呈现效果很差，但是有个优点：用户名作为 CSDN 的子目录，即变相实现个性域名，比如我的CSDN域名是：<a href="http://blog.csdn.net/llmmll08" target="_blank" rel="external">http://blog.csdn.net/llmmll08</a></p>
</li>
<li><p>简书的写作体验不错，发布后的效果很好，但是个人主页地址链接很长且不规则，比如我的主页地址为：<a href="http://www.jianshu.com/u/bd2e386a6ea8" target="_blank" rel="external">http://www.jianshu.com/u/bd2e386a6ea8</a></p>
</li>
</ul>
<p>经过一番设置后，我的网络联系地址集合如下：</p>
<table>
<thead>
<tr>
<th>网站</th>
<th>个性域名</th>
<th>原域名</th>
</tr>
</thead>
<tbody>
<tr>
<td>GitHub</td>
<td><a href="http://github.bitky.cc" target="_blank" rel="external">http://github.bitky.cc</a></td>
<td><a href="https://github.com/bitkylin" target="_blank" rel="external">https://github.com/bitkylin</a></td>
</tr>
<tr>
<td>简书</td>
<td><a href="http://js.bitky.cc" target="_blank" rel="external">http://js.bitky.cc</a></td>
<td><a href="http://www.jianshu.com/u/bd2e386a6ea8" target="_blank" rel="external">http://www.jianshu.com/u/bd2e386a6ea8</a></td>
</tr>
<tr>
<td>CSDN</td>
<td><a href="http://csdn.bitky.cc" target="_blank" rel="external">http://csdn.bitky.cc</a></td>
<td><a href="http://blog.csdn.net/llmmll08" target="_blank" rel="external">http://blog.csdn.net/llmmll08</a></td>
</tr>
</tbody>
</table>
<p>我在万网注册了一个域名，以上二级域名均挂靠在该域名下，通过二级域名的形式整合所有我的网络联系地址。</p>
<p>首先感谢这篇文章提供的思路<a href="http://www.jianshu.com/p/42a1ebd417d4" target="_blank" rel="external">「为你的简书添加个性域名」</a>。下文总结个性二级域名重定向的配置方式，对各个网站的个人主页设置个性域名的方式有如下几种。</p>
<h1 id="1-使用万网设置二级域名"><a href="#1-使用万网设置二级域名" class="headerlink" title="1. 使用万网设置二级域名"></a>1. 使用万网设置二级域名</h1><p>打开<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">「万网」</a>并登录，依次选择：控制台 -&gt; 域名与网站「万网」 -&gt; 域名</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-6102ad7f7a2b1c9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名列表页面"></p>
<p>点击需要配置的域名，设置域名解析，将记录类型设置为「显性URL」或「隐性URL」。</p>
<blockquote>
<p><strong>显性URL</strong><br>将域名指向一个http「s」协议地址，访问域名时，自动跳转至目标地址「例如：将 www.net.cn 显性转发到 www.hichina.com 后，访问 www.net.cn 时，地址栏显示的地址为：www.hichina.com」。</p>
<p><strong>隐性URL</strong><br>与显性URL类似，但隐性转发会隐藏真实的目标地址「例如：将 www.net.cn 隐性转发到 www.hichina.com 后，访问 www.net.cn 时，地址栏显示的地址仍然为：www.net.cn」。</p>
</blockquote>
<p>如下图所示进行设置：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-6daa3c5ee2f256eb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对我的 CSDN 主页设置显性 URL"></p>
<p>此时访问 <a href="http://csdn.bitky.cc" target="_blank" rel="external">http://csdn.bitky.cc</a> 时，会自动显性重定向至 <a href="http://blog.csdn.net/llmmll08" target="_blank" rel="external">http://blog.csdn.net/llmmll08</a></p>
<p>只有当欲跳转网页的主域名在万网托管，并且有备案时，该方法才能使用，不然进行配置时，会有如下错误提示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-f07fe23dbd99d9e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在万网未查询到 GitHub 的备案号"></p>
<h1 id="2-使用-CNAME-记录设置二级域名"><a href="#2-使用-CNAME-记录设置二级域名" class="headerlink" title="2. 使用 CNAME 记录设置二级域名"></a>2. 使用 CNAME 记录设置二级域名</h1><blockquote>
<p><strong>CNAME 记录</strong><br>如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加 CNAME 记录。</p>
</blockquote>
<p><a href="https://github.com/bitkylin" target="_blank" rel="external"> GitHub </a>和<a href="https://coding.net/u/bitky" target="_blank" rel="external"> 码云 </a>均提供免费的静态网页托管服务，由于码云是国内网站，访问速度会快一些，稳定一些。</p>
<p>打开码云，新建项目，在项目的主页面点击「新建文件」</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-725b6f3438c78fa8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="「码云」项目主页面"></p>
<p>设置新建的文件，文件名为「index.html」，内容为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        window.location.href="https://github.com/bitkylin";</div><div class="line">        //location.replace("https://github.com/bitkylin") 「可使用本行代码替换掉上一行代码，且实现效果一致」</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后进行提交，之后切换到「Pages 服务」页面，进行如下操作</p>
<ol>
<li>「部署来源」选择「master 分支」，点击保存。</li>
<li>自定义域名设置为自己域名的二级域名，点击绑定。</li>
<li>弹出对话框，提示设置域名解析的 CNAME 记录，在万网域名解析页面，照下图设置完成 CNAME 记录的设置，然后点击对话框的「确定」按钮。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-4ded4bd42f052b68.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" CNAME 记录设置"></p>
<p>具体设置情况如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-e7f87fd4953930e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="码云的「Coding Pages 服务」配置页面"></p>
<p>之后，即可使用自定义的个性二级域名访问自己的个人主页了。</p>
<h1 id="3-参考链接"><a href="#3-参考链接" class="headerlink" title="3. 参考链接"></a>3. 参考链接</h1><ol>
<li><a href="http://www.oschina.net/news/73980/gitosc-pages" target="_blank" rel="external">码云正式支持 Pages 功能「开源中国社区」</a></li>
<li><a href="http://news.yesky.com/news/168/102328168.shtml" target="_blank" rel="external">开源中国「码云」，岂止于中国版 GitHub !</a></li>
<li><a href="http://www.jianshu.com/p/42a1ebd417d4" target="_blank" rel="external">为你的简书添加个性域名</a></li>
<li><a href="http://blog.csdn.net/kongjing0815/article/details/5808063" target="_blank" rel="external">Js页面跳转整理</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为你的简书和 GitHub 设定个性的二级域名。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="二级域名" scheme="http://bitky.cc/tags/%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/"/>
    
      <category term="CNAME" scheme="http://bitky.cc/tags/CNAME/"/>
    
      <category term="GitHub" scheme="http://bitky.cc/tags/GitHub/"/>
    
      <category term="码云" scheme="http://bitky.cc/tags/%E7%A0%81%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>使用 Maven 构建 Java 项目</title>
    <link href="http://bitky.cc/2017/03/23/maven/"/>
    <id>http://bitky.cc/2017/03/23/maven/</id>
    <published>2017-03-23T04:57:47.000Z</published>
    <updated>2017-04-09T06:46:59.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Maven 是基于项目对象模型「POM」，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。本文总结了 Maven 的基本用法。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-Maven-基本配置"><a href="#1-Maven-基本配置" class="headerlink" title="1. Maven 基本配置"></a>1. Maven 基本配置</h1><h2 id="1-1-环境变量"><a href="#1-1-环境变量" class="headerlink" title="1.1 环境变量"></a>1.1 环境变量</h2><p>环境变量中添加「M2_HOME」为 maven 主目录</p>
<p>在 path 中添加「;%M2_HOME%\bin」</p>
<h2 id="1-2-使用-Maven-阿里云中央仓库"><a href="#1-2-使用-Maven-阿里云中央仓库" class="headerlink" title="1.2 使用 Maven 阿里云中央仓库"></a>1.2 使用 Maven 阿里云中央仓库</h2><p>修改 Maven 根目录下 conf 文件夹中的 <code>setting.xml</code> 文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="2-创建基于-Maven-的-Java-项目"><a href="#2-创建基于-Maven-的-Java-项目" class="headerlink" title="2. 创建基于 Maven 的 Java 项目"></a>2. 创建基于 Maven 的 Java 项目</h1><h2 id="2-1-使用命令行创建"><a href="#2-1-使用命令行创建" class="headerlink" title="2.1 使用命令行创建"></a>2.1 使用命令行创建</h2><p>Maven 使用原型「archetype」插件创建工程。要创建一个简单的 Java 应用，我们将使用 maven-archetype-quickstart 插件。</p>
<p>Maven 创建目录有两种方式：「archetype 可自动创建目录骨架」</p>
<ul>
<li>在 cmd 中直接执行「mvn archetype:generate」按照提示进行选择，选择如下 Archetype：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">943: remote -&gt; org.apache.maven.archetypes:maven-archetype-quickstart (An archetype which contains a sample Maven project.)</div></pre></td></tr></table></figure>
<ul>
<li>使用单行命令创建项目，命令格式如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate </div><div class="line"> -DgourpId = 组织名，公司网址的反写 + 项目名称</div><div class="line"> -DartifactId=项目名-模块名</div><div class="line"> -Dversion=版本号</div><div class="line"> -Dpackage=代码所在的包名</div></pre></td></tr></table></figure>
<p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate</div><div class="line"> -DgroupId=cc.bitky.demo</div><div class="line"> -DartifactId=demo-module</div><div class="line"> -Dversion=1.0.0-SNAPSHOT</div><div class="line"> -Dpackage=cc.bitky.demo.module</div><div class="line">``` </div><div class="line"></div><div class="line">## 2.2 使用InteliJ IDEA 创建</div><div class="line"></div><div class="line">- 在 InteliJ IDEA 中创建基础的示例 Maven 项目，依旧选择：</div></pre></td></tr></table></figure></p>
<p>org.apache.maven.archetypes:maven-archetype-quickstart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如图所示：</div><div class="line"></div><div class="line">![Maven Quickstart Archetype](http://upload-images.jianshu.io/upload_images/1555570-b5982c9937203085.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line"># 3. 目录结构</div><div class="line"></div><div class="line">## 3.1 Maven 项目的目录结构</div><div class="line"></div><div class="line">在 Maven 项目的根目录下，有如下必要的目录结构:</div><div class="line"></div><div class="line">&gt; - src</div><div class="line">&gt;   - main</div><div class="line">&gt;     - resources「存放一些资源文件」</div><div class="line">&gt;     - java</div><div class="line">&gt;       - package「自定义的包」</div><div class="line">&gt;   - test</div><div class="line">&gt;     - resources「存放一些资源文件」</div><div class="line">&gt;     - java</div><div class="line">&gt;       - package</div><div class="line">&gt; - pom.xml</div><div class="line"></div><div class="line">如下图所示：</div><div class="line"></div><div class="line">![Maven 项目的目录结构](http://upload-images.jianshu.io/upload_images/1555570-9f3d8f475ab10f2d.jpg)</div><div class="line"></div><div class="line">## 3.2 项目根目录下「pom.xml」的典型结构：</div><div class="line"></div><div class="line">``` xml</div><div class="line">&lt;project </div><div class="line">  xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; </div><div class="line">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;!--&gt;maven版本&lt;/--&gt;</div><div class="line">  &lt;groupId&gt;cc.bitky.demo&lt;/groupId&gt;       &lt;!--&gt;项目的包名&lt;/--&gt;</div><div class="line">  &lt;artifactId&gt;demo-module&lt;/artifactId&gt;   &lt;!--&gt;模块名&lt;/--&gt;</div><div class="line">  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;      &lt;!--&gt;版本&lt;/--&gt;</div><div class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line">  &lt;name&gt;demo-module&lt;/name&gt;</div><div class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line">  &lt;properties&gt;</div><div class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">  &lt;/properties&gt;</div><div class="line">  &lt;!-- 依赖项 --&gt;</div><div class="line">  &lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</div><div class="line">      &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">      &lt;!-- 排除依赖传递列表 --&gt;</div><div class="line">      &lt;exclusions&gt;</div><div class="line">        &lt;exclusion&gt;&lt;/exclusion&gt;</div><div class="line">      &lt;/exclusions&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">  &lt;/dependencies&gt;</div><div class="line">  &lt;!-- 依赖的管理，一般定义在父模块中，由子模块去继承 --&gt;</div><div class="line">  &lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">      &lt;dependency&gt;&lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">  &lt;/dependencyManagement&gt;</div><div class="line">  &lt;!-- 对构建行为提供相应的支持 --&gt;</div><div class="line">  &lt;build&gt;</div><div class="line">    &lt;!-- 插件列表 --&gt;</div><div class="line">    &lt;plugins&gt;</div><div class="line">      &lt;plugin&gt;</div><div class="line">        &lt;!-- 指定坐标 --&gt;</div><div class="line">        &lt;groupId&gt;&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;&lt;/version&gt;</div><div class="line">      &lt;/plugin&gt;</div><div class="line">    &lt;/plugins&gt;</div><div class="line">  &lt;/build&gt;</div><div class="line">  &lt;!-- 一般在子模块中指定所继承的父模块 --&gt;</div><div class="line">  &lt;parent&gt;&lt;/parent&gt;</div><div class="line">  &lt;!-- 模块列表 --&gt;</div><div class="line">  &lt;modules&gt;</div><div class="line">    &lt;module&gt;&lt;/module&gt;</div><div class="line">  &lt;/modules&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<h1 id="4-Maven-操作"><a href="#4-Maven-操作" class="headerlink" title="4. Maven 操作"></a>4. Maven 操作</h1><h2 id="4-1-构建命令"><a href="#4-1-构建命令" class="headerlink" title="4.1 构建命令"></a>4.1 构建命令</h2><ul>
<li>mvn -v 版本。</li>
<li>mvn compile 编译。</li>
<li>mvn test 测试。</li>
<li>mvn package 打包。</li>
<li>mvn clean 清除maven生成的target目录。</li>
<li>mvn install 将生成的jar安装到本地仓库中。</li>
</ul>
<blockquote>
<ul>
<li>mvn compile: 编译主程序源代码，不会编译test目录的源代码。第一次运行时，会下载相关的依赖包，可能会比较费时</li>
<li>mvn test: 运行应用程序中的单元测试，会生成 target 文件夹：<ul>
<li>主程序编译的字节码文件在 classes 下面</li>
<li>测试程序放在 test-classes 下</li>
<li>所生成的测试报告放在 surefire-reports 文件夹下</li>
</ul>
</li>
<li>mvn package 会在target目录下生成 Jar 包，如「maven01-model-0.0.1SNAPSHPT.jar」</li>
</ul>
</blockquote>
<h2 id="4-2-生命周期"><a href="#4-2-生命周期" class="headerlink" title="4.2 生命周期"></a>4.2 生命周期</h2><p>Maven的生命周期大概如下，这几个命令对应了一个项目的完整的构建过程，这几个步骤对应的都有插件来完成：</p>
<ul>
<li>clean 「清理」</li>
<li>compile 「编译」</li>
<li>test 「测试」</li>
<li>package 「打包」</li>
<li>install「安装到本地库」</li>
</ul>
<p>Maven的生命周期分为三个独立的生命周期（每一个生命周期有分为若干个阶段，其中defaul是最核心的一个）：</p>
<ol>
<li>clean「清理项目」</li>
<li>default「构建项目」</li>
<li>site「生成项目的站点」</li>
</ol>
<h3 id="4-2-1-clean「清理项目」"><a href="#4-2-1-clean「清理项目」" class="headerlink" title="4.2.1 clean「清理项目」"></a>4.2.1 clean「清理项目」</h3><ul>
<li>pre-clean 「执行清理前的工作」</li>
<li>clean「清理上一次构建生成的所有文件」</li>
<li>post-clean「执行清理后的文件」</li>
</ul>
<h3 id="4-2-2-default「构建项目」（最核心）"><a href="#4-2-2-default「构建项目」（最核心）" class="headerlink" title="4.2.2 default「构建项目」（最核心）"></a>4.2.2 default「构建项目」（最核心）</h3><ul>
<li>compile 「编译」</li>
<li>test 「测试」</li>
<li>package 「打包」</li>
<li>install「安装到本地库」</li>
</ul>
<h3 id="4-2-3-site「生成项目站点」"><a href="#4-2-3-site「生成项目站点」" class="headerlink" title="4.2.3 site「生成项目站点」"></a>4.2.3 site「生成项目站点」</h3><ul>
<li>pre-site「在生成项目站点之前要完成的工作」</li>
<li>site「生成项目的站点文档」</li>
<li>post-site「在生成项目站点后要完成的工作」</li>
<li>site-deploy「发布生成的站点到服务器上」</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>每个独立的生命周期，只需执行其中一个命令，此时会从该生命周期的开始命令顺序执行到该命令。</li>
<li>Maven的生命周期对应的命令是顺序执行的，如果没有人为的顺序的一个个执行，那么Maven会默认的自动运行。</li>
<li>如执行「mvn clean test」,则此时会顺序执行「pre-clean clean post-clean compile test」</li>
<li>如执行「mvn test」,则此时会顺序执行「compile test」</li>
</ul>
<h1 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h1><ol>
<li><a href="http://wiki.jikexueyuan.com/project/maven/" target="_blank" rel="external">Maven 教程 - 「极客学院 Wiki」</a></li>
<li><a href="http://www.imooc.com/learn/443" target="_blank" rel="external">项目管理利器 — maven「慕课网」</a></li>
</ol>
<blockquote>
<p><strong>「镜像博客」</strong><a href="http://blog.csdn.net/llmmll08/article/details/64450713" target="_blank" rel="external">CSDN </a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Maven 是基于项目对象模型「POM」，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。本文总结了 Maven 的基本用法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Maven" scheme="http://bitky.cc/tags/Maven/"/>
    
      <category term="InteliJ IDEA" scheme="http://bitky.cc/tags/InteliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>关于 OkHttp 依赖冲突问题的解决过程</title>
    <link href="http://bitky.cc/2016/11/18/okhttp/"/>
    <id>http://bitky.cc/2016/11/18/okhttp/</id>
    <published>2016-11-18T04:57:47.000Z</published>
    <updated>2017-04-11T04:28:19.922Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp 是一个流行的开源网络请求库。许多第三方库的底层都是使用 OkHttp 实现网络请求，所以 OkHttp 相关的依赖冲突问题就变得很难避免，下文是我所遇到的一次关于 OkHttp 的依赖冲突问题，通过对 Gradle 工具及 Android Studio 的灵活使用，解决了此问题。</p>
<a id="more"></a>
<h1 id="1-关于-OkHttp-的依赖冲突"><a href="#1-关于-OkHttp-的依赖冲突" class="headerlink" title="1. 关于 OkHttp 的依赖冲突"></a>1. 关于 OkHttp 的依赖冲突</h1><p>我的项目中， build.gradle 文件中设置的主要依赖：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.0.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'cn.bmob.android:bmob-sdk:3.5.2'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.squareup.okhttp3:okhttp:3.4.2'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:imagepipeline-okhttp3:0.12.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:fresco:0.12.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在写该 App 的过程中，出现了较为诡异的情况：</p>
<ul>
<li>使用 Run ‘app’ 命令可以在 Android 6.0「API 23」环境中成功运行 App</li>
<li>使用 Run ‘app’ 命令针对 Android 4.4「API 19」环境的虚拟机，进行 Gradle 构建时报错</li>
<li>使用「Generate Signed APK」，在进行 Gradle 构建时报错</li>
<li>在 cmd 或 Windows PowerShell 中执行如下 Gradle 指令：</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gradle clean</div><div class="line">gradle build</div></pre></td></tr></table></figure>
<p>报错，所报错误分别如下 :</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Error:Error converting bytecode to dex:</div><div class="line">Cause: com.android.dex.DexException: Multiple dex files define Lokhttp3/Address;</div><div class="line"></div><div class="line">Error:Execution failed for task ':app:transformClassesWithDexForDebug'.</div><div class="line">&gt; com.android.build.api.transform.TransformException: com.android.ide.common.process.ProcessException: java.util.concurrent.ExecutionException: java.lang.UnsupportedOperationException</div></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">:app:transformClassesWithDexForDebug FAILED</div><div class="line"></div><div class="line">FAILURE: Build failed with an exception.</div><div class="line"></div><div class="line">* What went wrong:</div><div class="line">Execution failed <span class="keyword">for</span> <span class="keyword">task</span> <span class="string">':app:transformClassesWithDexForDebug'</span>.</div><div class="line">&gt; com.android.build.api.transform.TransformException: com.android.ide.common.process.ProcessException: java.util.concurrent.ExecutionException: java.lang.Unsu</div><div class="line">pportedOperationException</div><div class="line"></div><div class="line">* <span class="keyword">Try</span>:</div><div class="line">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class="line"></div><div class="line">BUILD FAILED</div></pre></td></tr></table></figure>
<p>通过打印的异常信息，可以确定问题是在于 OkHttp 的依赖冲突。</p>
<h1 id="2-依赖冲突问题的探究"><a href="#2-依赖冲突问题的探究" class="headerlink" title="2. 依赖冲突问题的探究"></a>2. 依赖冲突问题的探究</h1><h2 id="2-1-使用-Gradle-工具对依赖冲突进行探究"><a href="#2-1-使用-Gradle-工具对依赖冲突进行探究" class="headerlink" title="2.1 使用 Gradle 工具对依赖冲突进行探究"></a>2.1 使用 Gradle 工具对依赖冲突进行探究</h2><blockquote>
<p>Gradle 相关简介：</p>
<p>「一」Gradle位置：</p>
<ol>
<li><p>C:\Users\&lt; 用户名 &gt;.gradle\wrapper\dists\gradle- &lt; 版本号 &gt; -all\&lt;一串识别码&gt;\gradle- &lt; 版本号 &gt; </p>
</li>
<li><p>&lt; Android Studio 目录 &gt; \gradle\gradle- &lt; 版本号 &gt; </p>
</li>
</ol>
<p>「二」Gradle 环境变量配置：</p>
<ol>
<li><p>在环境变量里添加用户变量： GRADLE_HOME</p>
</li>
<li><p>在环境变量 path 中增加： %GRADLE_HOME%\bin;</p>
</li>
</ol>
</blockquote>
<p>此时，我直接使用 Gradle 工具检查此项目的依赖，进入项目目录，执行如下指令进行依赖检查：</p>
<pre><code>cd app
gradle dependencies
</code></pre><p>打印出如下图所示的依赖树，依赖树显示了你 build 脚本声明的顶级依赖和它们的传递依赖：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-30008a09d24fac58.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依赖树"></p>
<p>箭头所指的地方为与 OkHttp 相关的库，从依赖树可知，我自行引入的 OkHttp 库替换掉了 Fresco 中的低版本库，但仍旧提示依赖冲突。</p>
<p>经过多次尝试，发现只有同时去掉这两个对 OkHttp 的依赖时，问题得到解决，build.gradle 文件修改如下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.0.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'cn.bmob.android:bmob-sdk:3.5.2'</span></div><div class="line">    <span class="comment">//compile 'com.squareup.okhttp3:okhttp:3.4.2'</span></div><div class="line">    <span class="keyword">compile</span>(<span class="string">'com.facebook.fresco:imagepipeline-okhttp3:0.12.0'</span>, &#123;</div><div class="line">        <span class="keyword">exclude</span> module: <span class="string">"okhttp"</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:fresco:0.12.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-2-对解决依赖冲突问题的尝试"><a href="#2-2-对解决依赖冲突问题的尝试" class="headerlink" title="2.2 对解决依赖冲突问题的尝试"></a>2.2 对解决依赖冲突问题的尝试</h2><p>这个问题很奇葩，去掉对 OkHttp 的依赖怎么可以呢？对着错误代码查遍了 Google 和 Stack Overflow，提到的解决方法有如下两条：</p>
<h3 id="2-2-1-使用-Multidex-support-library-开启-Multidex-功能"><a href="#2-2-1-使用-Multidex-support-library-开启-Multidex-功能" class="headerlink" title="2.2.1 使用 Multidex support library 开启 Multidex 功能"></a>2.2.1 使用 Multidex support library 开启 Multidex 功能</h3><p>步骤 1：更改 build.grade</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// Enabling multidex support.</span></div><div class="line">    multiDexEnabled <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile <span class="string">'com.android.support:multidex:1.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>步骤 2：设置 Application 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        MultiDex.install(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>步骤 3：更改 grade.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.gradle.jvmargs=-XX:MaxHeapSize\=2048m -Xmx2048m</div></pre></td></tr></table></figure>
<h3 id="2-2-2-通过增大可用内存解决「-app-transformClassesForDexForDebug」异常"><a href="#2-2-2-通过增大可用内存解决「-app-transformClassesForDexForDebug」异常" class="headerlink" title="2.2.2 通过增大可用内存解决「:app:transformClassesForDexForDebug」异常"></a>2.2.2 通过增大可用内存解决「:app:transformClassesForDexForDebug」异常</h3><p>在 gradle.build 中指定 javaMaxHeapSize：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    .</div><div class="line">    .</div><div class="line">    .</div><div class="line">    dexOptions &#123;</div><div class="line">        javaMaxHeapSize <span class="string">"4g"</span> <span class="comment">//specify the heap size for the dex process</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，这两种办法都无益于解决问题。</p>
<h1 id="3-追根溯源解决依赖冲突"><a href="#3-追根溯源解决依赖冲突" class="headerlink" title="3. 追根溯源解决依赖冲突"></a>3. 追根溯源解决依赖冲突</h1><h2 id="3-1-问题的精确定位"><a href="#3-1-问题的精确定位" class="headerlink" title="3.1 问题的精确定位"></a>3.1 问题的精确定位</h2><p>通过中文搜索引擎搜索之后，在一篇文章中获得了灵感：</p>
<blockquote>
<p>对于如下异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; 2.Execution failed for task &apos;:app:transformClassesWithJarMergingForDebug&apos;.</div><div class="line">&gt; </div><div class="line">&gt; com.android.build.api.transform.TransformException: </div><div class="line">&gt; java.util.zip.ZipException: duplicate</div><div class="line">&gt; entry: android/support/v4/app/BackStackState$1.class</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>原因：在所添加的 jar 包或 aar 包中也引用了 support-V4 , 与工程中引用的相冲突 </p>
<p>Ctrl+N –&gt; 在搜索框中输入 BackStackState –&gt; 查找到所有引用该类的类，这些类即为引起冲突的类 </p>
<p>去掉本工程中 gradle 中用于引用有冲突的包的代码或者将冲突的代码从 jar 包或 aar 包中移除，确保一个 module 中只引用了一份相同的第三方包</p>
</blockquote>
<p>根据这份解决思路，进行问题的最终解决。</p>
<p>首先获取如下异常的关键信息：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error:Error converting bytecode to dex:</div><div class="line">Cause: com.android.dex.DexException: Multiple dex files define Lokhttp3<span class="regexp">/Address;</span></div></pre></td></tr></table></figure>
<p>由异常信息可知，OkHttp 下的 Address 类有冲突，执行如下步骤：</p>
<ul>
<li><p>Ctrl + N </p>
</li>
<li><p>在搜索框中输入 Address </p>
</li>
<li><p>查找到所有引用该类的类</p>
</li>
</ul>
<p>搜索到的内容，如下图所示。可知，Bmob 和 OkHttp 中均有该类。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-fb9839efc1647a17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Address 类的搜索结果"></p>
<h2 id="3-2-删掉冲突的-Jar-包"><a href="#3-2-删掉冲突的-Jar-包" class="headerlink" title="3.2 删掉冲突的 Jar 包"></a>3.2 删掉冲突的 Jar 包</h2><p>将项目的显示树由 Android 切换到 Project，查看 Bmob 的 Jar 包的结构，发现其中依赖了一个 OkHttp 的 Jar 包。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-b3302c60b8b81ee3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依赖的 Jar 包查询"></p>
<p>由于使用了 Gradle 的远程依赖形式，故直接删除冲突的内容无效，须转为使用本地依赖的形式。</p>
<p>根据 Bmob 官方文档的指示，删除 Bmob 的 Maven 仓库依赖，使用本地 Jar 包形式的依赖，去除对 OkHttp 的 Jar 包的引用，即可顺利解决问题。当然也可以只使用 Bmob 的远程依赖而在 build.gradle 中去掉其他相关「如 OkHttp，Gson，RxJava 等」的依赖。</p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><p><strong>问题预备</strong></p>
<ol>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/47911083" target="_blank" rel="external">Android OkHttp 完全解析 是时候来了解 OkHttp 了</a></li>
<li><a href="http://blog.csdn.net/lw_power/article/details/51241187" target="_blank" rel="external">Gradle 实战「1」 - 配置环境变量</a></li>
<li><a href="http://www.ezlippi.com/blog/2015/05/gradle-dependency-management.html" target="_blank" rel="external">Gradle 系列教程之依赖管理</a></li>
</ol>
<p><strong>MultiDex</strong></p>
<ol>
<li><a href="http://blog.csdn.net/yzzst/article/details/48290701" target="_blank" rel="external">Android分包 MultiDex 原理详解</a></li>
<li><a href="http://stackoverflow.com/a/38473900/6711470" target="_blank" rel="external">How to enable multidexing with the new Android Multidex support library</a></li>
</ol>
<p><strong>问题解决</strong></p>
<ol>
<li><a href="http://www.cnblogs.com/royi123/p/5378056.html" target="_blank" rel="external">Android Studio 编译中的一些问题解决办法</a></li>
<li><a href="http://blog.csdn.net/cx1229/article/details/52786168" target="_blank" rel="external">Android Studio 中如何解决重复依赖导致的 app:transformClassesWithJarMergingForDebug</a></li>
<li><a href="http://docs.bmob.cn/data/Android/a_faststart/doc/index.html#SDK%E5%AF%BC%E5%85%A5" target="_blank" rel="external">Bmob的开发文档</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OkHttp 是一个流行的开源网络请求库。许多第三方库的底层都是使用 OkHttp 实现网络请求，所以 OkHttp 相关的依赖冲突问题就变得很难避免，下文是我所遇到的一次关于 OkHttp 的依赖冲突问题，通过对 Gradle 工具及 Android Studio 的灵活使用，解决了此问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Android" scheme="http://bitky.cc/tags/Android/"/>
    
      <category term="Gradle" scheme="http://bitky.cc/tags/Gradle/"/>
    
      <category term="OkHttp" scheme="http://bitky.cc/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>基于 LNMP 搭建个人网站的填坑之旅</title>
    <link href="http://bitky.cc/2016/11/16/website/"/>
    <id>http://bitky.cc/2016/11/16/website/</id>
    <published>2016-11-16T04:57:47.000Z</published>
    <updated>2017-04-09T06:41:52.159Z</updated>
    
    <content type="html"><![CDATA[<p>本文讨论使用 LNMP 安装包构建网站底层服务后，包括域名解析，MySQL 的管理等的一系列填坑历程。</p>
<a id="more"></a>
<h1 id="1-LNMP-一键安装包简介"><a href="#1-LNMP-一键安装包简介" class="headerlink" title="1. LNMP 一键安装包简介"></a>1. LNMP 一键安装包简介</h1><p>使用 LNMP 一键安装包可以方便的配置好服务器的底层环境 , LNMP 一键安装包的官方介绍如下：</p>
<blockquote>
<p>LNMP 一键安装包是一个用 Linux Shell 编写的可以为 CentOS / RadHat / Fedora、Debian / Ubuntu / Raspbian / Deepin 等 VPS 或独立主机安装 LNMP「Nginx / MySQL / PHP」、LNMPA 「Nginx / MySQL / PHP / Apache」、LAMP「Apache / MySQL / PHP」生产环境的 Shell 程序。同时提供一些实用的辅助工具如：虚拟主机管理、FTP 用户管理、Nginx、MySQL / MariaDB、PHP 的升级、常用缓存组件 Redis、Xcache 等的安装、重置 MySQL root 密码、502 自动重启、日志切割、SSH 防护 DenyHosts / Fail2Ban、备份等许多实用脚本。</p>
</blockquote>
<p>LNMP 一键安装包的官网如下：</p>
<blockquote>
<p><a href="https://lnmp.org/" target="_blank" rel="external">https://lnmp.org/</a></p>
</blockquote>
<p>在官网上通过官方教程即可方便的在 VPS 中配置好网站的底层环境，此处不再赘述。</p>
<h1 id="2-域名解析问题相关"><a href="#2-域名解析问题相关" class="headerlink" title="2. 域名解析问题相关"></a>2. 域名解析问题相关</h1><p>首先将本人的网站信息公布如下：</p>
<ul>
<li>域名：<a href="http://bitky.cc/">http://bitky.cc/</a></li>
<li>IP 地址：104.224.172.61</li>
<li>主机提供方：<a href="https://bandwagonhost.com" target="_blank" rel="external">搬瓦工VPS</a></li>
<li>域名托管及解析：<a href="https://www.aliyun.com/" target="_blank" rel="external">阿里云「万网」</a></li>
</ul>
<p>本文之后的内容均是基于以上信息。</p>
<h2 id="2-1-域名解析配置"><a href="#2-1-域名解析配置" class="headerlink" title="2.1 域名解析配置"></a>2.1 域名解析配置</h2><p>通过如图所示的的方式对域名解析进行配置，可以将此二级域名的三级域名定向到我的微博和博客地址。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-3043ad8aa8115463.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="万网域名解析配置"></p>
<h2 id="2-2-将二级域名及其三级域名指向同一网站目录"><a href="#2-2-将二级域名及其三级域名指向同一网站目录" class="headerlink" title="2.2 将二级域名及其三级域名指向同一网站目录"></a>2.2 将二级域名及其三级域名指向同一网站目录</h2><p>本人站点域名为 : <a href="http://bitky.cc/">http://bitky.cc/</a> 以及 <a href="http://www.bitky.cc/" target="_blank" rel="external">http://www.bitky.cc/</a> , 使用官网教程 : <a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html" target="_blank" rel="external">LNMP 添加、删除虚拟主机及伪静态使用教程</a> 进行配置后，比较吊诡的是，访问后一个域名，网页仍然为配置前的页面 : </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-db3ac8f84eb43924.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="『恭喜您，LNMP 一键安装包安装成功』页面"></p>
<p>显示「恭喜您，LNMP 一键安装包安装成功！」，并没有将后一个域名解析成功。需要重新使用上述教程再对该域名进行添加，并指向网站的目录，即可将域名解析成功，配置示例如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-3ec9d3d887c1ee86.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加虚拟主机实例"></p>
<h1 id="3-MySQL-数据库管理"><a href="#3-MySQL-数据库管理" class="headerlink" title="3. MySQL 数据库管理"></a>3. MySQL 数据库管理</h1><h2 id="3-1-使用-phpMyAdmin-管理-MySQL"><a href="#3-1-使用-phpMyAdmin-管理-MySQL" class="headerlink" title="3.1 使用 phpMyAdmin 管理 MySQL"></a>3.1 使用 phpMyAdmin 管理 MySQL</h2><p>在更改网站默认目录后，就无法通过访问域名子目录的形式打开 phpMyAdmin , 需要使用 FTP 工具或 SSH 工具访问服务器，将：</p>
<pre><code>/home/wwwroot/default
</code></pre><p>下的 phpMyAdmin 子目录整体转移到如下目录：</p>
<pre><code>/home/wwwroot/&lt;网站目录&gt;
</code></pre><p>如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-935af00b799622fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phpMyAdmin 目录展示"></p>
<p>之后就可以使用如下形式访问 phpMyAdmin：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-f5b1928dfda17e67.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phpMyAdmin 登录页面"></p>
<h2 id="3-2-使用-MySQL-管理工具打开数据库"><a href="#3-2-使用-MySQL-管理工具打开数据库" class="headerlink" title="3.2 使用 MySQL 管理工具打开数据库"></a>3.2 使用 MySQL 管理工具打开数据库</h2><p>在以上配置之后，直接使用「Navicat for MySQL」等软件连接数据库会直接提示连接失败，使用 Xshell 等 SSH 工具访问服务器，在终端中进入 MySQL，之后在 MySQL 环境中键入：</p>
<pre><code>show global variables like &apos;port&apos;
</code></pre><p>出现如图所示的结果，显示 MySQL 的端口号是默认的 3306。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-ec844f1ad0d1244c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL 默认端口号显示"></p>
<p>退回到终端，使用如下命令：</p>
<pre><code>iptables -L -n
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1555570-b652203e45dc4e7f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux 防火墙规则查询"></p>
<p>显示 3306 端口被防火墙阻断，这时使用如下命令可以开放 3306 端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//将阻断 3306 端口的第六条规则删掉</div><div class="line">iptables -D INPUT 6</div><div class="line"></div><div class="line">//添加允许 3306 端口的规则</div><div class="line">iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</div><div class="line"></div><div class="line">//查看当前的防火墙规则并显示规则的序号</div><div class="line">iptables -L -n --line-number</div></pre></td></tr></table></figure>
<p>设置结果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-10ad5f10c0debbe8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置 Linux 防火墙规则"></p>
<p>之后再用「Navicat for MySQL」连接 MySQL 即可连接成功：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-ff56710cc0d19f46.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="「Navicat for MySQL」连接测试"></p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><ol>
<li><a href="http://jingyan.baidu.com/article/3c343ff71522880d377963bb.html" target="_blank" rel="external">Linux 服务器如何删除 iptables 指定的规则？</a></li>
<li><a href="https://lnmp.org/" target="_blank" rel="external">LNMP 一键安装包</a></li>
<li><a href="https://www.aliyun.com/" target="_blank" rel="external">阿里云</a></li>
<li><a href="https://bandwagonhost.com" target="_blank" rel="external">搬瓦工 VPS</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讨论使用 LNMP 安装包构建网站底层服务后，包括域名解析，MySQL 的管理等的一系列填坑历程。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="搬瓦工 VPS" scheme="http://bitky.cc/tags/%E6%90%AC%E7%93%A6%E5%B7%A5-VPS/"/>
    
      <category term="LNMP" scheme="http://bitky.cc/tags/LNMP/"/>
    
      <category term="阿里云「万网」" scheme="http://bitky.cc/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E3%80%8C%E4%B8%87%E7%BD%91%E3%80%8D/"/>
    
  </entry>
  
  <entry>
    <title>基于 WPF 的酷炫 GUI 窗口的简易实现</title>
    <link href="http://bitky.cc/2016/11/07/wpf/"/>
    <id>http://bitky.cc/2016/11/07/wpf/</id>
    <published>2016-11-07T04:57:47.000Z</published>
    <updated>2017-04-11T04:29:13.864Z</updated>
    
    <content type="html"><![CDATA[<p>本文要实现基于 WPF 的酷炫 GUI 窗口，力图实现一个真正可用且实用的 GUI 窗口。</p>
<a id="more"></a>
<p>本文要实现的效果如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-3e12b64d19ab769a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终效果"></p>
<p>效果总结如下：</p>
<ul>
<li>无标题栏，或自定义标题栏</li>
<li>窗口的半透明效果</li>
<li>窗口可自由拖拽</li>
<li>Enter 以及 Esc 等默认按键</li>
<li>右键菜单</li>
</ul>
<h1 id="1-窗口的效果实现"><a href="#1-窗口的效果实现" class="headerlink" title="1. 窗口的效果实现"></a>1. 窗口的效果实现</h1><h2 id="1-1-窗口外观相关"><a href="#1-1-窗口外观相关" class="headerlink" title="1.1 窗口外观相关"></a>1.1 窗口外观相关</h2><p>首先新建一个窗口，更改外观，对窗口的属性进行如下设置：</p>
<ul>
<li><p>外观设置中 , 「AllowsTransparency」复选框勾选上，该窗口就可以透明化，同时「WindowStyle」会自动变更为「None」, 窗口的默认标题栏会消失，此时可以选择自定义标题栏。</p>
</li>
<li><p>窗口允许透明化后，在「Background」、「BorderBrush」等选项中，对窗体的背景及边框颜色进行设置。可以设置为纯色或各种渐变形态以及各种透明形态。</p>
</li>
<li><p>使用「BorderThickness」项设置窗体的边框宽度。</p>
</li>
<li><p>「Opacity」设置整个界面的不透明度</p>
</li>
</ul>
<p>设置界面如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-7867eb5798263f7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="窗口布局设置页面"></p>
<h2 id="1-2-窗口大小位置相关"><a href="#1-2-窗口大小位置相关" class="headerlink" title="1.2 窗口大小位置相关"></a>1.2 窗口大小位置相关</h2><p>更改窗口的位置，对如下属性进行设置：</p>
<ul>
<li>WindowStartupLocation：修改窗口打开时的位置</li>
<li>WindowState：修改窗口打开时的大小状态，可设置全屏窗口</li>
<li>Topmost：本窗口置顶</li>
<li>Width和Height：窗口打开时的尺寸</li>
<li>MinWidth和MinHeight：窗口的最小尺寸</li>
</ul>
<h1 id="2-方便对窗口操作的功能实现"><a href="#2-方便对窗口操作的功能实现" class="headerlink" title="2. 方便对窗口操作的功能实现"></a>2. 方便对窗口操作的功能实现</h1><p>为方便对窗口的操作，可进行如下设置：</p>
<ul>
<li><p>设置某个 button 的属性，设置 IsCancel 和 IsDefault 属性，可设置 Enter 和 Esc 键所触发的按钮。</p>
</li>
<li><p>设置拖动窗口的任意位置均可拖拽窗口，可设置窗口的事件调用方法，设置 MouseLeftButtonDown 事件的调用方法。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-28a615bb3f79fb77.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MouseLeftButtonDown 事件调用方法设置"></p>
<p>设置的方法如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_MouseLeftButtonDown</span>(<span class="params"><span class="keyword">object</span> sender, MouseButtonEventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">    DragMove();</div><div class="line">&#125;</div><div class="line">```	</div><div class="line"></div><div class="line">点击关闭按钮时结束整个应用程序，可设置关闭事件的回调方法，也可设置按钮点击事件的方法，如下：</div><div class="line"></div><div class="line">```<span class="function">csharp</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnExit_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</div><div class="line">&#123;</div><div class="line">    Environment.Exit(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现窗口的右键菜单及其点击事件，需要设置窗口的「ContextMenu」属性，或在 Xaml 文件中，添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Window.ContextMenu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ContextMenu</span> <span class="attr">Name</span>=<span class="string">"ChangePassword"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Header</span>=<span class="string">"修改登录密码"</span></span></div><div class="line">                  <span class="attr">Click</span>=<span class="string">"MenuItemChangePassword_Click"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Header</span>=<span class="string">"关于"</span></span></div><div class="line">                  <span class="attr">Click</span>=<span class="string">"MenuItemAbout_Click"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">ContextMenu</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Window.ContextMenu</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文要实现基于 WPF 的酷炫 GUI 窗口，力图实现一个真正可用且实用的 GUI 窗口。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://bitky.cc/categories/C/"/>
    
    
      <category term="CSharp" scheme="http://bitky.cc/tags/CSharp/"/>
    
      <category term=".NET" scheme="http://bitky.cc/tags/NET/"/>
    
      <category term="WPF" scheme="http://bitky.cc/tags/WPF/"/>
    
      <category term="GUI" scheme="http://bitky.cc/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>荣耀v8 真机调试时不显示 Logcat 日志的解决办法</title>
    <link href="http://bitky.cc/2016/11/06/logcat/"/>
    <id>http://bitky.cc/2016/11/06/logcat/</id>
    <published>2016-11-06T04:57:47.000Z</published>
    <updated>2017-04-09T06:26:55.784Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>「最新更新」</strong>我刚刚尝试使用荣耀v8进行调试，该手机已升级到最新版系统「基于 EMUI 5.0 + Android 7.0」，发现 LogCat 调试一切正常，已不存在该问题，请大家升级后重试。</p>
</blockquote>
<p>之前的真机调试时没有任何问题，最近使用荣耀v8时 , LogCat 无法输出调试日志，解决方法如下：</p>
<a id="more"></a>
<p>步骤1： 手机拨号界面，输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*#*#2846579#*#*</div></pre></td></tr></table></figure>
<p>跳转进入「后台设置」</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-8d9496c60b8f40d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="后台设置"></p>
<p>步骤2： 进入「LOG设置」, 将复选框均勾选上</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-f381dc032166008e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LOG设置"></p>
<p>步骤3： 之后 , Logcat 可被启用，不需重启手机。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;「最新更新」&lt;/strong&gt;我刚刚尝试使用荣耀v8进行调试，该手机已升级到最新版系统「基于 EMUI 5.0 + Android 7.0」，发现 LogCat 调试一切正常，已不存在该问题，请大家升级后重试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前的真机调试时没有任何问题，最近使用荣耀v8时 , LogCat 无法输出调试日志，解决方法如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Android" scheme="http://bitky.cc/tags/Android/"/>
    
      <category term="LogCat" scheme="http://bitky.cc/tags/LogCat/"/>
    
      <category term="荣耀v8" scheme="http://bitky.cc/tags/%E8%8D%A3%E8%80%80v8/"/>
    
  </entry>
  
  <entry>
    <title>WPF 下的自定义控件以及 Grid 中控件的自适应</title>
    <link href="http://bitky.cc/2016/10/12/wpf/"/>
    <id>http://bitky.cc/2016/10/12/wpf/</id>
    <published>2016-10-12T04:57:47.000Z</published>
    <updated>2017-04-11T04:22:29.135Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结使用 C# 及 .NET 在 WPF 框架下，自定义控件的绘制以及窗体中控件的自适应。</p>
<a id="more"></a>
<h1 id="1-WPF-下的自定义控件"><a href="#1-WPF-下的自定义控件" class="headerlink" title="1. WPF 下的自定义控件"></a>1. WPF 下的自定义控件</h1><p>WPF 下，为快速地为应用定制一个零部件，需要的是 UserControl , 为了让你打造的控件更标准化，更灵活以及更具有普遍意义，需要用到的 CustomControl 。要在 WPF 中自定义一个控件,使用 UserControl 与 CustomControl 都是不错的选择，他们的区别在于：</p>
<ul>
<li><p>UserControl , 其更像 WinForm 中自定义控件的开发风格，在开发上更简单快速，几乎可以简单地理解为：利用设计器来将多个已有控件作为子元素来拼凑成一个 UserControl 并修改其外观，然后后台逻辑代码直接访问这些子元素。其最大的弊端在于: 其对模板样式等支持度不好，其重复使用的范围有限。</p>
</li>
<li><p>CustomControl , 其开发出来的控件才真正具有 WPF 风格，其对模板样式有着很好的支持，这是因为打造 CustomControl 时做到了逻辑代码与外观相分离，即使换上一套完全不同的视觉树其同样能很好的工作，就像 WPF 内置的控件一样。</p>
</li>
<li><p>在使用 Visual Studio 打造控件时 , UserControl 与 CustomControl 的差别就更加明显，在项目中添加一个 UserControl 时，我们会发现设计器为我们添加了一个 XAML 文件以及一个对应的 .CS 文件「或 .VB 等」，然后你就可以像设计普通窗体一样设计该 UserControl ; 如果我们是在项目中添加一个 CustomControl , 情况却不是这样，设计器会为我们生成一个 .CS 文件「或 .VB 等」，该文件用于编写控件的后台逻辑，而控件的外观却定义在了软件的应用主题「Theme」中了「如果你没有为软件定义通用主题，其会自动生成一个通用主题 <code>themes\generic.xaml</code>, 然后主题中会自动为你的控件生成一个 Style 」，并将通用主题与该控件关联了起来。这也就是 CustomControl 对样式的支持度比 UserControl 好的原因。</p>
</li>
</ul>
<p>这里为了简便起见，使用 UserControl 创建自定义控件。</p>
<h2 id="1-1-新建-UserControl"><a href="#1-1-新建-UserControl" class="headerlink" title="1.1 新建 UserControl"></a>1.1 新建 UserControl</h2><p>对项目点击右键，选择「添加」-&gt;「新建项」，选择 「用户控件『WPF』」”, 即可成功添加自定义控件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-b89696c7b86cd46b.jpg" alt="添加自定义控件"></p>
<p>对该控件进行设计，拖入几个系统控件，并修改其参数即可。下图展示的是我使用 Microsoft Blend 设计对控件进行设计：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-607919602e2478ec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用Microsoft Blend设计控件"></p>
<h2 id="1-2-UserControl-的基本代码"><a href="#1-2-UserControl-的基本代码" class="headerlink" title="1.2 UserControl 的基本代码"></a>1.2 UserControl 的基本代码</h2><p> 控件设计完毕后，右键单击控件编辑窗口，选择「查看代码」，或直接按「F7」键，即可编辑该控件类的源代码。我主要添加了该控件的初始化，改变控件的背景颜色，以及动态设定控件显示的值等代码功能，具体如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span>     _bitkyPoleControl.xaml 的交互逻辑</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">BitkyPoleControl</span> : <span class="title">UserControl</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Color _colorBlue = Color.FromRgb(<span class="number">0</span>, <span class="number">255</span>, <span class="number">200</span>);</div><div class="line">    <span class="comment">//改变颜色</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Color _colorRed = Color.FromRgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitkyPoleControl</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        InitializeComponent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> _id &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125; = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span>     根据参数初始化该控件</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>输入的参数<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></div><div class="line">    &#123;</div><div class="line">        Name = <span class="string">"bitkyPoleControl"</span> + id;</div><div class="line">        labelPoleId.Content = id;</div><div class="line">        _id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="keyword">int</span> num</span>)</span></div><div class="line">    &#123;</div><div class="line">        labelNum.Content = num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span>     设置背景颜色，0:绿  1:红</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="i"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span>(<span class="params"><span class="keyword">int</span> i</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</div><div class="line">            Background = <span class="keyword">new</span> SolidColorBrush(_colorBlue);</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</div><div class="line">            Background = <span class="keyword">new</span> SolidColorBrush(_colorRed);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-Grid-中控件的动态添加"><a href="#2-Grid-中控件的动态添加" class="headerlink" title="2. Grid 中控件的动态添加"></a>2. Grid 中控件的动态添加</h1><h2 id="2-1-主窗体中-Grid-的配置"><a href="#2-1-主窗体中-Grid-的配置" class="headerlink" title="2.1 主窗体中 Grid 的配置"></a>2.1 主窗体中 Grid 的配置</h2><p>我在主窗体中添加了一个 Grid , 并将该 Grid 平均分成了八行八列，如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-c1ad801a4c8c79d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主窗体中的 Grid"></p>
<p>设置方法如下：如下图所示，通过对 Grid 的属性进行如下设置：</p>
<ul>
<li>在「1」处，可添加 ColumnDefinitions 和 RowDefinitions 。</li>
<li><p>在「2」处，可设置 Grid 中单元格的最小尺寸，在 width 处，有三个选项：「Auto」,「Pixel」,「Star」。</p>
<ul>
<li>“Auto”：系统根据情况自动设定尺寸。</li>
<li>“Pixel”：设定为绝对尺寸，无法自适应。</li>
<li>“Star”：设置比重，各个行或列按照设定的比重分配Grid的空间。</li>
</ul>
</li>
</ul>
<p>在此，为了平均分配 Grid 的空间，且可根据窗口大小自适应，故将所有行和列的该项设定为「Star」，值设为「1」，即可出现上图的效果。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-6a4dcec3f0d97cef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Grid 的设置"></p>
<h2 id="2-2-Grid-中动态添加控件"><a href="#2-2-Grid-中动态添加控件" class="headerlink" title="2.2 Grid 中动态添加控件"></a>2.2 Grid 中动态添加控件</h2><p>在主窗体类中使用如下代码即可在 Grid 中动态添加控件 : </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span>     初始化信息显示标签界面</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitBitkyPoleShow</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> controls = <span class="keyword">new</span> List&lt;BitkyPoleControl&gt;();</div><div class="line">    <span class="keyword">var</span> id = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> bitkyPoleControl = <span class="keyword">new</span> BitkyPoleControl();</div><div class="line">            <span class="comment">//在 Grid 中动态添加控件</span></div><div class="line">            GridPoleStatusShow.Children.Add(bitkyPoleControl);</div><div class="line">            <span class="comment">//设定控件在 Grid 中的位置</span></div><div class="line">            Grid.SetRow(bitkyPoleControl, i);</div><div class="line">            Grid.SetColumn(bitkyPoleControl, j);</div><div class="line">            <span class="comment">//将控件添加到集合中，方便下一步的使用</span></div><div class="line">            controls.Add(bitkyPoleControl);</div><div class="line">            <span class="comment">//对控件使用自定义方法进行初始化</span></div><div class="line">            bitkyPoleControl.setContent(id);</div><div class="line">            id++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行程序，效果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-c2fd2edee0471def.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Grid 初步显示"></p>
<p>观察图片可知，空间排布较为美观，如若想要子控件完全填充 Grid 中的单元格，需对子控件的属性进行配置。</p>
<h1 id="3-Grid-中子控件的动态自适应"><a href="#3-Grid-中子控件的动态自适应" class="headerlink" title="3. Grid 中子控件的动态自适应"></a>3. Grid 中子控件的动态自适应</h1><h2 id="3-1-对子控件的属性进行配置"><a href="#3-1-对子控件的属性进行配置" class="headerlink" title="3.1 对子控件的属性进行配置"></a>3.1 对子控件的属性进行配置</h2><p><img src="http://upload-images.jianshu.io/upload_images/1555570-10b96a23b3f1c847.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对子控件的配置"></p>
<p>如图所示，将控件的宽度和高度设为「Auto」，将 HorizontalAlignment 和 VerticalAlignment 设为「Stretch」 , Margin 设为合适的值 , 则此时,  Grid 中的子控件的即可动态自适应父控件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-d9a008db596baf6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="子控件的动态自适应"></p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><ol>
<li><a href="http://www.cnblogs.com/zhouyinhui/archive/2007/10/16/926355.html" target="_blank" rel="external">在 WPF 中自定义控件 : 概述</a></li>
<li><a href="http://www.cnblogs.com/zhouyinhui/archive/2007/11/18/963441.html" target="_blank" rel="external">在 WPF 中自定义控件 : CustomControl</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要总结使用 C# 及 .NET 在 WPF 框架下，自定义控件的绘制以及窗体中控件的自适应。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://bitky.cc/categories/C/"/>
    
    
      <category term="CSharp" scheme="http://bitky.cc/tags/CSharp/"/>
    
      <category term=".NET" scheme="http://bitky.cc/tags/NET/"/>
    
      <category term="WPF" scheme="http://bitky.cc/tags/WPF/"/>
    
      <category term="GUI" scheme="http://bitky.cc/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>用于 C# 的 SQL 基本语法总结</title>
    <link href="http://bitky.cc/2016/09/25/sqlite/"/>
    <id>http://bitky.cc/2016/09/25/sqlite/</id>
    <published>2016-09-25T04:57:47.000Z</published>
    <updated>2017-04-11T04:30:21.324Z</updated>
    
    <content type="html"><![CDATA[<p> SQL 基本语法总结，本文目前用于 Visual Studio 2015 平台的 SQLite3, 其他用法以后总结。</p>
 <a id="more"></a>
<h1 id="1-使用-Nuget-添加-SQLite-库"><a href="#1-使用-Nuget-添加-SQLite-库" class="headerlink" title="1. 使用 Nuget 添加 SQLite 库"></a>1. 使用 Nuget 添加 SQLite 库</h1><p>在 Visual Studio 2015 中，选择：工具 -&gt; NuGet 包管理器 -&gt; 管理解决方案的 NuGet 程序包</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-0a0e01e8d9e0ebe9.jpg" alt="NuGet 管理界面"></p>
<p>在此界面下检索「SQLite」, 根据需要选择安装其中一个 SQLite 库，最好是红框部分内容中，二选一。</p>
<p>之后在界面的右侧，选择需要安装到的项目，之后进行安装操作即可。</p>
<h1 id="2-常用策略"><a href="#2-常用策略" class="headerlink" title="2. 常用策略"></a>2. 常用策略</h1><h2 id="2-1-对异常进行捕获"><a href="#2-1-对异常进行捕获" class="headerlink" title="2.1 对异常进行捕获"></a>2.1 对异常进行捕获</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//将对数据库进行操作的语句放置在try中</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (Exception ex)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//对异常进行处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-2-事务及-SQLite-代码框架"><a href="#2-2-事务及-SQLite-代码框架" class="headerlink" title="2.2 事务及 SQLite 代码框架"></a>2.2 事务及 SQLite 代码框架</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//使用以下语句配合具体的SQL操作语句即可</div><div class="line">//注：不主动控制事务时，每次执行SQL指令即会重复开启新的事务，</div><div class="line">//会在SQL操作方面花费大量的时间。所以在进行大量插入、修改操作</div><div class="line">//时，主动开启事务会极大节省时间</div><div class="line">var conn = new SQLiteConnection("Data Source = </div><div class="line">           ./bitkyData.db; Version = 3; ");</div><div class="line">conn.Open();</div><div class="line">var trans = conn.BeginTransaction(); //开启事务</div><div class="line">var cmd = conn.CreateCommand();</div><div class="line">try</div><div class="line">&#123;</div><div class="line">    //通过操作cmd，使用具体的SQL操作语句</div><div class="line">&#125;</div><div class="line">catch (Exception)</div><div class="line">&#123;</div><div class="line">    trans.Rollback(); //事务回滚</div><div class="line">    //进行具体的异常处理</div><div class="line">&#125;</div><div class="line">trans.Commit();//事务提交</div><div class="line">conn.Close();//连接关闭</div></pre></td></tr></table></figure>
<h1 id="3-必备代码块"><a href="#3-必备代码块" class="headerlink" title="3. 必备代码块"></a>3. 必备代码块</h1><h2 id="3-1-必要初始化操作"><a href="#3-1-必要初始化操作" class="headerlink" title="3.1 必要初始化操作"></a>3.1 必要初始化操作</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//指定数据库的地址，以及SQLite版本号</span></div><div class="line">SQLiteConnection conn = <span class="keyword">new</span> SQLiteConnection(<span class="string">"Data Source = ./bitkyData.db; Version = 3; "</span>);</div></pre></td></tr></table></figure>
<h2 id="3-2-向表中插入指定的条目"><a href="#3-2-向表中插入指定的条目" class="headerlink" title="3.2 向表中插入指定的条目"></a>3.2 向表中插入指定的条目</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertData</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    conn.Open();</div><div class="line">    <span class="keyword">var</span> cmd = conn.CreateCommand();</div><div class="line">    cmd.CommandText = <span class="string">"INSERT INTO ElectrodeController(typeA,typeB,typeM) VALUES (1, 2, 3)"</span>;</div><div class="line">    cmd.ExecuteNonQuery();</div><div class="line">    conn.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-3-设置查询的条件，查询指定条目的内容"><a href="#3-3-设置查询的条件，查询指定条目的内容" class="headerlink" title="3.3 设置查询的条件，查询指定条目的内容"></a>3.3 设置查询的条件，查询指定条目的内容</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">static void selectData()</div><div class="line">&#123;</div><div class="line">    conn.Open();</div><div class="line">    var cmd = conn.CreateCommand();</div><div class="line">    cmd.CommandText = "SELECT * FROM</div><div class="line">    ElectrodeController where num &gt; 45";</div><div class="line">    var reader = cmd.ExecuteReader();//获取结果集</div><div class="line">    if (reader.HasRows)</div><div class="line">    &#123;</div><div class="line">        while (reader.Read())</div><div class="line">        &#123;</div><div class="line">            Debug.WriteLine("ID: " + reader.GetInt32(0));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    conn.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-4-获取数据表中条目的数量"><a href="#3-4-获取数据表中条目的数量" class="headerlink" title="3.4 获取数据表中条目的数量"></a>3.4 获取数据表中条目的数量</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getCount</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    conn.Open();</div><div class="line">    <span class="keyword">var</span> cmd = conn.CreateCommand();</div><div class="line">    cmd.CommandText = <span class="string">"SELECT COUNT(*) FROM ElectrodeController"</span>;</div><div class="line">    <span class="keyword">var</span> scalar = cmd.ExecuteScalar();\\获取结果集中第一行第一列的那个值</div><div class="line">    Debug.WriteLine(<span class="string">"count: "</span> + Convert.ToInt32(scalar));</div><div class="line">    conn.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><ol>
<li><a href="http://www.etwiki.cn/c-sharp/3018.html" target="_blank" rel="external">C# 查询 SQL 数据库表里共有多少条记录的两种方法</a></li>
<li><a href="http://blog.csdn.net/friendan/article/details/7342921" target="_blank" rel="external">C# 获取 SQL 2005 表中的记录总数</a></li>
<li><a href="http://blog.csdn.net/xiaohu_2012/article/details/16973025" target="_blank" rel="external">C# , SQLite 批量操作速度优化</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_4cf05f9a01015sat.html" target="_blank" rel="external">C# 操作 Dataset 数据集与 SQLite 数据库</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; SQL 基本语法总结，本文目前用于 Visual Studio 2015 平台的 SQLite3, 其他用法以后总结。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://bitky.cc/categories/C/"/>
    
    
      <category term="CSharp" scheme="http://bitky.cc/tags/CSharp/"/>
    
      <category term="MySQL" scheme="http://bitky.cc/tags/MySQL/"/>
    
      <category term="SQLite" scheme="http://bitky.cc/tags/SQLite/"/>
    
      <category term="SQL" scheme="http://bitky.cc/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 数据库的自动备份操作</title>
    <link href="http://bitky.cc/2016/09/12/mysql%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>http://bitky.cc/2016/09/12/mysql - 副本/</id>
    <published>2016-09-12T04:57:47.000Z</published>
    <updated>2017-04-09T06:29:22.859Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 数据库中，对指定表实现按天自动备份的功能。</p>
<a id="more"></a>
<h1 id="1-预先条件"><a href="#1-预先条件" class="headerlink" title="1. 预先条件"></a>1. 预先条件</h1><ul>
<li>已正确安装 MySQL 并可开机自动运行</li>
<li>已将 MySQL 的工具添加到系统的环境变量中。</li>
</ul>
<h1 id="2-操作方法"><a href="#2-操作方法" class="headerlink" title="2. 操作方法"></a>2. 操作方法</h1><p>新建批处理文件，其中内容为：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">rem *******************************Code Start *****************************</span></div><div class="line">@<span class="built_in">echo</span> off</div><div class="line">mysqldump -u "用户名" --password="密码" "数据库名" &gt; "保存文件绝对地址及保存的文件名"</div><div class="line">@<span class="built_in">echo</span> on</div><div class="line"><span class="comment">rem ******************************* Code End *****************************</span></div><div class="line">```  </div><div class="line"></div><div class="line">我所配置的 .bat 文件内容为：</div><div class="line"></div><div class="line">```<span class="built_in">cmd</span></div><div class="line"><span class="comment">rem *******************************Code Start *****************************</span></div><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> "Ymd=<span class="variable">%date:~,4%</span><span class="variable">%date:~5,2%</span><span class="variable">%date:~8,2%</span>"</div><div class="line">mysqldump -u root --password=lml manager &gt; C:\MySQLBackup\manager_<span class="variable">%Ymd%</span>.sql</div><div class="line">@<span class="built_in">echo</span> on</div><div class="line"><span class="comment">rem ******************************* Code End *****************************</span></div></pre></td></tr></table></figure>
<h1 id="3-将此-bat-文件添加到系统计划任务中"><a href="#3-将此-bat-文件添加到系统计划任务中" class="headerlink" title="3. 将此 .bat 文件添加到系统计划任务中"></a>3. 将此 .bat 文件添加到系统计划任务中</h1><p>打开 “控制面板” -&gt; “计划任务程序” -&gt; “创建基本任务”<br>可以设置每天固定时间运行一次该 .bat 文件，即可实现每天自动对 MySQL 数据库进行备份</p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><p><a href="http://www.cnblogs.com/liongis/archive/2013/03/12/2956573.html" target="_blank" rel="external">Windows中，MySQL 自动备份的几种方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL 数据库中，对指定表实现按天自动备份的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://bitky.cc/categories/C/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="CSharp" scheme="http://bitky.cc/tags/CSharp/"/>
    
      <category term="MySQL" scheme="http://bitky.cc/tags/MySQL/"/>
    
      <category term="计划任务" scheme="http://bitky.cc/tags/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用 OpenVPN 搭建虚拟专用网络</title>
    <link href="http://bitky.cc/2016/07/04/openvpn/"/>
    <id>http://bitky.cc/2016/07/04/openvpn/</id>
    <published>2016-07-04T04:57:47.000Z</published>
    <updated>2017-04-09T06:30:34.124Z</updated>
    
    <content type="html"><![CDATA[<p>OpenVPN 是一个用于创建虚拟专用网络加密通道的软件包，本文主要介绍 OpenVPN 的配置及使用方法</p>
<a id="more"></a>
<h1 id="1-OpenVPN-简介"><a href="#1-OpenVPN-简介" class="headerlink" title="1. OpenVPN 简介"></a>1. OpenVPN 简介</h1><p>OpenVPN 是一个用于创建虚拟专用网络加密通道的软件包，最早由 James Yonan 编写。OpenVPN 允许创建的 VPN 使用公开密钥、电子证书、或者用户名／密码来进行身份验证。它大量使用了 OpenSSL 加密库中的 SSLv3 / TLSv1 协议函数库。目前 OpenVPN 能在 Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X 与 Microsoft Windows 以及 Android 和 iOS 上运行，并包含了许多安全性的功能。它并不是一个基于 Web 的 VPN 软件，也不与 IPsec 及其他 VPN 软件包兼容。</p>
<h2 id="1-1-OpenVPN-的配置原理"><a href="#1-1-OpenVPN-的配置原理" class="headerlink" title="1.1 OpenVPN 的配置原理"></a>1.1 OpenVPN 的配置原理</h2><p>OpenVPN 的配置工作主要分为如下两步：</p>
<ul>
<li><p>第一步，创建加密证书和私钥，其中包括服务器端和客户端都要用到的核心 CA 证书和私钥，服务器端自身的加密证书(即公钥)和私钥，以及每个客户端对应的加密证书和私钥。</p>
</li>
<li><p>第二步，为服务器和客户端编写对应的配置文件，然后将其与第一步中生成的相应证书、私钥放在 OpenVPN 安装目录的 config 文件夹下。</p>
</li>
</ul>
<p>OpenVPN 支持基于加密证书的双向认证。在 OpenVPN 中，不管是服务器还是客户端，所有的证书和私钥都需要由服务器端生成，客户端要先获得服务器端分配给它的加密证书和密钥才能成功连接。这与使用网上银行有些类似，大多数银行网站都会要求你先下载并安装一个数字证书，才允许你进行网上付款或其他操作。</p>
<h2 id="1-2-OpenVPN-的下载"><a href="#1-2-OpenVPN-的下载" class="headerlink" title="1.2 OpenVPN 的下载"></a>1.2 OpenVPN 的下载</h2><p>在 OpenVPN 的官网上，打开如下网页：</p>
<p><a href="https://openvpn.net/index.php/download/community-downloads.html" target="_blank" rel="external">https://openvpn.net/index.php/download/community-downloads.html</a></p>
<p>使用图片所示内容最后的下载链接，可下载到适用于 Windows Vista 及之后版本 Windows 系统的安装文件。本文以 OpenVPN 2.3.11 版本为例简要介绍 OpenVPN 的安装、配置、使用方法。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-204de9669fcbef05.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OpenVPN 下载页面"></p>
<p>#2. OpenVPN 服务器端的配置</p>
<h2 id="2-1-OpenVPN-的安装"><a href="#2-1-OpenVPN-的安装" class="headerlink" title="2.1 OpenVPN 的安装"></a>2.1 OpenVPN 的安装</h2><p>打开 OpenVPN 的安装程序进行安装。在安装的过程中，要求选择安装内容，默认未选中 easy-rsa 「加密证书生成程序」，因此，我们必须手动勾选未选中的两个选项，之后如若询问是否安装 TAP-Win32 驱动程序，确认安装即可。</p>
<h2 id="2-2-创建加密证书和私钥"><a href="#2-2-创建加密证书和私钥" class="headerlink" title="2.2 创建加密证书和私钥"></a>2.2 创建加密证书和私钥</h2><p>1、使用文本编辑器 <strong>以管理员权限</strong> 打开并修改 OpenVPN 服务器端的 vars.bat.sample 文件「客户端的无需做任何修改」。vars.bat.sample 文件位于：</p>
<pre><code>OpenVPN\easy-rsa\vars.bat.sample
</code></pre><p>文本内容部分摘录如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">set HOME=%ProgramFiles%\OpenVPN\easy-rsa </div><div class="line"><span class="comment">//变量HOME表示easy-rsa文件夹的路径</span></div><div class="line"></div><div class="line">set KEY_CONFIG=openssl-<span class="number">1.0</span>.0.cnf </div><div class="line"><span class="comment">//变量KEY_SIZE表示生成的私钥大小，一般填写为1024或2048，默认为1024位，可根据自己的需要进行修改。</span></div><div class="line"></div><div class="line"><span class="comment">//由于稍后给客户端生成对应加密证书和私钥时，程序会要求我们输入一些注册信息。建议修改相关变量的默认值，这样在稍后生成客户端证书的时候，如果该信息项不输入就会采用默认值。</span></div><div class="line">set KEY_COUNTRY=CN <span class="comment">//国家(注：必须为两位字符)</span></div><div class="line">set KEY_PROVINCE=GuangXi <span class="comment">//省份</span></div><div class="line">set KEY_CITY=GuiLin <span class="comment">//城市</span></div><div class="line">set KEY_ORG=GUET <span class="comment">//机构</span></div><div class="line">set KEY_EMAIL=***@<span class="number">126</span>.com <span class="comment">//邮箱</span></div><div class="line">set KEY_CN=changeme <span class="comment">//证书的通用名称(Common Name),相当于帐户名 (eg, your name or your server's hostname)</span></div><div class="line">set KEY_NAME=changeme <span class="comment">//用户姓名</span></div><div class="line">set KEY_OU=changeme <span class="comment">//部门名 Organizational Unit Name (eg, section)</span></div><div class="line">set PKCS11_MODULE_PATH=changeme</div><div class="line">set PKCS11_PIN=<span class="number">1234</span></div></pre></td></tr></table></figure>
<p>按照如上所述进行修改，修改完毕后，保存，接下来进行配置操作</p>
<h2 id="2-3-使用控制台创建服务端和客户端证书"><a href="#2-3-使用控制台创建服务端和客户端证书" class="headerlink" title="2.3 使用控制台创建服务端和客户端证书"></a>2.3 使用控制台创建服务端和客户端证书</h2><p>在作为服务器端的电脑上，<strong>以管理员权限</strong> 打开 cmd , 并进入到</p>
<pre><code>OpenVPN\easy-rsa
</code></pre><p>然后依次执行如下命令：</p>
<pre><code>1. init-config「初始化配置，将 vars.bat.sample 文件的内容复制到 vars.bat。实际上，你也可以直接双击执行 easy-rsa 目录下的 init-config.bat 文件来代替这一步。」

2. vars「设置相应的局部环境变量，就是我们在 vars.bat.sample 文件中设置的内容」

3. clean-all「相关设置和清理工作」
</code></pre><p>命令执行结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Microsoft Windows [版本 <span class="number">10</span>.<span class="number">0</span>.<span class="number">10586</span>]</div><div class="line">(c) <span class="number">2015</span> Microsoft Corporation。保留所有权利。</div><div class="line"><span class="function">C:\<span class="title">Windows</span>\<span class="title">system32</span>&gt;<span class="title">cd</span> <span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span></span></div><div class="line"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">init</span>-<span class="title">config</span></div><div class="line"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">copy</span> <span class="title">vars.bat.sample</span> <span class="title">vars.bat</span></div><div class="line">已复制         1 个文件。</div><div class="line"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">vars</span></div><div class="line"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">clean</span>-<span class="title">all</span></div><div class="line">系统找不到指定的文件。   //有时候会出现此句提示，可以被忽略</div><div class="line">已复制         1 个文件。</div><div class="line">已复制         1 个文件。</div></pre></td></tr></table></figure>
<p>接下来执行如下命令：</p>
<pre><code>4. build-ca「创建 CA 根证书及 key」
</code></pre><p>此处可修改此前预先设置的注册信息。</p>
<pre><code>5. build-key-server server「创建服务端证书及 key，其中『server』可以自由设定」
</code></pre><p>命令执行结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">build</span>-<span class="title">key</span>-<span class="title">server</span> <span class="title">server</span></span></div><div class="line"><span class="title">Common</span> <span class="title">Name</span> (<span class="title">eg</span>, <span class="title">your</span> <span class="title">name</span> <span class="title">or</span> <span class="title">your</span> <span class="title">server</span>'<span class="title">s</span> <span class="title">hostname</span>) [<span class="title">changeme</span>]:此处输入账户名</div><div class="line"><span class="title">A</span> <span class="title">challenge</span> <span class="title">password</span> []:此处输入密码</div><div class="line"></div><div class="line"><span class="title">Certificate</span> <span class="title">is</span> <span class="title">to</span> <span class="title">be</span> <span class="title">certified</span> <span class="title">until</span> <span class="title">Jul</span>  2 12:07:01 2026 <span class="title">GMT</span> (3650 <span class="title">days</span>)</div><div class="line"><span class="title">Sign</span> <span class="title">the</span> <span class="title">certificate</span>? [<span class="title">y</span>/<span class="title">n</span>]:<span class="title">y</span></div><div class="line">1 <span class="title">out</span> <span class="title">of</span> 1 <span class="title">certificate</span> <span class="title">requests</span> <span class="title">certified</span>, <span class="title">commit</span>? [<span class="title">y</span>/<span class="title">n</span>]<span class="title">y</span></div></pre></td></tr></table></figure>
<p>命令中的参数 <code>server</code> 指的是生成的证书文件名称，你可以按照自己的需要进行修改，不过后面的 <code>Common Name</code> 也应保持一致。最后程序会询问你是否注册并提交证书，两次均输入 y 即可。</p>
<pre><code>6. build-dh「创建迪菲·赫尔曼密钥，生成 1024 bit 的key」
</code></pre><p>迪菲·赫尔曼密钥交换「Diffie–Hellman key exchange , 简称『D–H』」是一种安全协议。它可以让双方在完全没有对方任何预先信息的条件下通过不安全信道创建起一个密钥。这个密钥可以在后续的通讯中作为对称密钥来加密通讯内容。</p>
<pre><code>7. build-key client「创建客户端证书及 key , 其中 `client` 可以自由设定」
</code></pre><p>此处如同第 5 步服务器部分的设置。</p>
<pre><code>8. openvpn --genkey --secret keys/ta.key「可选操作，生成 ta.key」
</code></pre><p>这一步是可选操作，生成的 ta.key 主要用于防御 DoS、UDP 淹没等恶意攻击。命令中的第 3 个参数 keys / ta.key 表示生成的文件路径「含文件名」。</p>
<p>创建完证书后，我们会发现 easy-rsa 目录下多了一个 keys 文件夹。但如果参数填写不恰当，可能生成一些 0 字节的 crt 文件，那么就得重新生成证书。生成结束后，可按照如下表格分别将文件拷贝到客户端和服务端的 config 目录中。</p>
<p>服务器端 config 目录需要的文件包括：</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th style="text-align:left">位置</th>
<th style="text-align:left">用途</th>
<th style="text-align:center">保密</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>ca.crt</td>
<td style="text-align:left">server + all clients</td>
<td style="text-align:left">Root CA certificate</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">核心 CA 证书</td>
</tr>
<tr>
<td>ca.key</td>
<td style="text-align:left">key signing machine only</td>
<td style="text-align:left">Root CA key</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">核心 CA 私钥</td>
</tr>
<tr>
<td>dh1024.pem</td>
<td style="text-align:left">server only</td>
<td style="text-align:left">Diffie Hellman parameters</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">如果最初的变量 KEY_SIZE 设为 2048，这里就是 dh2048.pem</td>
</tr>
<tr>
<td>server.crt</td>
<td style="text-align:left">server only</td>
<td style="text-align:left">Server Certificate</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">名称 server 根据个人设置有所不同</td>
</tr>
<tr>
<td>server.key</td>
<td style="text-align:left">server only</td>
<td style="text-align:left">Server Key</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">名称 server 根据个人设置有所不同</td>
</tr>
<tr>
<td>ta.key</td>
<td style="text-align:left">server + all clients</td>
<td style="text-align:left">防御 DoS、UDP 淹没等恶意攻击</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">名称也可自行设置，如果不需要防御攻击，可以不创建或复制此文件</td>
</tr>
</tbody>
</table>
<hr>
<p>客户端 config 目录需要的文件包括：</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th style="text-align:left">位置</th>
<th style="text-align:left">用途</th>
<th style="text-align:center">保密</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>ca.crt</td>
<td style="text-align:left">server + all clients</td>
<td style="text-align:left">Root CA certificate</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">核心 CA 证书</td>
</tr>
<tr>
<td>client.crt</td>
<td style="text-align:left">client only</td>
<td style="text-align:left">Client Certificate</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">名称 client 根据个人设置有所不同</td>
</tr>
<tr>
<td>client1.key</td>
<td style="text-align:left">client only</td>
<td style="text-align:left">Client Key</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">名称 client 根据个人设置有所不同</td>
</tr>
<tr>
<td>ta.key</td>
<td style="text-align:left">server + all clients</td>
<td style="text-align:left">防御 DoS、UDP 淹没等恶意攻击</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">名称也可自行设置，如果不需要防御攻击，可以不创建或复制此文件</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>重要提醒</strong>：以上命令都在同一 cmd 中执行，如果你以后需要打开新窗口来执行命令(比如创建新的客户端证书)：你不需要再执行 init-config 命令，除非你再次改动了 vars.bat.sample 文件；每一次打开新窗口时都需要先执行 vars 命令，后面才能执行其他命令。</p>
<hr>
<p><strong>附</strong>：若要撤销 client2 证书，则执行以下命令：</p>
<pre><code>vars
revoke-full client2
</code></pre><p>此时得到 crl.pem 文件，之后在服务端执行如下命令：</p>
<pre><code>crl-verify crl.pem
</code></pre><h1 id="3-配置文件的修改与部署"><a href="#3-配置文件的修改与部署" class="headerlink" title="3. 配置文件的修改与部署"></a>3. 配置文件的修改与部署</h1><p>上面已创建 OpenVPN 配置所需要的各种证书和私钥，现在可以为服务器和客户端设置对应的配置文件。</p>
<p>在 OpenVPN 的安装目录的 sample-config 文件夹中存放有 3 个示例模板文件 : server.ovpn、client.ovpn、sample.ovpn 。其中：</p>
<ul>
<li>server.ovpn 是服务器的配置模板</li>
<li>client.ovpn 是客户端的配置模板</li>
<li>sample.ovpn 也可用作客户端配置模板，不过配置比较简单，不够全面。</li>
</ul>
<p>按照官方的说法 , client.ovpn 可用于连接具有多个客户端的服务器端。</p>
<p>复制 server.ovpn 到服务器的 config 目录 , client.ovpn 到客户端的 config 目录，并在此基础上进行修改。在 OpenVPN 的配置文件中，前面带「#」或「;」的表示注释内容。</p>
<h2 id="3-1-配置文件的简单使用"><a href="#3-1-配置文件的简单使用" class="headerlink" title="3.1  配置文件的简单使用"></a>3.1  配置文件的简单使用</h2><ul>
<li>修改客户端的 client.ovpn 的 remote 项，让它指向服务端外部 IP 地址，格式例如 : remote x.x.x.x 1194 , 1194 是服务端定义的端口，这个可以通过服务端的配置文件修改，服务端和客户端端口必须匹配。</li>
<li>证书：在第 92, 93 行的「大概」位置，修改指定的 crt 和 key 文件，与之生成的证书文件名匹配。</li>
</ul>
<h2 id="3-2-编辑服务器端配置文件"><a href="#3-2-编辑服务器端配置文件" class="headerlink" title="3.2 编辑服务器端配置文件"></a>3.2 编辑服务器端配置文件</h2><p>server.ovpn 中所有用到的命令如下 : </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">local 192.168.0.2     #指定监听的本机 IP「因为有些计算机具备多个IP地址」，该命令是可选的，默认监听所有 IP 地址。</div><div class="line">port 1194             #指定监听的本机端口号</div><div class="line">proto udp             #指定采用的传输协议，可以选择 tcp 或 udp</div><div class="line">dev tun               #指定创建的通信隧道类型，可选 tun 或 tap</div><div class="line">ca ca.crt             #指定 CA 证书的文件路径</div><div class="line">cert server.crt       #指定服务器端的证书文件路径</div><div class="line">key server.key    #指定服务器端的私钥文件路径</div><div class="line">dh dh1024.pem         #指定迪菲赫尔曼参数的文件路径</div><div class="line">server 10.0.0.0 255.255.255.0   #指定虚拟局域网占用的 IP 地址段和子网掩码，此处配置的服务器自身占用 10.0.0.1。</div><div class="line">ifconfig-pool-persist ipp.txt   #服务器自动给客户端分配 IP 后，客户端下次连接时，仍然采用上次的 IP 地址(第一次分配的IP保存在 ipp.txt中，下一次分配其中保存的 IP)。</div><div class="line">tls-auth ta.key 0     #开启 TLS，使用 ta.key 防御攻击。服务器端的第二个参数值为 0，客户端的为 1。</div><div class="line">keepalive 10 120      #每 10 秒 ping 一次，连接超时时间设为 120 秒。</div><div class="line">comp-lzo              #开启 VPN 连接压缩，如果服务器端开启，客户端也必须开启</div><div class="line">client-to-client      #允许客户端与客户端相连接，默认情况下客户端只能与服务器相连接</div><div class="line">persist-key</div><div class="line">persist-tun           #持久化选项可以尽量避免访问在重启时由于用户权限降低而无法访问的某些资源。</div><div class="line">status openvpn-status.log    #指定记录 OpenVPN 状态的日志文件路径</div><div class="line">verb 3                #指定日志文件的记录详细级别，可选 0 - 9，等级越高日志内容越详细</div></pre></td></tr></table></figure>
<h2 id="3-3-编辑客户端配置文件"><a href="#3-3-编辑客户端配置文件" class="headerlink" title="3.3 编辑客户端配置文件"></a>3.3 编辑客户端配置文件</h2><p>client.ovpn 中所有用到的命令如下 : </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">client         #指定当前 VPN 是客户端</div><div class="line">dev tun        #必须与服务器端的保持一致</div><div class="line">proto udp      #必须与服务器端的保持一致</div><div class="line">remote 192.168.0.2 1194      //指定连接的远程服务器的实际 IP 地址和端口号</div><div class="line">resolv-retry infinite    #断线自动重新连接，在网络不稳定的情况下「例如：笔记本电脑无线网络」非常有用。</div><div class="line">nobind         #不绑定特定的本地端口号</div><div class="line">persist-key</div><div class="line">persist-tun</div><div class="line">ca ca.crt      #指定 CA 证书的文件路径</div><div class="line">cert client.crt       //指定当前客户端的证书文件路径</div><div class="line">key client.key    //指定当前客户端的私钥文件路径</div><div class="line">ns-cert-type server      #指定采用服务器校验方式</div><div class="line">tls-auth ta.key 1     //如果服务器设置了防御 DoS 等攻击的 ta.key，则必须每个客户端开启；如果未设置，则注释掉这一行；</div><div class="line">comp-lzo              #与服务器保持一致</div><div class="line">verb 3                #指定日志文件的记录详细级别，可选 0 - 9，等级越高日志内容越详细</div></pre></td></tr></table></figure>
<h1 id="4-OpenVPN-的启用"><a href="#4-OpenVPN-的启用" class="headerlink" title="4. OpenVPN 的启用"></a>4. OpenVPN 的启用</h1><p>生成、修改、保存完毕后，我们可以在服务器端及客户端分别配置如下内容：</p>
<p>在服务器端 OpenVPN 安装目录的 config 文件夹下应包含如下文件：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-f54bdaf3806f43d3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="服务器端config文件夹"></p>
<p>在客户端 OpenVPN 安装目录的 config 文件夹下应包含如下文件：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-25f2ee1b7a44fc85?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="客户端config文件夹"></p>
<h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/OpenVPN" target="_blank" rel="external">OpenVPN 维基百科</a></li>
<li><a href="https://openvpn.net/index.php/access-server/overview.html" target="_blank" rel="external">OpenVPN 官方网站</a></li>
<li><a href="http://blog.csdn.net/joyous/article/details/38048425" target="_blank" rel="external">FreeBSD 平台 OpenVPN 的安装、配置客户端和服务端</a></li>
<li><a href="http://www.365mini.com/page/14.htm" target="_blank" rel="external">OpenVPN 下载、安装、配置及使用详解</a></li>
<li><a href="http://blog.csdn.net/joyous/article/details/8034132" target="_blank" rel="external">OpenVPN 安装、配置客户端和服务端，以及 OpenVPN 的使用「Windows 平台」</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenVPN 是一个用于创建虚拟专用网络加密通道的软件包，本文主要介绍 OpenVPN 的配置及使用方法&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="OpenVPN" scheme="http://bitky.cc/tags/OpenVPN/"/>
    
      <category term="VPN" scheme="http://bitky.cc/tags/VPN/"/>
    
  </entry>
  
</feed>
