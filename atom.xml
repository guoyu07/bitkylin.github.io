<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>比特麒麟</title>
  <subtitle>https://github.com/bitkylin</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bitky.cc/"/>
  <updated>2017-04-17T14:43:14.168Z</updated>
  <id>http://bitky.cc/</id>
  
  <author>
    <name>雪中亮「123lml123」</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SLF4J 和 Logback 在 Maven 项目中的使用方法</title>
    <link href="http://bitky.cc/2017/04/17/log/"/>
    <id>http://bitky.cc/2017/04/17/log/</id>
    <published>2017-04-17T14:57:47.000Z</published>
    <updated>2017-04-17T14:43:14.168Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 SLF4J 和 Logback 在 Maven 项目中的用法，包括日志框架的依赖、使用，以及 XML 配置文件的引入。本文的精华内容翻译 Base22，文章来源见文末。</p>
<a id="more"></a>
<h1 id="1-将框架-SLF4J-＆-Logback-添加到-Maven-项目中。"><a href="#1-将框架-SLF4J-＆-Logback-添加到-Maven-项目中。" class="headerlink" title="1. 将框架 SLF4J ＆ Logback 添加到 Maven 项目中。"></a>1. 将框架 SLF4J ＆ Logback 添加到 Maven 项目中。</h1><p>通过简单的几个步骤，即可将 SLF4J 和 Logback 添加到 Maven 项目中。</p>
<h2 id="1-1-将依赖添加到-Maven-的-POM-xml-中"><a href="#1-1-将依赖添加到-Maven-的-POM-xml-中" class="headerlink" title="1.1 将依赖添加到 Maven 的 POM.xml 中"></a>1.1 将依赖添加到 Maven 的 POM.xml 中</h2><p>直接在 <a href="">Maven Repository</a> 中搜索 <code>Logback</code>, 选择使用量最大的「<a href="http://mvnrepository.com/artifact/ch.qos.logback/logback-classic" target="_blank" rel="external">Logback Classic Module</a>」, 将该依赖添加到 POM.xml 中，例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将会在项目中导入如下类库：</p>
<ul>
<li>logback-classic.x.x.x.jar</li>
<li>logback-core.x.x.x.jar</li>
<li>slf4j-api-x.x.x.jar</li>
</ul>
<h2 id="1-2-使用-XML-配置文件初始化"><a href="#1-2-使用-XML-配置文件初始化" class="headerlink" title="1.2 使用 XML 配置文件初始化"></a>1.2 使用 XML 配置文件初始化</h2><p>将 XML 配置文件 <code>logback.xml</code> 和 <code>logback-test.xml</code> 按照以下层次结构添加到项目中：</p>
<ul>
<li>src<ul>
<li>main<ul>
<li>resources<ul>
<li>logback.xml</li>
</ul>
</li>
</ul>
</li>
<li>test<ul>
<li>resources<ul>
<li>logback-test.xml</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>其中，两配置文件的内容如下：</p>
<p><strong> logback.xml </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line"></div><div class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;Pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/Pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;logger name=&quot;com.base22&quot; level=&quot;TRACE&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;root level=&quot;debug&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line"></div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p><strong> logback-test.xml </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line"></div><div class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;Pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/Pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;root level=&quot;debug&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line"></div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>在 <code>logback.xml</code> 中可以看到，包 <code>com.base22</code> 的 level 是 <code>TRACE</code>, 通过设置 <code>logger</code> 节点，可以指定特定包的 level。</p>
<p>除了特定包之外，项目的日志 level 均由 <code>root</code> 节点指定。</p>
<h1 id="2-Log-的基本使用"><a href="#2-Log-的基本使用" class="headerlink" title="2. Log 的基本使用"></a>2. Log 的基本使用</h1><p>使用 Log 时，需要在每个 <code>class</code> 文件中进行初始化操作。</p>
<p>首先导入如下内容：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div></pre></td></tr></table></figure>
<p>之后可使用如下语句引入 log ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static final Logger logger = LoggerFactory.getLogger(MyClassName.class);</div></pre></td></tr></table></figure>
<p>其中 <code>MyClassName</code> 改为该类的类名。</p>
<p>亦可在类的构造方法中使用如下语句初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Logger logger = LoggerFactory.getLogger(getClass());</div></pre></td></tr></table></figure>
<p>之后可在方法中调用如下语句进行 log 操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">logger.debug(<span class="string">"debug"</span>);</div><div class="line">logger.info(<span class="string">"info"</span>);</div></pre></td></tr></table></figure>
<h1 id="3-日志的级别-level-参考"><a href="#3-日志的级别-level-参考" class="headerlink" title="3. 日志的级别 (level) 参考"></a>3. 日志的级别 (level) 参考</h1><p>日志的级别 (level) 由低到高排列如下：</p>
<ul>
<li>trace</li>
<li>debug</li>
<li>info</li>
<li>warn</li>
<li>error</li>
</ul>
<h1 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h1><ol>
<li><a href="https://wiki.base22.com/display/btg/How+to+setup+SLF4J+and+LOGBack+in+a+web+app+-+fast" target="_blank" rel="external">How to setup SLF4J and LOGBack in a web app - fast</a></li>
<li><a href="https://logback.qos.ch/codes.html#layoutInsteadOfEncoder" target="_blank" rel="external">This appender no longer admits a layout as a sub-component, set an encoder instead. </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 SLF4J 和 Logback 在 Maven 项目中的用法，包括日志框架的依赖、使用，以及 XML 配置文件的引入。本文的精华内容翻译 Base22，文章来源见文末。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Maven" scheme="http://bitky.cc/tags/Maven/"/>
    
      <category term="SLF4J" scheme="http://bitky.cc/tags/SLF4J/"/>
    
      <category term="Logback" scheme="http://bitky.cc/tags/Logback/"/>
    
      <category term="log" scheme="http://bitky.cc/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Maven 常用技巧总结</title>
    <link href="http://bitky.cc/2017/04/06/maven/"/>
    <id>http://bitky.cc/2017/04/06/maven/</id>
    <published>2017-04-06T04:57:47.000Z</published>
    <updated>2017-04-11T02:35:55.577Z</updated>
    
    <content type="html"><![CDATA[<p>Maven 的常用技巧总结，包括设置 Java JDK 的版本为 JDK 1.8，构建生成可执行的 Jar，读取 resources 目录中的资源文件等。</p>
<a id="more"></a>
<h1 id="1-设置-Java-JDK-的版本为「JDK-1-8」"><a href="#1-设置-Java-JDK-的版本为「JDK-1-8」" class="headerlink" title="1. 设置 Java JDK 的版本为「JDK 1.8」"></a>1. 设置 Java JDK 的版本为「JDK 1.8」</h1><p>可以修改 <code>pom.xml</code> 添加如下语句实现使用 Java 8 语言特性，共有两种方式，可任选其一：</p>
<h2 id="1-1-添加-property"><a href="#1-1-添加-property" class="headerlink" title="1.1 添加 property"></a>1.1 添加 property</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">  [...]</div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">  [...]</div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="1-2-直接配置插件"><a href="#1-2-直接配置插件" class="headerlink" title="1.2 直接配置插件"></a>1.2 直接配置插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">  [...]</div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    [...]</div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    [...]</div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line">  [...]</div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="2-Maven-构建生成可执行的-Jar"><a href="#2-Maven-构建生成可执行的-Jar" class="headerlink" title="2. Maven 构建生成可执行的 Jar"></a>2. Maven 构建生成可执行的 Jar</h1><h2 id="2-1-简单构建可执行的-Jar"><a href="#2-1-简单构建可执行的-Jar" class="headerlink" title="2.1 简单构建可执行的 Jar"></a>2.1 简单构建可执行的 Jar</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">  [...]</div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    [...]</div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">          [...]</div><div class="line">          <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.sample.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        [...]</div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">      [...]</div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时可使用如下命令构建可执行 Jar</p>
<pre><code>mvn assembly:single
</code></pre><h2 id="2-2-将-Assembly-的-single-目标绑定到项目的构建生命周期中"><a href="#2-2-将-Assembly-的-single-目标绑定到项目的构建生命周期中" class="headerlink" title="2.2 将 Assembly 的 single 目标绑定到项目的构建生命周期中"></a>2.2 将 Assembly 的 single 目标绑定到项目的构建生命周期中</h2><p>可在 pom.xml 文件中添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span>    </div><div class="line">  [...]              </div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span>        </div><div class="line">    [...]                            </div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- append assembly id in release file name --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>true<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--构建可执行的 Jar--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>cc.bitky.fx.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--使用「Jar集成依赖」的描述符--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">              <span class="comment">&lt;!-- this is used for inheritance merges --&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">              <span class="comment">&lt;!-- bind to the packaging phase --&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    [...]  </div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>之后，为了生成项目的 Jar 文件，可以简单地执行如下生命周期阶段命令：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn package</div></pre></td></tr></table></figure>
<p>构建完毕后，可以看到已经生成了类似于以下名字的文件：</p>
<pre><code>target / sample-1.0-SNAPSHOT-jar-with-dependencies.jar

target / sample-1.0.jar
</code></pre><p>appendAssemblyId: 控制是否在已生成的文件的文件名中包含「ssembly id」。</p>
<p>execution: 用于将 maven-assembly-plugin 集成至标准的 Maven 构建生命周期中，此时执行 <code>maven package</code> 时就会执行指定的操作，从而实现自定义打包。</p>
<h2 id="2-3-Assembly-插件的-Maven-Goals"><a href="#2-3-Assembly-插件的-Maven-Goals" class="headerlink" title="2.3 Assembly 插件的 Maven Goals"></a>2.3 Assembly 插件的 Maven Goals</h2><ul>
<li>assembly:assembly: 「已弃用」会自动执行 package 生命周期。</li>
<li>assembly:single: 仅会装配成 jar-with-dependencies，我们不想让 package 阶段运行两次 package，所以配置为这个。</li>
</ul>
<h1 id="3-Maven-中读取资源文件"><a href="#3-Maven-中读取资源文件" class="headerlink" title="3. Maven 中读取资源文件"></a>3. Maven 中读取资源文件</h1><p>在 Maven 项目的根目录下，有如下必要的目录结构:</p>
<blockquote>
<ul>
<li>src<ul>
<li>main<ul>
<li>resources「存放一些资源文件」</li>
<li>java</li>
</ul>
</li>
<li>test<ul>
<li>resources「存放一些资源文件」</li>
<li>java</li>
</ul>
</li>
</ul>
</li>
<li>pom.xml</li>
</ul>
</blockquote>
<p>在项目的 <code>compile</code> 时期，所有的资源文件和 <code>.class</code> 文件均被复制到 <code>target/classes/</code> 目录中，获取资源文件，可参考如下语句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. <span class="keyword">this</span>.getClass().getResource（<span class="string">""</span>）</div><div class="line">   <span class="comment">//得到的是当前类 class 文件所在的目录 URL。</span></div><div class="line"></div><div class="line"><span class="number">2</span>. <span class="keyword">this</span>.getClass().getResource（<span class="string">"/"</span>）</div><div class="line"><span class="number">3</span>. <span class="keyword">this</span>.getClass().getClassLoader().getResource（<span class="string">""</span>）</div><div class="line"><span class="number">4</span>. ClassLoader.getSystemResource（<span class="string">""</span>）</div><div class="line"><span class="number">5</span>. Thread.currentThread().getContextClassLoader().getResource（<span class="string">""</span>）</div><div class="line">   <span class="comment">//得到的是当前 ClassPath 的绝对 URI 路径。</span></div></pre></td></tr></table></figure>
<p>所以，如若想要获取 <code>resources</code> 文件夹中的资源文件 <code>ky.xml</code>，可使用如下语句之一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getClass().getClassLoader().getResource(&quot;ky.xml&quot;)</div><div class="line">getClass().getResource(&quot;/ky.fxml&quot;)</div></pre></td></tr></table></figure>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><ol>
<li><a href="http://maven.apache.org/components/plugins/maven-compiler-plugin/examples/set-compiler-source-and-target.html" target="_blank" rel="external">Setting the -source and -target of the Java Compiler</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-5things13/" target="_blank" rel="external">关于 Apache Maven 您不知道的 5 件事</a></li>
<li><a href="https://my.oschina.net/simpleton/blog/607776" target="_blank" rel="external">Maven 打包可执行 Jar 的方法</a></li>
<li><a href="http://tonglin.iteye.com/blog/556449" target="_blank" rel="external"><a href="http://tonglin.iteye.com/blog/556449" target="_blank" rel="external">关于创建可执行的 Jar 文件</a></a></li>
<li><a href="http://www.blogjava.net/aoxj/archive/2009/01/16/251615.html" target="_blank" rel="external">初学 Maven - 使用 Assembly Plugin 实现自定义打包</a></li>
<li><a href="http://stackoverflow.com/questions/22000423/javafx-and-maven-nullpointerexception-location-is-required" target="_blank" rel="external">JavaFX and maven: NullPointerException: Location is required</a></li>
<li><a href="http://liumh.com/2014/01/14/get-path-of-file-with-java/" target="_blank" rel="external">Java 获取文件的路径</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven 的常用技巧总结，包括设置 Java JDK 的版本为 JDK 1.8，构建生成可执行的 Jar，读取 resources 目录中的资源文件等。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Maven" scheme="http://bitky.cc/tags/Maven/"/>
    
      <category term="可执行 Jar" scheme="http://bitky.cc/tags/%E5%8F%AF%E6%89%A7%E8%A1%8C-Jar/"/>
    
      <category term="资源文件" scheme="http://bitky.cc/tags/%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>为你的简书和 GitHub 设定个性域名</title>
    <link href="http://bitky.cc/2017/03/26/website/"/>
    <id>http://bitky.cc/2017/03/26/website/</id>
    <published>2017-03-26T04:57:47.000Z</published>
    <updated>2017-04-11T02:31:17.750Z</updated>
    
    <content type="html"><![CDATA[<p>为你的简书和 GitHub 设定个性的二级域名。</p>
<a id="more"></a>
<p>首先对比技术类博客网站：</p>
<ul>
<li><p>CSDN 的写作体验很好，但是发布的文章呈现效果很差，但是有个优点：用户名作为 CSDN 的子目录，即变相实现个性域名，比如我的CSDN域名是：<a href="http://blog.csdn.net/llmmll08" target="_blank" rel="external">http://blog.csdn.net/llmmll08</a></p>
</li>
<li><p>简书的写作体验不错，发布后的效果很好，但是个人主页地址链接很长且不规则，比如我的主页地址为：<a href="http://www.jianshu.com/u/bd2e386a6ea8" target="_blank" rel="external">http://www.jianshu.com/u/bd2e386a6ea8</a></p>
</li>
</ul>
<p>经过一番设置后，我的网络联系地址集合如下：</p>
<table>
<thead>
<tr>
<th>网站</th>
<th>个性域名</th>
<th>原域名</th>
</tr>
</thead>
<tbody>
<tr>
<td>GitHub</td>
<td><a href="http://github.bitky.cc" target="_blank" rel="external">http://github.bitky.cc</a></td>
<td><a href="https://github.com/bitkylin" target="_blank" rel="external">https://github.com/bitkylin</a></td>
</tr>
<tr>
<td>简书</td>
<td><a href="http://js.bitky.cc" target="_blank" rel="external">http://js.bitky.cc</a></td>
<td><a href="http://www.jianshu.com/u/bd2e386a6ea8" target="_blank" rel="external">http://www.jianshu.com/u/bd2e386a6ea8</a></td>
</tr>
<tr>
<td>CSDN</td>
<td><a href="http://csdn.bitky.cc" target="_blank" rel="external">http://csdn.bitky.cc</a></td>
<td><a href="http://blog.csdn.net/llmmll08" target="_blank" rel="external">http://blog.csdn.net/llmmll08</a></td>
</tr>
</tbody>
</table>
<p>我在万网注册了一个域名，以上二级域名均挂靠在该域名下，通过二级域名的形式整合所有我的网络联系地址。</p>
<p>首先感谢这篇文章提供的思路<a href="http://www.jianshu.com/p/42a1ebd417d4" target="_blank" rel="external">「为你的简书添加个性域名」</a>。下文总结个性二级域名重定向的配置方式，对各个网站的个人主页设置个性域名的方式有如下几种。</p>
<h1 id="1-使用万网设置二级域名"><a href="#1-使用万网设置二级域名" class="headerlink" title="1. 使用万网设置二级域名"></a>1. 使用万网设置二级域名</h1><p>打开<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">「万网」</a>并登录，依次选择：控制台 -&gt; 域名与网站「万网」 -&gt; 域名</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-6102ad7f7a2b1c9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名列表页面"></p>
<p>点击需要配置的域名，设置域名解析，将记录类型设置为「显性URL」或「隐性URL」。</p>
<blockquote>
<p><strong>显性URL</strong><br>将域名指向一个http「s」协议地址，访问域名时，自动跳转至目标地址「例如：将 www.net.cn 显性转发到 www.hichina.com 后，访问 www.net.cn 时，地址栏显示的地址为：www.hichina.com」。</p>
<p><strong>隐性URL</strong><br>与显性URL类似，但隐性转发会隐藏真实的目标地址「例如：将 www.net.cn 隐性转发到 www.hichina.com 后，访问 www.net.cn 时，地址栏显示的地址仍然为：www.net.cn」。</p>
</blockquote>
<p>如下图所示进行设置：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-6daa3c5ee2f256eb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对我的 CSDN 主页设置显性 URL"></p>
<p>此时访问 <a href="http://csdn.bitky.cc" target="_blank" rel="external">http://csdn.bitky.cc</a> 时，会自动显性重定向至 <a href="http://blog.csdn.net/llmmll08" target="_blank" rel="external">http://blog.csdn.net/llmmll08</a></p>
<p>只有当欲跳转网页的主域名在万网托管，并且有备案时，该方法才能使用，不然进行配置时，会有如下错误提示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-f07fe23dbd99d9e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在万网未查询到 GitHub 的备案号"></p>
<h1 id="2-使用-CNAME-记录设置二级域名"><a href="#2-使用-CNAME-记录设置二级域名" class="headerlink" title="2. 使用 CNAME 记录设置二级域名"></a>2. 使用 CNAME 记录设置二级域名</h1><blockquote>
<p><strong>CNAME 记录</strong><br>如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加 CNAME 记录。</p>
</blockquote>
<p><a href="https://github.com/bitkylin" target="_blank" rel="external"> GitHub </a>和<a href="https://coding.net/u/bitky" target="_blank" rel="external"> 码云 </a>均提供免费的静态网页托管服务，由于码云是国内网站，访问速度会快一些，稳定一些。</p>
<p>打开码云，新建项目，在项目的主页面点击「新建文件」</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-725b6f3438c78fa8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="「码云」项目主页面"></p>
<p>设置新建的文件，文件名为「index.html」，内容为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        window.location.href="https://github.com/bitkylin";</div><div class="line">        //location.replace("https://github.com/bitkylin") 「可使用本行代码替换掉上一行代码，且实现效果一致」</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后进行提交，之后切换到「Pages 服务」页面，进行如下操作</p>
<ol>
<li>「部署来源」选择「master 分支」，点击保存。</li>
<li>自定义域名设置为自己域名的二级域名，点击绑定。</li>
<li>弹出对话框，提示设置域名解析的 CNAME 记录，在万网域名解析页面，照下图设置完成 CNAME 记录的设置，然后点击对话框的「确定」按钮。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-4ded4bd42f052b68.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" CNAME 记录设置"></p>
<p>具体设置情况如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-e7f87fd4953930e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="码云的「Coding Pages 服务」配置页面"></p>
<p>之后，即可使用自定义的个性二级域名访问自己的个人主页了。</p>
<p>#4 参考链接</p>
<ol>
<li><a href="http://www.oschina.net/news/73980/gitosc-pages" target="_blank" rel="external">码云正式支持 Pages 功能「开源中国社区」</a></li>
<li><a href="http://news.yesky.com/news/168/102328168.shtml" target="_blank" rel="external">开源中国「码云」，岂止于中国版 GitHub !</a></li>
<li><a href="http://www.jianshu.com/p/42a1ebd417d4" target="_blank" rel="external">为你的简书添加个性域名</a></li>
<li><a href="http://blog.csdn.net/kongjing0815/article/details/5808063" target="_blank" rel="external">Js页面跳转整理</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为你的简书和 GitHub 设定个性的二级域名。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="二级域名" scheme="http://bitky.cc/tags/%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/"/>
    
      <category term="CNAME" scheme="http://bitky.cc/tags/CNAME/"/>
    
      <category term="GitHub" scheme="http://bitky.cc/tags/GitHub/"/>
    
      <category term="码云" scheme="http://bitky.cc/tags/%E7%A0%81%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>使用 Maven 构建 Java 项目</title>
    <link href="http://bitky.cc/2017/03/23/maven/"/>
    <id>http://bitky.cc/2017/03/23/maven/</id>
    <published>2017-03-23T04:57:47.000Z</published>
    <updated>2017-04-09T06:46:59.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Maven 是基于项目对象模型「POM」，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。本文总结了 Maven 的基本用法。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-Maven-基本配置"><a href="#1-Maven-基本配置" class="headerlink" title="1. Maven 基本配置"></a>1. Maven 基本配置</h1><h2 id="1-1-环境变量"><a href="#1-1-环境变量" class="headerlink" title="1.1 环境变量"></a>1.1 环境变量</h2><p>环境变量中添加「M2_HOME」为 maven 主目录</p>
<p>在 path 中添加「;%M2_HOME%\bin」</p>
<h2 id="1-2-使用-Maven-阿里云中央仓库"><a href="#1-2-使用-Maven-阿里云中央仓库" class="headerlink" title="1.2 使用 Maven 阿里云中央仓库"></a>1.2 使用 Maven 阿里云中央仓库</h2><p>修改 Maven 根目录下 conf 文件夹中的 <code>setting.xml</code> 文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="2-创建基于-Maven-的-Java-项目"><a href="#2-创建基于-Maven-的-Java-项目" class="headerlink" title="2. 创建基于 Maven 的 Java 项目"></a>2. 创建基于 Maven 的 Java 项目</h1><h2 id="2-1-使用命令行创建"><a href="#2-1-使用命令行创建" class="headerlink" title="2.1 使用命令行创建"></a>2.1 使用命令行创建</h2><p>Maven 使用原型「archetype」插件创建工程。要创建一个简单的 Java 应用，我们将使用 maven-archetype-quickstart 插件。</p>
<p>Maven 创建目录有两种方式：「archetype 可自动创建目录骨架」</p>
<ul>
<li>在 cmd 中直接执行「mvn archetype:generate」按照提示进行选择，选择如下 Archetype：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">943: remote -&gt; org.apache.maven.archetypes:maven-archetype-quickstart (An archetype which contains a sample Maven project.)</div></pre></td></tr></table></figure>
<ul>
<li>使用单行命令创建项目，命令格式如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate </div><div class="line"> -DgourpId = 组织名，公司网址的反写 + 项目名称</div><div class="line"> -DartifactId=项目名-模块名</div><div class="line"> -Dversion=版本号</div><div class="line"> -Dpackage=代码所在的包名</div></pre></td></tr></table></figure>
<p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate</div><div class="line"> -DgroupId=cc.bitky.demo</div><div class="line"> -DartifactId=demo-module</div><div class="line"> -Dversion=1.0.0-SNAPSHOT</div><div class="line"> -Dpackage=cc.bitky.demo.module</div><div class="line">``` </div><div class="line"></div><div class="line">## 2.2 使用InteliJ IDEA 创建</div><div class="line"></div><div class="line">- 在 InteliJ IDEA 中创建基础的示例 Maven 项目，依旧选择：</div></pre></td></tr></table></figure></p>
<p>org.apache.maven.archetypes:maven-archetype-quickstart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如图所示：</div><div class="line"></div><div class="line">![Maven Quickstart Archetype](http://upload-images.jianshu.io/upload_images/1555570-b5982c9937203085.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line"># 3. 目录结构</div><div class="line"></div><div class="line">## 3.1 Maven 项目的目录结构</div><div class="line"></div><div class="line">在 Maven 项目的根目录下，有如下必要的目录结构:</div><div class="line"></div><div class="line">&gt; - src</div><div class="line">&gt;   - main</div><div class="line">&gt;     - resources「存放一些资源文件」</div><div class="line">&gt;     - java</div><div class="line">&gt;       - package「自定义的包」</div><div class="line">&gt;   - test</div><div class="line">&gt;     - resources「存放一些资源文件」</div><div class="line">&gt;     - java</div><div class="line">&gt;       - package</div><div class="line">&gt; - pom.xml</div><div class="line"></div><div class="line">如下图所示：</div><div class="line"></div><div class="line">![Maven 项目的目录结构](http://upload-images.jianshu.io/upload_images/1555570-9f3d8f475ab10f2d.jpg)</div><div class="line"></div><div class="line">## 3.2 项目根目录下「pom.xml」的典型结构：</div><div class="line"></div><div class="line">``` xml</div><div class="line">&lt;project </div><div class="line">  xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; </div><div class="line">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;!--&gt;maven版本&lt;/--&gt;</div><div class="line">  &lt;groupId&gt;cc.bitky.demo&lt;/groupId&gt;       &lt;!--&gt;项目的包名&lt;/--&gt;</div><div class="line">  &lt;artifactId&gt;demo-module&lt;/artifactId&gt;   &lt;!--&gt;模块名&lt;/--&gt;</div><div class="line">  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;      &lt;!--&gt;版本&lt;/--&gt;</div><div class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line">  &lt;name&gt;demo-module&lt;/name&gt;</div><div class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line">  &lt;properties&gt;</div><div class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">  &lt;/properties&gt;</div><div class="line">  &lt;!-- 依赖项 --&gt;</div><div class="line">  &lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</div><div class="line">      &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">      &lt;!-- 排除依赖传递列表 --&gt;</div><div class="line">      &lt;exclusions&gt;</div><div class="line">        &lt;exclusion&gt;&lt;/exclusion&gt;</div><div class="line">      &lt;/exclusions&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">  &lt;/dependencies&gt;</div><div class="line">  &lt;!-- 依赖的管理，一般定义在父模块中，由子模块去继承 --&gt;</div><div class="line">  &lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">      &lt;dependency&gt;&lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">  &lt;/dependencyManagement&gt;</div><div class="line">  &lt;!-- 对构建行为提供相应的支持 --&gt;</div><div class="line">  &lt;build&gt;</div><div class="line">    &lt;!-- 插件列表 --&gt;</div><div class="line">    &lt;plugins&gt;</div><div class="line">      &lt;plugin&gt;</div><div class="line">        &lt;!-- 指定坐标 --&gt;</div><div class="line">        &lt;groupId&gt;&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;&lt;/version&gt;</div><div class="line">      &lt;/plugin&gt;</div><div class="line">    &lt;/plugins&gt;</div><div class="line">  &lt;/build&gt;</div><div class="line">  &lt;!-- 一般在子模块中指定所继承的父模块 --&gt;</div><div class="line">  &lt;parent&gt;&lt;/parent&gt;</div><div class="line">  &lt;!-- 模块列表 --&gt;</div><div class="line">  &lt;modules&gt;</div><div class="line">    &lt;module&gt;&lt;/module&gt;</div><div class="line">  &lt;/modules&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<h1 id="4-Maven-操作"><a href="#4-Maven-操作" class="headerlink" title="4. Maven 操作"></a>4. Maven 操作</h1><h2 id="4-1-构建命令"><a href="#4-1-构建命令" class="headerlink" title="4.1 构建命令"></a>4.1 构建命令</h2><ul>
<li>mvn -v 版本。</li>
<li>mvn compile 编译。</li>
<li>mvn test 测试。</li>
<li>mvn package 打包。</li>
<li>mvn clean 清除maven生成的target目录。</li>
<li>mvn install 将生成的jar安装到本地仓库中。</li>
</ul>
<blockquote>
<ul>
<li>mvn compile: 编译主程序源代码，不会编译test目录的源代码。第一次运行时，会下载相关的依赖包，可能会比较费时</li>
<li>mvn test: 运行应用程序中的单元测试，会生成 target 文件夹：<ul>
<li>主程序编译的字节码文件在 classes 下面</li>
<li>测试程序放在 test-classes 下</li>
<li>所生成的测试报告放在 surefire-reports 文件夹下</li>
</ul>
</li>
<li>mvn package 会在target目录下生成 Jar 包，如「maven01-model-0.0.1SNAPSHPT.jar」</li>
</ul>
</blockquote>
<h2 id="4-2-生命周期"><a href="#4-2-生命周期" class="headerlink" title="4.2 生命周期"></a>4.2 生命周期</h2><p>Maven的生命周期大概如下，这几个命令对应了一个项目的完整的构建过程，这几个步骤对应的都有插件来完成：</p>
<ul>
<li>clean 「清理」</li>
<li>compile 「编译」</li>
<li>test 「测试」</li>
<li>package 「打包」</li>
<li>install「安装到本地库」</li>
</ul>
<p>Maven的生命周期分为三个独立的生命周期（每一个生命周期有分为若干个阶段，其中defaul是最核心的一个）：</p>
<ol>
<li>clean「清理项目」</li>
<li>default「构建项目」</li>
<li>site「生成项目的站点」</li>
</ol>
<h3 id="4-2-1-clean「清理项目」"><a href="#4-2-1-clean「清理项目」" class="headerlink" title="4.2.1 clean「清理项目」"></a>4.2.1 clean「清理项目」</h3><ul>
<li>pre-clean 「执行清理前的工作」</li>
<li>clean「清理上一次构建生成的所有文件」</li>
<li>post-clean「执行清理后的文件」</li>
</ul>
<h3 id="4-2-2-default「构建项目」（最核心）"><a href="#4-2-2-default「构建项目」（最核心）" class="headerlink" title="4.2.2 default「构建项目」（最核心）"></a>4.2.2 default「构建项目」（最核心）</h3><ul>
<li>compile 「编译」</li>
<li>test 「测试」</li>
<li>package 「打包」</li>
<li>install「安装到本地库」</li>
</ul>
<h3 id="4-2-3-site「生成项目站点」"><a href="#4-2-3-site「生成项目站点」" class="headerlink" title="4.2.3 site「生成项目站点」"></a>4.2.3 site「生成项目站点」</h3><ul>
<li>pre-site「在生成项目站点之前要完成的工作」</li>
<li>site「生成项目的站点文档」</li>
<li>post-site「在生成项目站点后要完成的工作」</li>
<li>site-deploy「发布生成的站点到服务器上」</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>每个独立的生命周期，只需执行其中一个命令，此时会从该生命周期的开始命令顺序执行到该命令。</li>
<li>Maven的生命周期对应的命令是顺序执行的，如果没有人为的顺序的一个个执行，那么Maven会默认的自动运行。</li>
<li>如执行「mvn clean test」,则此时会顺序执行「pre-clean clean post-clean compile test」</li>
<li>如执行「mvn test」,则此时会顺序执行「compile test」</li>
</ul>
<h1 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h1><ol>
<li><a href="http://wiki.jikexueyuan.com/project/maven/" target="_blank" rel="external">Maven 教程 - 「极客学院 Wiki」</a></li>
<li><a href="http://www.imooc.com/learn/443" target="_blank" rel="external">项目管理利器 — maven「慕课网」</a></li>
</ol>
<blockquote>
<p><strong>「镜像博客」</strong><a href="http://blog.csdn.net/llmmll08/article/details/64450713" target="_blank" rel="external">CSDN </a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Maven 是基于项目对象模型「POM」，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。本文总结了 Maven 的基本用法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Maven" scheme="http://bitky.cc/tags/Maven/"/>
    
      <category term="InteliJ IDEA" scheme="http://bitky.cc/tags/InteliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>关于 OkHttp 依赖冲突问题的解决过程</title>
    <link href="http://bitky.cc/2016/11/18/okhttp/"/>
    <id>http://bitky.cc/2016/11/18/okhttp/</id>
    <published>2016-11-18T04:57:47.000Z</published>
    <updated>2017-04-11T04:28:19.922Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp 是一个流行的开源网络请求库。许多第三方库的底层都是使用 OkHttp 实现网络请求，所以 OkHttp 相关的依赖冲突问题就变得很难避免，下文是我所遇到的一次关于 OkHttp 的依赖冲突问题，通过对 Gradle 工具及 Android Studio 的灵活使用，解决了此问题。</p>
<a id="more"></a>
<h1 id="1-关于-OkHttp-的依赖冲突"><a href="#1-关于-OkHttp-的依赖冲突" class="headerlink" title="1. 关于 OkHttp 的依赖冲突"></a>1. 关于 OkHttp 的依赖冲突</h1><p>我的项目中， build.gradle 文件中设置的主要依赖：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.0.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'cn.bmob.android:bmob-sdk:3.5.2'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.squareup.okhttp3:okhttp:3.4.2'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:imagepipeline-okhttp3:0.12.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:fresco:0.12.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在写该 App 的过程中，出现了较为诡异的情况：</p>
<ul>
<li>使用 Run ‘app’ 命令可以在 Android 6.0「API 23」环境中成功运行 App</li>
<li>使用 Run ‘app’ 命令针对 Android 4.4「API 19」环境的虚拟机，进行 Gradle 构建时报错</li>
<li>使用「Generate Signed APK」，在进行 Gradle 构建时报错</li>
<li>在 cmd 或 Windows PowerShell 中执行如下 Gradle 指令：</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gradle clean</div><div class="line">gradle build</div></pre></td></tr></table></figure>
<p>报错，所报错误分别如下 :</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Error:Error converting bytecode to dex:</div><div class="line">Cause: com.android.dex.DexException: Multiple dex files define Lokhttp3/Address;</div><div class="line"></div><div class="line">Error:Execution failed for task ':app:transformClassesWithDexForDebug'.</div><div class="line">&gt; com.android.build.api.transform.TransformException: com.android.ide.common.process.ProcessException: java.util.concurrent.ExecutionException: java.lang.UnsupportedOperationException</div></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">:app:transformClassesWithDexForDebug FAILED</div><div class="line"></div><div class="line">FAILURE: Build failed with an exception.</div><div class="line"></div><div class="line">* What went wrong:</div><div class="line">Execution failed <span class="keyword">for</span> <span class="keyword">task</span> <span class="string">':app:transformClassesWithDexForDebug'</span>.</div><div class="line">&gt; com.android.build.api.transform.TransformException: com.android.ide.common.process.ProcessException: java.util.concurrent.ExecutionException: java.lang.Unsu</div><div class="line">pportedOperationException</div><div class="line"></div><div class="line">* <span class="keyword">Try</span>:</div><div class="line">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class="line"></div><div class="line">BUILD FAILED</div></pre></td></tr></table></figure>
<p>通过打印的异常信息，可以确定问题是在于 OkHttp 的依赖冲突。</p>
<h1 id="2-依赖冲突问题的探究"><a href="#2-依赖冲突问题的探究" class="headerlink" title="2. 依赖冲突问题的探究"></a>2. 依赖冲突问题的探究</h1><h2 id="2-1-使用-Gradle-工具对依赖冲突进行探究"><a href="#2-1-使用-Gradle-工具对依赖冲突进行探究" class="headerlink" title="2.1 使用 Gradle 工具对依赖冲突进行探究"></a>2.1 使用 Gradle 工具对依赖冲突进行探究</h2><blockquote>
<p>Gradle 相关简介：</p>
<p>「一」Gradle位置：</p>
<ol>
<li><p>C:\Users\&lt; 用户名 &gt;.gradle\wrapper\dists\gradle- &lt; 版本号 &gt; -all\&lt;一串识别码&gt;\gradle- &lt; 版本号 &gt; </p>
</li>
<li><p>&lt; Android Studio 目录 &gt; \gradle\gradle- &lt; 版本号 &gt; </p>
</li>
</ol>
<p>「二」Gradle 环境变量配置：</p>
<ol>
<li><p>在环境变量里添加用户变量： GRADLE_HOME</p>
</li>
<li><p>在环境变量 path 中增加： %GRADLE_HOME%\bin;</p>
</li>
</ol>
</blockquote>
<p>此时，我直接使用 Gradle 工具检查此项目的依赖，进入项目目录，执行如下指令进行依赖检查：</p>
<pre><code>cd app
gradle dependencies
</code></pre><p>打印出如下图所示的依赖树，依赖树显示了你 build 脚本声明的顶级依赖和它们的传递依赖：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-30008a09d24fac58.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依赖树"></p>
<p>箭头所指的地方为与 OkHttp 相关的库，从依赖树可知，我自行引入的 OkHttp 库替换掉了 Fresco 中的低版本库，但仍旧提示依赖冲突。</p>
<p>经过多次尝试，发现只有同时去掉这两个对 OkHttp 的依赖时，问题得到解决，build.gradle 文件修改如下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.0.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'cn.bmob.android:bmob-sdk:3.5.2'</span></div><div class="line">    <span class="comment">//compile 'com.squareup.okhttp3:okhttp:3.4.2'</span></div><div class="line">    <span class="keyword">compile</span>(<span class="string">'com.facebook.fresco:imagepipeline-okhttp3:0.12.0'</span>, &#123;</div><div class="line">        <span class="keyword">exclude</span> module: <span class="string">"okhttp"</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:fresco:0.12.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-2-对解决依赖冲突问题的尝试"><a href="#2-2-对解决依赖冲突问题的尝试" class="headerlink" title="2.2 对解决依赖冲突问题的尝试"></a>2.2 对解决依赖冲突问题的尝试</h2><p>这个问题很奇葩，去掉对 OkHttp 的依赖怎么可以呢？对着错误代码查遍了 Google 和 Stack Overflow，提到的解决方法有如下两条：</p>
<h3 id="2-2-1-使用-Multidex-support-library-开启-Multidex-功能"><a href="#2-2-1-使用-Multidex-support-library-开启-Multidex-功能" class="headerlink" title="2.2.1 使用 Multidex support library 开启 Multidex 功能"></a>2.2.1 使用 Multidex support library 开启 Multidex 功能</h3><p>步骤 1：更改 build.grade</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// Enabling multidex support.</span></div><div class="line">    multiDexEnabled <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile <span class="string">'com.android.support:multidex:1.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>步骤 2：设置 Application 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        MultiDex.install(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>步骤 3：更改 grade.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.gradle.jvmargs=-XX:MaxHeapSize\=2048m -Xmx2048m</div></pre></td></tr></table></figure>
<h3 id="2-2-2-通过增大可用内存解决「-app-transformClassesForDexForDebug」异常"><a href="#2-2-2-通过增大可用内存解决「-app-transformClassesForDexForDebug」异常" class="headerlink" title="2.2.2 通过增大可用内存解决「:app:transformClassesForDexForDebug」异常"></a>2.2.2 通过增大可用内存解决「:app:transformClassesForDexForDebug」异常</h3><p>在 gradle.build 中指定 javaMaxHeapSize：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    .</div><div class="line">    .</div><div class="line">    .</div><div class="line">    dexOptions &#123;</div><div class="line">        javaMaxHeapSize <span class="string">"4g"</span> <span class="comment">//specify the heap size for the dex process</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，这两种办法都无益于解决问题。</p>
<h1 id="3-追根溯源解决依赖冲突"><a href="#3-追根溯源解决依赖冲突" class="headerlink" title="3. 追根溯源解决依赖冲突"></a>3. 追根溯源解决依赖冲突</h1><h2 id="3-1-问题的精确定位"><a href="#3-1-问题的精确定位" class="headerlink" title="3.1 问题的精确定位"></a>3.1 问题的精确定位</h2><p>通过中文搜索引擎搜索之后，在一篇文章中获得了灵感：</p>
<blockquote>
<p>对于如下异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; 2.Execution failed for task &apos;:app:transformClassesWithJarMergingForDebug&apos;.</div><div class="line">&gt; </div><div class="line">&gt; com.android.build.api.transform.TransformException: </div><div class="line">&gt; java.util.zip.ZipException: duplicate</div><div class="line">&gt; entry: android/support/v4/app/BackStackState$1.class</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>原因：在所添加的 jar 包或 aar 包中也引用了 support-V4 , 与工程中引用的相冲突 </p>
<p>Ctrl+N –&gt; 在搜索框中输入 BackStackState –&gt; 查找到所有引用该类的类，这些类即为引起冲突的类 </p>
<p>去掉本工程中 gradle 中用于引用有冲突的包的代码或者将冲突的代码从 jar 包或 aar 包中移除，确保一个 module 中只引用了一份相同的第三方包</p>
</blockquote>
<p>根据这份解决思路，进行问题的最终解决。</p>
<p>首先获取如下异常的关键信息：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error:Error converting bytecode to dex:</div><div class="line">Cause: com.android.dex.DexException: Multiple dex files define Lokhttp3<span class="regexp">/Address;</span></div></pre></td></tr></table></figure>
<p>由异常信息可知，OkHttp 下的 Address 类有冲突，执行如下步骤：</p>
<ul>
<li><p>Ctrl + N </p>
</li>
<li><p>在搜索框中输入 Address </p>
</li>
<li><p>查找到所有引用该类的类</p>
</li>
</ul>
<p>搜索到的内容，如下图所示。可知，Bmob 和 OkHttp 中均有该类。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-fb9839efc1647a17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Address 类的搜索结果"></p>
<h2 id="3-2-删掉冲突的-Jar-包"><a href="#3-2-删掉冲突的-Jar-包" class="headerlink" title="3.2 删掉冲突的 Jar 包"></a>3.2 删掉冲突的 Jar 包</h2><p>将项目的显示树由 Android 切换到 Project，查看 Bmob 的 Jar 包的结构，发现其中依赖了一个 OkHttp 的 Jar 包。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-b3302c60b8b81ee3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依赖的 Jar 包查询"></p>
<p>由于使用了 Gradle 的远程依赖形式，故直接删除冲突的内容无效，须转为使用本地依赖的形式。</p>
<p>根据 Bmob 官方文档的指示，删除 Bmob 的 Maven 仓库依赖，使用本地 Jar 包形式的依赖，去除对 OkHttp 的 Jar 包的引用，即可顺利解决问题。当然也可以只使用 Bmob 的远程依赖而在 build.gradle 中去掉其他相关「如 OkHttp，Gson，RxJava 等」的依赖。</p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><p><strong>问题预备</strong></p>
<ol>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/47911083" target="_blank" rel="external">Android OkHttp 完全解析 是时候来了解 OkHttp 了</a></li>
<li><a href="http://blog.csdn.net/lw_power/article/details/51241187" target="_blank" rel="external">Gradle 实战「1」 - 配置环境变量</a></li>
<li><a href="http://www.ezlippi.com/blog/2015/05/gradle-dependency-management.html" target="_blank" rel="external">Gradle 系列教程之依赖管理</a></li>
</ol>
<p><strong>MultiDex</strong></p>
<ol>
<li><a href="http://blog.csdn.net/yzzst/article/details/48290701" target="_blank" rel="external">Android分包 MultiDex 原理详解</a></li>
<li><a href="http://stackoverflow.com/a/38473900/6711470" target="_blank" rel="external">How to enable multidexing with the new Android Multidex support library</a></li>
</ol>
<p><strong>问题解决</strong></p>
<ol>
<li><a href="http://www.cnblogs.com/royi123/p/5378056.html" target="_blank" rel="external">Android Studio 编译中的一些问题解决办法</a></li>
<li><a href="http://blog.csdn.net/cx1229/article/details/52786168" target="_blank" rel="external">Android Studio 中如何解决重复依赖导致的 app:transformClassesWithJarMergingForDebug</a></li>
<li><a href="http://docs.bmob.cn/data/Android/a_faststart/doc/index.html#SDK%E5%AF%BC%E5%85%A5" target="_blank" rel="external">Bmob的开发文档</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OkHttp 是一个流行的开源网络请求库。许多第三方库的底层都是使用 OkHttp 实现网络请求，所以 OkHttp 相关的依赖冲突问题就变得很难避免，下文是我所遇到的一次关于 OkHttp 的依赖冲突问题，通过对 Gradle 工具及 Android Studio 的灵活使用，解决了此问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Android" scheme="http://bitky.cc/tags/Android/"/>
    
      <category term="Gradle" scheme="http://bitky.cc/tags/Gradle/"/>
    
      <category term="OkHttp" scheme="http://bitky.cc/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>基于 LNMP 搭建个人网站的填坑之旅</title>
    <link href="http://bitky.cc/2016/11/16/website/"/>
    <id>http://bitky.cc/2016/11/16/website/</id>
    <published>2016-11-16T04:57:47.000Z</published>
    <updated>2017-04-09T06:41:52.159Z</updated>
    
    <content type="html"><![CDATA[<p>本文讨论使用 LNMP 安装包构建网站底层服务后，包括域名解析，MySQL 的管理等的一系列填坑历程。</p>
<a id="more"></a>
<h1 id="1-LNMP-一键安装包简介"><a href="#1-LNMP-一键安装包简介" class="headerlink" title="1. LNMP 一键安装包简介"></a>1. LNMP 一键安装包简介</h1><p>使用 LNMP 一键安装包可以方便的配置好服务器的底层环境 , LNMP 一键安装包的官方介绍如下：</p>
<blockquote>
<p>LNMP 一键安装包是一个用 Linux Shell 编写的可以为 CentOS / RadHat / Fedora、Debian / Ubuntu / Raspbian / Deepin 等 VPS 或独立主机安装 LNMP「Nginx / MySQL / PHP」、LNMPA 「Nginx / MySQL / PHP / Apache」、LAMP「Apache / MySQL / PHP」生产环境的 Shell 程序。同时提供一些实用的辅助工具如：虚拟主机管理、FTP 用户管理、Nginx、MySQL / MariaDB、PHP 的升级、常用缓存组件 Redis、Xcache 等的安装、重置 MySQL root 密码、502 自动重启、日志切割、SSH 防护 DenyHosts / Fail2Ban、备份等许多实用脚本。</p>
</blockquote>
<p>LNMP 一键安装包的官网如下：</p>
<blockquote>
<p><a href="https://lnmp.org/" target="_blank" rel="external">https://lnmp.org/</a></p>
</blockquote>
<p>在官网上通过官方教程即可方便的在 VPS 中配置好网站的底层环境，此处不再赘述。</p>
<h1 id="2-域名解析问题相关"><a href="#2-域名解析问题相关" class="headerlink" title="2. 域名解析问题相关"></a>2. 域名解析问题相关</h1><p>首先将本人的网站信息公布如下：</p>
<ul>
<li>域名：<a href="http://bitky.cc/">http://bitky.cc/</a></li>
<li>IP 地址：104.224.172.61</li>
<li>主机提供方：<a href="https://bandwagonhost.com" target="_blank" rel="external">搬瓦工VPS</a></li>
<li>域名托管及解析：<a href="https://www.aliyun.com/" target="_blank" rel="external">阿里云「万网」</a></li>
</ul>
<p>本文之后的内容均是基于以上信息。</p>
<h2 id="2-1-域名解析配置"><a href="#2-1-域名解析配置" class="headerlink" title="2.1 域名解析配置"></a>2.1 域名解析配置</h2><p>通过如图所示的的方式对域名解析进行配置，可以将此二级域名的三级域名定向到我的微博和博客地址。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-3043ad8aa8115463.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="万网域名解析配置"></p>
<h2 id="2-2-将二级域名及其三级域名指向同一网站目录"><a href="#2-2-将二级域名及其三级域名指向同一网站目录" class="headerlink" title="2.2 将二级域名及其三级域名指向同一网站目录"></a>2.2 将二级域名及其三级域名指向同一网站目录</h2><p>本人站点域名为 : <a href="http://bitky.cc/">http://bitky.cc/</a> 以及 <a href="http://www.bitky.cc/" target="_blank" rel="external">http://www.bitky.cc/</a> , 使用官网教程 : <a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html" target="_blank" rel="external">LNMP 添加、删除虚拟主机及伪静态使用教程</a> 进行配置后，比较吊诡的是，访问后一个域名，网页仍然为配置前的页面 : </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-db3ac8f84eb43924.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="『恭喜您，LNMP 一键安装包安装成功』页面"></p>
<p>显示「恭喜您，LNMP 一键安装包安装成功！」，并没有将后一个域名解析成功。需要重新使用上述教程再对该域名进行添加，并指向网站的目录，即可将域名解析成功，配置示例如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-3ec9d3d887c1ee86.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加虚拟主机实例"></p>
<h1 id="3-MySQL-数据库管理"><a href="#3-MySQL-数据库管理" class="headerlink" title="3. MySQL 数据库管理"></a>3. MySQL 数据库管理</h1><h2 id="3-1-使用-phpMyAdmin-管理-MySQL"><a href="#3-1-使用-phpMyAdmin-管理-MySQL" class="headerlink" title="3.1 使用 phpMyAdmin 管理 MySQL"></a>3.1 使用 phpMyAdmin 管理 MySQL</h2><p>在更改网站默认目录后，就无法通过访问域名子目录的形式打开 phpMyAdmin , 需要使用 FTP 工具或 SSH 工具访问服务器，将：</p>
<pre><code>/home/wwwroot/default
</code></pre><p>下的 phpMyAdmin 子目录整体转移到如下目录：</p>
<pre><code>/home/wwwroot/&lt;网站目录&gt;
</code></pre><p>如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-935af00b799622fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phpMyAdmin 目录展示"></p>
<p>之后就可以使用如下形式访问 phpMyAdmin：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-f5b1928dfda17e67.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phpMyAdmin 登录页面"></p>
<h2 id="3-2-使用-MySQL-管理工具打开数据库"><a href="#3-2-使用-MySQL-管理工具打开数据库" class="headerlink" title="3.2 使用 MySQL 管理工具打开数据库"></a>3.2 使用 MySQL 管理工具打开数据库</h2><p>在以上配置之后，直接使用「Navicat for MySQL」等软件连接数据库会直接提示连接失败，使用 Xshell 等 SSH 工具访问服务器，在终端中进入 MySQL，之后在 MySQL 环境中键入：</p>
<pre><code>show global variables like &apos;port&apos;
</code></pre><p>出现如图所示的结果，显示 MySQL 的端口号是默认的 3306。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-ec844f1ad0d1244c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL 默认端口号显示"></p>
<p>退回到终端，使用如下命令：</p>
<pre><code>iptables -L -n
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1555570-b652203e45dc4e7f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux 防火墙规则查询"></p>
<p>显示 3306 端口被防火墙阻断，这时使用如下命令可以开放 3306 端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//将阻断 3306 端口的第六条规则删掉</div><div class="line">iptables -D INPUT 6</div><div class="line"></div><div class="line">//添加允许 3306 端口的规则</div><div class="line">iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</div><div class="line"></div><div class="line">//查看当前的防火墙规则并显示规则的序号</div><div class="line">iptables -L -n --line-number</div></pre></td></tr></table></figure>
<p>设置结果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-10ad5f10c0debbe8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置 Linux 防火墙规则"></p>
<p>之后再用「Navicat for MySQL」连接 MySQL 即可连接成功：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-ff56710cc0d19f46.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="「Navicat for MySQL」连接测试"></p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><ol>
<li><a href="http://jingyan.baidu.com/article/3c343ff71522880d377963bb.html" target="_blank" rel="external">Linux 服务器如何删除 iptables 指定的规则？</a></li>
<li><a href="https://lnmp.org/" target="_blank" rel="external">LNMP 一键安装包</a></li>
<li><a href="https://www.aliyun.com/" target="_blank" rel="external">阿里云</a></li>
<li><a href="https://bandwagonhost.com" target="_blank" rel="external">搬瓦工 VPS</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讨论使用 LNMP 安装包构建网站底层服务后，包括域名解析，MySQL 的管理等的一系列填坑历程。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="搬瓦工 VPS" scheme="http://bitky.cc/tags/%E6%90%AC%E7%93%A6%E5%B7%A5-VPS/"/>
    
      <category term="LNMP" scheme="http://bitky.cc/tags/LNMP/"/>
    
      <category term="阿里云「万网」" scheme="http://bitky.cc/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E3%80%8C%E4%B8%87%E7%BD%91%E3%80%8D/"/>
    
  </entry>
  
  <entry>
    <title>基于 WPF 的酷炫 GUI 窗口的简易实现</title>
    <link href="http://bitky.cc/2016/11/07/wpf/"/>
    <id>http://bitky.cc/2016/11/07/wpf/</id>
    <published>2016-11-07T04:57:47.000Z</published>
    <updated>2017-04-11T04:29:13.864Z</updated>
    
    <content type="html"><![CDATA[<p>本文要实现基于 WPF 的酷炫 GUI 窗口，力图实现一个真正可用且实用的 GUI 窗口。</p>
<a id="more"></a>
<p>本文要实现的效果如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-3e12b64d19ab769a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终效果"></p>
<p>效果总结如下：</p>
<ul>
<li>无标题栏，或自定义标题栏</li>
<li>窗口的半透明效果</li>
<li>窗口可自由拖拽</li>
<li>Enter 以及 Esc 等默认按键</li>
<li>右键菜单</li>
</ul>
<h1 id="1-窗口的效果实现"><a href="#1-窗口的效果实现" class="headerlink" title="1. 窗口的效果实现"></a>1. 窗口的效果实现</h1><h2 id="1-1-窗口外观相关"><a href="#1-1-窗口外观相关" class="headerlink" title="1.1 窗口外观相关"></a>1.1 窗口外观相关</h2><p>首先新建一个窗口，更改外观，对窗口的属性进行如下设置：</p>
<ul>
<li><p>外观设置中 , 「AllowsTransparency」复选框勾选上，该窗口就可以透明化，同时「WindowStyle」会自动变更为「None」, 窗口的默认标题栏会消失，此时可以选择自定义标题栏。</p>
</li>
<li><p>窗口允许透明化后，在「Background」、「BorderBrush」等选项中，对窗体的背景及边框颜色进行设置。可以设置为纯色或各种渐变形态以及各种透明形态。</p>
</li>
<li><p>使用「BorderThickness」项设置窗体的边框宽度。</p>
</li>
<li><p>「Opacity」设置整个界面的不透明度</p>
</li>
</ul>
<p>设置界面如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-7867eb5798263f7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="窗口布局设置页面"></p>
<h2 id="1-2-窗口大小位置相关"><a href="#1-2-窗口大小位置相关" class="headerlink" title="1.2 窗口大小位置相关"></a>1.2 窗口大小位置相关</h2><p>更改窗口的位置，对如下属性进行设置：</p>
<ul>
<li>WindowStartupLocation：修改窗口打开时的位置</li>
<li>WindowState：修改窗口打开时的大小状态，可设置全屏窗口</li>
<li>Topmost：本窗口置顶</li>
<li>Width和Height：窗口打开时的尺寸</li>
<li>MinWidth和MinHeight：窗口的最小尺寸</li>
</ul>
<h1 id="2-方便对窗口操作的功能实现"><a href="#2-方便对窗口操作的功能实现" class="headerlink" title="2. 方便对窗口操作的功能实现"></a>2. 方便对窗口操作的功能实现</h1><p>为方便对窗口的操作，可进行如下设置：</p>
<ul>
<li><p>设置某个 button 的属性，设置 IsCancel 和 IsDefault 属性，可设置 Enter 和 Esc 键所触发的按钮。</p>
</li>
<li><p>设置拖动窗口的任意位置均可拖拽窗口，可设置窗口的事件调用方法，设置 MouseLeftButtonDown 事件的调用方法。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-28a615bb3f79fb77.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MouseLeftButtonDown 事件调用方法设置"></p>
<p>设置的方法如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_MouseLeftButtonDown</span>(<span class="params"><span class="keyword">object</span> sender, MouseButtonEventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">    DragMove();</div><div class="line">&#125;</div><div class="line">```	</div><div class="line"></div><div class="line">点击关闭按钮时结束整个应用程序，可设置关闭事件的回调方法，也可设置按钮点击事件的方法，如下：</div><div class="line"></div><div class="line">```<span class="function">csharp</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnExit_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</div><div class="line">&#123;</div><div class="line">    Environment.Exit(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现窗口的右键菜单及其点击事件，需要设置窗口的「ContextMenu」属性，或在 Xaml 文件中，添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Window.ContextMenu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ContextMenu</span> <span class="attr">Name</span>=<span class="string">"ChangePassword"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Header</span>=<span class="string">"修改登录密码"</span></span></div><div class="line">                  <span class="attr">Click</span>=<span class="string">"MenuItemChangePassword_Click"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Header</span>=<span class="string">"关于"</span></span></div><div class="line">                  <span class="attr">Click</span>=<span class="string">"MenuItemAbout_Click"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">ContextMenu</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Window.ContextMenu</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文要实现基于 WPF 的酷炫 GUI 窗口，力图实现一个真正可用且实用的 GUI 窗口。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://bitky.cc/categories/C/"/>
    
    
      <category term="CSharp" scheme="http://bitky.cc/tags/CSharp/"/>
    
      <category term=".NET" scheme="http://bitky.cc/tags/NET/"/>
    
      <category term="WPF" scheme="http://bitky.cc/tags/WPF/"/>
    
      <category term="GUI" scheme="http://bitky.cc/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>荣耀v8 真机调试时不显示 Logcat 日志的解决办法</title>
    <link href="http://bitky.cc/2016/11/06/logcat/"/>
    <id>http://bitky.cc/2016/11/06/logcat/</id>
    <published>2016-11-06T04:57:47.000Z</published>
    <updated>2017-04-09T06:26:55.784Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>「最新更新」</strong>我刚刚尝试使用荣耀v8进行调试，该手机已升级到最新版系统「基于 EMUI 5.0 + Android 7.0」，发现 LogCat 调试一切正常，已不存在该问题，请大家升级后重试。</p>
</blockquote>
<p>之前的真机调试时没有任何问题，最近使用荣耀v8时 , LogCat 无法输出调试日志，解决方法如下：</p>
<a id="more"></a>
<p>步骤1： 手机拨号界面，输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*#*#2846579#*#*</div></pre></td></tr></table></figure>
<p>跳转进入「后台设置」</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-8d9496c60b8f40d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="后台设置"></p>
<p>步骤2： 进入「LOG设置」, 将复选框均勾选上</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-f381dc032166008e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LOG设置"></p>
<p>步骤3： 之后 , Logcat 可被启用，不需重启手机。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;「最新更新」&lt;/strong&gt;我刚刚尝试使用荣耀v8进行调试，该手机已升级到最新版系统「基于 EMUI 5.0 + Android 7.0」，发现 LogCat 调试一切正常，已不存在该问题，请大家升级后重试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前的真机调试时没有任何问题，最近使用荣耀v8时 , LogCat 无法输出调试日志，解决方法如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Android" scheme="http://bitky.cc/tags/Android/"/>
    
      <category term="LogCat" scheme="http://bitky.cc/tags/LogCat/"/>
    
      <category term="荣耀v8" scheme="http://bitky.cc/tags/%E8%8D%A3%E8%80%80v8/"/>
    
  </entry>
  
  <entry>
    <title>WPF 下的自定义控件以及 Grid 中控件的自适应</title>
    <link href="http://bitky.cc/2016/10/12/wpf/"/>
    <id>http://bitky.cc/2016/10/12/wpf/</id>
    <published>2016-10-12T04:57:47.000Z</published>
    <updated>2017-04-11T04:22:29.135Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结使用 C# 及 .NET 在 WPF 框架下，自定义控件的绘制以及窗体中控件的自适应。</p>
<a id="more"></a>
<h1 id="1-WPF-下的自定义控件"><a href="#1-WPF-下的自定义控件" class="headerlink" title="1. WPF 下的自定义控件"></a>1. WPF 下的自定义控件</h1><p>WPF 下，为快速地为应用定制一个零部件，需要的是 UserControl , 为了让你打造的控件更标准化，更灵活以及更具有普遍意义，需要用到的 CustomControl 。要在 WPF 中自定义一个控件,使用 UserControl 与 CustomControl 都是不错的选择，他们的区别在于：</p>
<ul>
<li><p>UserControl , 其更像 WinForm 中自定义控件的开发风格，在开发上更简单快速，几乎可以简单地理解为：利用设计器来将多个已有控件作为子元素来拼凑成一个 UserControl 并修改其外观，然后后台逻辑代码直接访问这些子元素。其最大的弊端在于: 其对模板样式等支持度不好，其重复使用的范围有限。</p>
</li>
<li><p>CustomControl , 其开发出来的控件才真正具有 WPF 风格，其对模板样式有着很好的支持，这是因为打造 CustomControl 时做到了逻辑代码与外观相分离，即使换上一套完全不同的视觉树其同样能很好的工作，就像 WPF 内置的控件一样。</p>
</li>
<li><p>在使用 Visual Studio 打造控件时 , UserControl 与 CustomControl 的差别就更加明显，在项目中添加一个 UserControl 时，我们会发现设计器为我们添加了一个 XAML 文件以及一个对应的 .CS 文件「或 .VB 等」，然后你就可以像设计普通窗体一样设计该 UserControl ; 如果我们是在项目中添加一个 CustomControl , 情况却不是这样，设计器会为我们生成一个 .CS 文件「或 .VB 等」，该文件用于编写控件的后台逻辑，而控件的外观却定义在了软件的应用主题「Theme」中了「如果你没有为软件定义通用主题，其会自动生成一个通用主题 <code>themes\generic.xaml</code>, 然后主题中会自动为你的控件生成一个 Style 」，并将通用主题与该控件关联了起来。这也就是 CustomControl 对样式的支持度比 UserControl 好的原因。</p>
</li>
</ul>
<p>这里为了简便起见，使用 UserControl 创建自定义控件。</p>
<h2 id="1-1-新建-UserControl"><a href="#1-1-新建-UserControl" class="headerlink" title="1.1 新建 UserControl"></a>1.1 新建 UserControl</h2><p>对项目点击右键，选择「添加」-&gt;「新建项」，选择 「用户控件『WPF』」”, 即可成功添加自定义控件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-b89696c7b86cd46b.jpg" alt="添加自定义控件"></p>
<p>对该控件进行设计，拖入几个系统控件，并修改其参数即可。下图展示的是我使用 Microsoft Blend 设计对控件进行设计：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-607919602e2478ec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用Microsoft Blend设计控件"></p>
<h2 id="1-2-UserControl-的基本代码"><a href="#1-2-UserControl-的基本代码" class="headerlink" title="1.2 UserControl 的基本代码"></a>1.2 UserControl 的基本代码</h2><p> 控件设计完毕后，右键单击控件编辑窗口，选择「查看代码」，或直接按「F7」键，即可编辑该控件类的源代码。我主要添加了该控件的初始化，改变控件的背景颜色，以及动态设定控件显示的值等代码功能，具体如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span>     _bitkyPoleControl.xaml 的交互逻辑</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">BitkyPoleControl</span> : <span class="title">UserControl</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Color _colorBlue = Color.FromRgb(<span class="number">0</span>, <span class="number">255</span>, <span class="number">200</span>);</div><div class="line">    <span class="comment">//改变颜色</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Color _colorRed = Color.FromRgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitkyPoleControl</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        InitializeComponent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> _id &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125; = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span>     根据参数初始化该控件</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>输入的参数<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></div><div class="line">    &#123;</div><div class="line">        Name = <span class="string">"bitkyPoleControl"</span> + id;</div><div class="line">        labelPoleId.Content = id;</div><div class="line">        _id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="keyword">int</span> num</span>)</span></div><div class="line">    &#123;</div><div class="line">        labelNum.Content = num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span>     设置背景颜色，0:绿  1:红</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="i"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span>(<span class="params"><span class="keyword">int</span> i</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</div><div class="line">            Background = <span class="keyword">new</span> SolidColorBrush(_colorBlue);</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</div><div class="line">            Background = <span class="keyword">new</span> SolidColorBrush(_colorRed);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-Grid-中控件的动态添加"><a href="#2-Grid-中控件的动态添加" class="headerlink" title="2. Grid 中控件的动态添加"></a>2. Grid 中控件的动态添加</h1><h2 id="2-1-主窗体中-Grid-的配置"><a href="#2-1-主窗体中-Grid-的配置" class="headerlink" title="2.1 主窗体中 Grid 的配置"></a>2.1 主窗体中 Grid 的配置</h2><p>我在主窗体中添加了一个 Grid , 并将该 Grid 平均分成了八行八列，如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-c1ad801a4c8c79d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主窗体中的 Grid"></p>
<p>设置方法如下：如下图所示，通过对 Grid 的属性进行如下设置：</p>
<ul>
<li>在「1」处，可添加 ColumnDefinitions 和 RowDefinitions 。</li>
<li><p>在「2」处，可设置 Grid 中单元格的最小尺寸，在 width 处，有三个选项：「Auto」,「Pixel」,「Star」。</p>
<ul>
<li>“Auto”：系统根据情况自动设定尺寸。</li>
<li>“Pixel”：设定为绝对尺寸，无法自适应。</li>
<li>“Star”：设置比重，各个行或列按照设定的比重分配Grid的空间。</li>
</ul>
</li>
</ul>
<p>在此，为了平均分配 Grid 的空间，且可根据窗口大小自适应，故将所有行和列的该项设定为「Star」，值设为「1」，即可出现上图的效果。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-6a4dcec3f0d97cef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Grid 的设置"></p>
<h2 id="2-2-Grid-中动态添加控件"><a href="#2-2-Grid-中动态添加控件" class="headerlink" title="2.2 Grid 中动态添加控件"></a>2.2 Grid 中动态添加控件</h2><p>在主窗体类中使用如下代码即可在 Grid 中动态添加控件 : </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span>     初始化信息显示标签界面</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitBitkyPoleShow</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> controls = <span class="keyword">new</span> List&lt;BitkyPoleControl&gt;();</div><div class="line">    <span class="keyword">var</span> id = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> bitkyPoleControl = <span class="keyword">new</span> BitkyPoleControl();</div><div class="line">            <span class="comment">//在 Grid 中动态添加控件</span></div><div class="line">            GridPoleStatusShow.Children.Add(bitkyPoleControl);</div><div class="line">            <span class="comment">//设定控件在 Grid 中的位置</span></div><div class="line">            Grid.SetRow(bitkyPoleControl, i);</div><div class="line">            Grid.SetColumn(bitkyPoleControl, j);</div><div class="line">            <span class="comment">//将控件添加到集合中，方便下一步的使用</span></div><div class="line">            controls.Add(bitkyPoleControl);</div><div class="line">            <span class="comment">//对控件使用自定义方法进行初始化</span></div><div class="line">            bitkyPoleControl.setContent(id);</div><div class="line">            id++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行程序，效果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-c2fd2edee0471def.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Grid 初步显示"></p>
<p>观察图片可知，空间排布较为美观，如若想要子控件完全填充 Grid 中的单元格，需对子控件的属性进行配置。</p>
<h1 id="3-Grid-中子控件的动态自适应"><a href="#3-Grid-中子控件的动态自适应" class="headerlink" title="3. Grid 中子控件的动态自适应"></a>3. Grid 中子控件的动态自适应</h1><h2 id="3-1-对子控件的属性进行配置"><a href="#3-1-对子控件的属性进行配置" class="headerlink" title="3.1 对子控件的属性进行配置"></a>3.1 对子控件的属性进行配置</h2><p><img src="http://upload-images.jianshu.io/upload_images/1555570-10b96a23b3f1c847.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对子控件的配置"></p>
<p>如图所示，将控件的宽度和高度设为「Auto」，将 HorizontalAlignment 和 VerticalAlignment 设为「Stretch」 , Margin 设为合适的值 , 则此时,  Grid 中的子控件的即可动态自适应父控件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-d9a008db596baf6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="子控件的动态自适应"></p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><ol>
<li><a href="http://www.cnblogs.com/zhouyinhui/archive/2007/10/16/926355.html" target="_blank" rel="external">在 WPF 中自定义控件 : 概述</a></li>
<li><a href="http://www.cnblogs.com/zhouyinhui/archive/2007/11/18/963441.html" target="_blank" rel="external">在 WPF 中自定义控件 : CustomControl</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要总结使用 C# 及 .NET 在 WPF 框架下，自定义控件的绘制以及窗体中控件的自适应。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://bitky.cc/categories/C/"/>
    
    
      <category term="CSharp" scheme="http://bitky.cc/tags/CSharp/"/>
    
      <category term=".NET" scheme="http://bitky.cc/tags/NET/"/>
    
      <category term="WPF" scheme="http://bitky.cc/tags/WPF/"/>
    
      <category term="GUI" scheme="http://bitky.cc/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>用于 C# 的 SQL 基本语法总结</title>
    <link href="http://bitky.cc/2016/09/25/sqlite/"/>
    <id>http://bitky.cc/2016/09/25/sqlite/</id>
    <published>2016-09-25T04:57:47.000Z</published>
    <updated>2017-04-11T04:30:21.324Z</updated>
    
    <content type="html"><![CDATA[<p> SQL 基本语法总结，本文目前用于 Visual Studio 2015 平台的 SQLite3, 其他用法以后总结。</p>
 <a id="more"></a>
<h1 id="1-使用-Nuget-添加-SQLite-库"><a href="#1-使用-Nuget-添加-SQLite-库" class="headerlink" title="1. 使用 Nuget 添加 SQLite 库"></a>1. 使用 Nuget 添加 SQLite 库</h1><p>在 Visual Studio 2015 中，选择：工具 -&gt; NuGet 包管理器 -&gt; 管理解决方案的 NuGet 程序包</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-0a0e01e8d9e0ebe9.jpg" alt="NuGet 管理界面"></p>
<p>在此界面下检索「SQLite」, 根据需要选择安装其中一个 SQLite 库，最好是红框部分内容中，二选一。</p>
<p>之后在界面的右侧，选择需要安装到的项目，之后进行安装操作即可。</p>
<h1 id="2-常用策略"><a href="#2-常用策略" class="headerlink" title="2. 常用策略"></a>2. 常用策略</h1><h2 id="2-1-对异常进行捕获"><a href="#2-1-对异常进行捕获" class="headerlink" title="2.1 对异常进行捕获"></a>2.1 对异常进行捕获</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//将对数据库进行操作的语句放置在try中</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (Exception ex)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//对异常进行处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-2-事务及-SQLite-代码框架"><a href="#2-2-事务及-SQLite-代码框架" class="headerlink" title="2.2 事务及 SQLite 代码框架"></a>2.2 事务及 SQLite 代码框架</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//使用以下语句配合具体的SQL操作语句即可</div><div class="line">//注：不主动控制事务时，每次执行SQL指令即会重复开启新的事务，</div><div class="line">//会在SQL操作方面花费大量的时间。所以在进行大量插入、修改操作</div><div class="line">//时，主动开启事务会极大节省时间</div><div class="line">var conn = new SQLiteConnection("Data Source = </div><div class="line">           ./bitkyData.db; Version = 3; ");</div><div class="line">conn.Open();</div><div class="line">var trans = conn.BeginTransaction(); //开启事务</div><div class="line">var cmd = conn.CreateCommand();</div><div class="line">try</div><div class="line">&#123;</div><div class="line">    //通过操作cmd，使用具体的SQL操作语句</div><div class="line">&#125;</div><div class="line">catch (Exception)</div><div class="line">&#123;</div><div class="line">    trans.Rollback(); //事务回滚</div><div class="line">    //进行具体的异常处理</div><div class="line">&#125;</div><div class="line">trans.Commit();//事务提交</div><div class="line">conn.Close();//连接关闭</div></pre></td></tr></table></figure>
<h1 id="3-必备代码块"><a href="#3-必备代码块" class="headerlink" title="3. 必备代码块"></a>3. 必备代码块</h1><h2 id="3-1-必要初始化操作"><a href="#3-1-必要初始化操作" class="headerlink" title="3.1 必要初始化操作"></a>3.1 必要初始化操作</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//指定数据库的地址，以及SQLite版本号</span></div><div class="line">SQLiteConnection conn = <span class="keyword">new</span> SQLiteConnection(<span class="string">"Data Source = ./bitkyData.db; Version = 3; "</span>);</div></pre></td></tr></table></figure>
<h2 id="3-2-向表中插入指定的条目"><a href="#3-2-向表中插入指定的条目" class="headerlink" title="3.2 向表中插入指定的条目"></a>3.2 向表中插入指定的条目</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertData</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    conn.Open();</div><div class="line">    <span class="keyword">var</span> cmd = conn.CreateCommand();</div><div class="line">    cmd.CommandText = <span class="string">"INSERT INTO ElectrodeController(typeA,typeB,typeM) VALUES (1, 2, 3)"</span>;</div><div class="line">    cmd.ExecuteNonQuery();</div><div class="line">    conn.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-3-设置查询的条件，查询指定条目的内容"><a href="#3-3-设置查询的条件，查询指定条目的内容" class="headerlink" title="3.3 设置查询的条件，查询指定条目的内容"></a>3.3 设置查询的条件，查询指定条目的内容</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">static void selectData()</div><div class="line">&#123;</div><div class="line">    conn.Open();</div><div class="line">    var cmd = conn.CreateCommand();</div><div class="line">    cmd.CommandText = "SELECT * FROM</div><div class="line">    ElectrodeController where num &gt; 45";</div><div class="line">    var reader = cmd.ExecuteReader();//获取结果集</div><div class="line">    if (reader.HasRows)</div><div class="line">    &#123;</div><div class="line">        while (reader.Read())</div><div class="line">        &#123;</div><div class="line">            Debug.WriteLine("ID: " + reader.GetInt32(0));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    conn.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-4-获取数据表中条目的数量"><a href="#3-4-获取数据表中条目的数量" class="headerlink" title="3.4 获取数据表中条目的数量"></a>3.4 获取数据表中条目的数量</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getCount</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    conn.Open();</div><div class="line">    <span class="keyword">var</span> cmd = conn.CreateCommand();</div><div class="line">    cmd.CommandText = <span class="string">"SELECT COUNT(*) FROM ElectrodeController"</span>;</div><div class="line">    <span class="keyword">var</span> scalar = cmd.ExecuteScalar();\\获取结果集中第一行第一列的那个值</div><div class="line">    Debug.WriteLine(<span class="string">"count: "</span> + Convert.ToInt32(scalar));</div><div class="line">    conn.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><ol>
<li><a href="http://www.etwiki.cn/c-sharp/3018.html" target="_blank" rel="external">C# 查询 SQL 数据库表里共有多少条记录的两种方法</a></li>
<li><a href="http://blog.csdn.net/friendan/article/details/7342921" target="_blank" rel="external">C# 获取 SQL 2005 表中的记录总数</a></li>
<li><a href="http://blog.csdn.net/xiaohu_2012/article/details/16973025" target="_blank" rel="external">C# , SQLite 批量操作速度优化</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_4cf05f9a01015sat.html" target="_blank" rel="external">C# 操作 Dataset 数据集与 SQLite 数据库</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; SQL 基本语法总结，本文目前用于 Visual Studio 2015 平台的 SQLite3, 其他用法以后总结。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://bitky.cc/categories/C/"/>
    
    
      <category term="MySQL" scheme="http://bitky.cc/tags/MySQL/"/>
    
      <category term="CSharp" scheme="http://bitky.cc/tags/CSharp/"/>
    
      <category term="SQLite" scheme="http://bitky.cc/tags/SQLite/"/>
    
      <category term="SQL" scheme="http://bitky.cc/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 数据库的自动备份操作</title>
    <link href="http://bitky.cc/2016/09/12/mysql/"/>
    <id>http://bitky.cc/2016/09/12/mysql/</id>
    <published>2016-09-12T04:57:47.000Z</published>
    <updated>2017-04-09T06:29:22.858Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 数据库中，对指定表实现按天自动备份的功能。</p>
<a id="more"></a>
<h1 id="1-预先条件"><a href="#1-预先条件" class="headerlink" title="1. 预先条件"></a>1. 预先条件</h1><ul>
<li>已正确安装 MySQL 并可开机自动运行</li>
<li>已将 MySQL 的工具添加到系统的环境变量中。</li>
</ul>
<h1 id="2-操作方法"><a href="#2-操作方法" class="headerlink" title="2. 操作方法"></a>2. 操作方法</h1><p>新建批处理文件，其中内容为：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">rem *******************************Code Start *****************************</span></div><div class="line">@<span class="built_in">echo</span> off</div><div class="line">mysqldump -u "用户名" --password="密码" "数据库名" &gt; "保存文件绝对地址及保存的文件名"</div><div class="line">@<span class="built_in">echo</span> on</div><div class="line"><span class="comment">rem ******************************* Code End *****************************</span></div><div class="line">```  </div><div class="line"></div><div class="line">我所配置的 .bat 文件内容为：</div><div class="line"></div><div class="line">```<span class="built_in">cmd</span></div><div class="line"><span class="comment">rem *******************************Code Start *****************************</span></div><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> "Ymd=<span class="variable">%date:~,4%</span><span class="variable">%date:~5,2%</span><span class="variable">%date:~8,2%</span>"</div><div class="line">mysqldump -u root --password=lml manager &gt; C:\MySQLBackup\manager_<span class="variable">%Ymd%</span>.sql</div><div class="line">@<span class="built_in">echo</span> on</div><div class="line"><span class="comment">rem ******************************* Code End *****************************</span></div></pre></td></tr></table></figure>
<h1 id="3-将此-bat-文件添加到系统计划任务中"><a href="#3-将此-bat-文件添加到系统计划任务中" class="headerlink" title="3. 将此 .bat 文件添加到系统计划任务中"></a>3. 将此 .bat 文件添加到系统计划任务中</h1><p>打开 “控制面板” -&gt; “计划任务程序” -&gt; “创建基本任务”<br>可以设置每天固定时间运行一次该 .bat 文件，即可实现每天自动对 MySQL 数据库进行备份</p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><p><a href="http://www.cnblogs.com/liongis/archive/2013/03/12/2956573.html" target="_blank" rel="external">Windows中，MySQL 自动备份的几种方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL 数据库中，对指定表实现按天自动备份的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://bitky.cc/categories/C/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="MySQL" scheme="http://bitky.cc/tags/MySQL/"/>
    
      <category term="CSharp" scheme="http://bitky.cc/tags/CSharp/"/>
    
      <category term="计划任务" scheme="http://bitky.cc/tags/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用 OpenVPN 搭建虚拟专用网络</title>
    <link href="http://bitky.cc/2016/07/04/openvpn/"/>
    <id>http://bitky.cc/2016/07/04/openvpn/</id>
    <published>2016-07-04T04:57:47.000Z</published>
    <updated>2017-04-09T06:30:34.124Z</updated>
    
    <content type="html"><![CDATA[<p>OpenVPN 是一个用于创建虚拟专用网络加密通道的软件包，本文主要介绍 OpenVPN 的配置及使用方法</p>
<a id="more"></a>
<h1 id="1-OpenVPN-简介"><a href="#1-OpenVPN-简介" class="headerlink" title="1. OpenVPN 简介"></a>1. OpenVPN 简介</h1><p>OpenVPN 是一个用于创建虚拟专用网络加密通道的软件包，最早由 James Yonan 编写。OpenVPN 允许创建的 VPN 使用公开密钥、电子证书、或者用户名／密码来进行身份验证。它大量使用了 OpenSSL 加密库中的 SSLv3 / TLSv1 协议函数库。目前 OpenVPN 能在 Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X 与 Microsoft Windows 以及 Android 和 iOS 上运行，并包含了许多安全性的功能。它并不是一个基于 Web 的 VPN 软件，也不与 IPsec 及其他 VPN 软件包兼容。</p>
<h2 id="1-1-OpenVPN-的配置原理"><a href="#1-1-OpenVPN-的配置原理" class="headerlink" title="1.1 OpenVPN 的配置原理"></a>1.1 OpenVPN 的配置原理</h2><p>OpenVPN 的配置工作主要分为如下两步：</p>
<ul>
<li><p>第一步，创建加密证书和私钥，其中包括服务器端和客户端都要用到的核心 CA 证书和私钥，服务器端自身的加密证书(即公钥)和私钥，以及每个客户端对应的加密证书和私钥。</p>
</li>
<li><p>第二步，为服务器和客户端编写对应的配置文件，然后将其与第一步中生成的相应证书、私钥放在 OpenVPN 安装目录的 config 文件夹下。</p>
</li>
</ul>
<p>OpenVPN 支持基于加密证书的双向认证。在 OpenVPN 中，不管是服务器还是客户端，所有的证书和私钥都需要由服务器端生成，客户端要先获得服务器端分配给它的加密证书和密钥才能成功连接。这与使用网上银行有些类似，大多数银行网站都会要求你先下载并安装一个数字证书，才允许你进行网上付款或其他操作。</p>
<h2 id="1-2-OpenVPN-的下载"><a href="#1-2-OpenVPN-的下载" class="headerlink" title="1.2 OpenVPN 的下载"></a>1.2 OpenVPN 的下载</h2><p>在 OpenVPN 的官网上，打开如下网页：</p>
<p><a href="https://openvpn.net/index.php/download/community-downloads.html" target="_blank" rel="external">https://openvpn.net/index.php/download/community-downloads.html</a></p>
<p>使用图片所示内容最后的下载链接，可下载到适用于 Windows Vista 及之后版本 Windows 系统的安装文件。本文以 OpenVPN 2.3.11 版本为例简要介绍 OpenVPN 的安装、配置、使用方法。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-204de9669fcbef05.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OpenVPN 下载页面"></p>
<p>#2. OpenVPN 服务器端的配置</p>
<h2 id="2-1-OpenVPN-的安装"><a href="#2-1-OpenVPN-的安装" class="headerlink" title="2.1 OpenVPN 的安装"></a>2.1 OpenVPN 的安装</h2><p>打开 OpenVPN 的安装程序进行安装。在安装的过程中，要求选择安装内容，默认未选中 easy-rsa 「加密证书生成程序」，因此，我们必须手动勾选未选中的两个选项，之后如若询问是否安装 TAP-Win32 驱动程序，确认安装即可。</p>
<h2 id="2-2-创建加密证书和私钥"><a href="#2-2-创建加密证书和私钥" class="headerlink" title="2.2 创建加密证书和私钥"></a>2.2 创建加密证书和私钥</h2><p>1、使用文本编辑器 <strong>以管理员权限</strong> 打开并修改 OpenVPN 服务器端的 vars.bat.sample 文件「客户端的无需做任何修改」。vars.bat.sample 文件位于：</p>
<pre><code>OpenVPN\easy-rsa\vars.bat.sample
</code></pre><p>文本内容部分摘录如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">set HOME=%ProgramFiles%\OpenVPN\easy-rsa </div><div class="line"><span class="comment">//变量HOME表示easy-rsa文件夹的路径</span></div><div class="line"></div><div class="line">set KEY_CONFIG=openssl-<span class="number">1.0</span>.0.cnf </div><div class="line"><span class="comment">//变量KEY_SIZE表示生成的私钥大小，一般填写为1024或2048，默认为1024位，可根据自己的需要进行修改。</span></div><div class="line"></div><div class="line"><span class="comment">//由于稍后给客户端生成对应加密证书和私钥时，程序会要求我们输入一些注册信息。建议修改相关变量的默认值，这样在稍后生成客户端证书的时候，如果该信息项不输入就会采用默认值。</span></div><div class="line">set KEY_COUNTRY=CN <span class="comment">//国家(注：必须为两位字符)</span></div><div class="line">set KEY_PROVINCE=GuangXi <span class="comment">//省份</span></div><div class="line">set KEY_CITY=GuiLin <span class="comment">//城市</span></div><div class="line">set KEY_ORG=GUET <span class="comment">//机构</span></div><div class="line">set KEY_EMAIL=***@<span class="number">126</span>.com <span class="comment">//邮箱</span></div><div class="line">set KEY_CN=changeme <span class="comment">//证书的通用名称(Common Name),相当于帐户名 (eg, your name or your server's hostname)</span></div><div class="line">set KEY_NAME=changeme <span class="comment">//用户姓名</span></div><div class="line">set KEY_OU=changeme <span class="comment">//部门名 Organizational Unit Name (eg, section)</span></div><div class="line">set PKCS11_MODULE_PATH=changeme</div><div class="line">set PKCS11_PIN=<span class="number">1234</span></div></pre></td></tr></table></figure>
<p>按照如上所述进行修改，修改完毕后，保存，接下来进行配置操作</p>
<h2 id="2-3-使用控制台创建服务端和客户端证书"><a href="#2-3-使用控制台创建服务端和客户端证书" class="headerlink" title="2.3 使用控制台创建服务端和客户端证书"></a>2.3 使用控制台创建服务端和客户端证书</h2><p>在作为服务器端的电脑上，<strong>以管理员权限</strong> 打开 cmd , 并进入到</p>
<pre><code>OpenVPN\easy-rsa
</code></pre><p>然后依次执行如下命令：</p>
<pre><code>1. init-config「初始化配置，将 vars.bat.sample 文件的内容复制到 vars.bat。实际上，你也可以直接双击执行 easy-rsa 目录下的 init-config.bat 文件来代替这一步。」

2. vars「设置相应的局部环境变量，就是我们在 vars.bat.sample 文件中设置的内容」

3. clean-all「相关设置和清理工作」
</code></pre><p>命令执行结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Microsoft Windows [版本 <span class="number">10</span>.<span class="number">0</span>.<span class="number">10586</span>]</div><div class="line">(c) <span class="number">2015</span> Microsoft Corporation。保留所有权利。</div><div class="line"><span class="function">C:\<span class="title">Windows</span>\<span class="title">system32</span>&gt;<span class="title">cd</span> <span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span></span></div><div class="line"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">init</span>-<span class="title">config</span></div><div class="line"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">copy</span> <span class="title">vars.bat.sample</span> <span class="title">vars.bat</span></div><div class="line">已复制         1 个文件。</div><div class="line"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">vars</span></div><div class="line"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">clean</span>-<span class="title">all</span></div><div class="line">系统找不到指定的文件。   //有时候会出现此句提示，可以被忽略</div><div class="line">已复制         1 个文件。</div><div class="line">已复制         1 个文件。</div></pre></td></tr></table></figure>
<p>接下来执行如下命令：</p>
<pre><code>4. build-ca「创建 CA 根证书及 key」
</code></pre><p>此处可修改此前预先设置的注册信息。</p>
<pre><code>5. build-key-server server「创建服务端证书及 key，其中『server』可以自由设定」
</code></pre><p>命令执行结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">OpenVPN</span>\<span class="title">easy</span>-<span class="title">rsa</span>&gt;<span class="title">build</span>-<span class="title">key</span>-<span class="title">server</span> <span class="title">server</span></span></div><div class="line"><span class="title">Common</span> <span class="title">Name</span> (<span class="title">eg</span>, <span class="title">your</span> <span class="title">name</span> <span class="title">or</span> <span class="title">your</span> <span class="title">server</span>'<span class="title">s</span> <span class="title">hostname</span>) [<span class="title">changeme</span>]:此处输入账户名</div><div class="line"><span class="title">A</span> <span class="title">challenge</span> <span class="title">password</span> []:此处输入密码</div><div class="line"></div><div class="line"><span class="title">Certificate</span> <span class="title">is</span> <span class="title">to</span> <span class="title">be</span> <span class="title">certified</span> <span class="title">until</span> <span class="title">Jul</span>  2 12:07:01 2026 <span class="title">GMT</span> (3650 <span class="title">days</span>)</div><div class="line"><span class="title">Sign</span> <span class="title">the</span> <span class="title">certificate</span>? [<span class="title">y</span>/<span class="title">n</span>]:<span class="title">y</span></div><div class="line">1 <span class="title">out</span> <span class="title">of</span> 1 <span class="title">certificate</span> <span class="title">requests</span> <span class="title">certified</span>, <span class="title">commit</span>? [<span class="title">y</span>/<span class="title">n</span>]<span class="title">y</span></div></pre></td></tr></table></figure>
<p>命令中的参数 <code>server</code> 指的是生成的证书文件名称，你可以按照自己的需要进行修改，不过后面的 <code>Common Name</code> 也应保持一致。最后程序会询问你是否注册并提交证书，两次均输入 y 即可。</p>
<pre><code>6. build-dh「创建迪菲·赫尔曼密钥，生成 1024 bit 的key」
</code></pre><p>迪菲·赫尔曼密钥交换「Diffie–Hellman key exchange , 简称『D–H』」是一种安全协议。它可以让双方在完全没有对方任何预先信息的条件下通过不安全信道创建起一个密钥。这个密钥可以在后续的通讯中作为对称密钥来加密通讯内容。</p>
<pre><code>7. build-key client「创建客户端证书及 key , 其中 `client` 可以自由设定」
</code></pre><p>此处如同第 5 步服务器部分的设置。</p>
<pre><code>8. openvpn --genkey --secret keys/ta.key「可选操作，生成 ta.key」
</code></pre><p>这一步是可选操作，生成的 ta.key 主要用于防御 DoS、UDP 淹没等恶意攻击。命令中的第 3 个参数 keys / ta.key 表示生成的文件路径「含文件名」。</p>
<p>创建完证书后，我们会发现 easy-rsa 目录下多了一个 keys 文件夹。但如果参数填写不恰当，可能生成一些 0 字节的 crt 文件，那么就得重新生成证书。生成结束后，可按照如下表格分别将文件拷贝到客户端和服务端的 config 目录中。</p>
<p>服务器端 config 目录需要的文件包括：</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th style="text-align:left">位置</th>
<th style="text-align:left">用途</th>
<th style="text-align:center">保密</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>ca.crt</td>
<td style="text-align:left">server + all clients</td>
<td style="text-align:left">Root CA certificate</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">核心 CA 证书</td>
</tr>
<tr>
<td>ca.key</td>
<td style="text-align:left">key signing machine only</td>
<td style="text-align:left">Root CA key</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">核心 CA 私钥</td>
</tr>
<tr>
<td>dh1024.pem</td>
<td style="text-align:left">server only</td>
<td style="text-align:left">Diffie Hellman parameters</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">如果最初的变量 KEY_SIZE 设为 2048，这里就是 dh2048.pem</td>
</tr>
<tr>
<td>server.crt</td>
<td style="text-align:left">server only</td>
<td style="text-align:left">Server Certificate</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">名称 server 根据个人设置有所不同</td>
</tr>
<tr>
<td>server.key</td>
<td style="text-align:left">server only</td>
<td style="text-align:left">Server Key</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">名称 server 根据个人设置有所不同</td>
</tr>
<tr>
<td>ta.key</td>
<td style="text-align:left">server + all clients</td>
<td style="text-align:left">防御 DoS、UDP 淹没等恶意攻击</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">名称也可自行设置，如果不需要防御攻击，可以不创建或复制此文件</td>
</tr>
</tbody>
</table>
<hr>
<p>客户端 config 目录需要的文件包括：</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th style="text-align:left">位置</th>
<th style="text-align:left">用途</th>
<th style="text-align:center">保密</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>ca.crt</td>
<td style="text-align:left">server + all clients</td>
<td style="text-align:left">Root CA certificate</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">核心 CA 证书</td>
</tr>
<tr>
<td>client.crt</td>
<td style="text-align:left">client only</td>
<td style="text-align:left">Client Certificate</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">名称 client 根据个人设置有所不同</td>
</tr>
<tr>
<td>client1.key</td>
<td style="text-align:left">client only</td>
<td style="text-align:left">Client Key</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">名称 client 根据个人设置有所不同</td>
</tr>
<tr>
<td>ta.key</td>
<td style="text-align:left">server + all clients</td>
<td style="text-align:left">防御 DoS、UDP 淹没等恶意攻击</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">名称也可自行设置，如果不需要防御攻击，可以不创建或复制此文件</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>重要提醒</strong>：以上命令都在同一 cmd 中执行，如果你以后需要打开新窗口来执行命令(比如创建新的客户端证书)：你不需要再执行 init-config 命令，除非你再次改动了 vars.bat.sample 文件；每一次打开新窗口时都需要先执行 vars 命令，后面才能执行其他命令。</p>
<hr>
<p><strong>附</strong>：若要撤销 client2 证书，则执行以下命令：</p>
<pre><code>vars
revoke-full client2
</code></pre><p>此时得到 crl.pem 文件，之后在服务端执行如下命令：</p>
<pre><code>crl-verify crl.pem
</code></pre><h1 id="3-配置文件的修改与部署"><a href="#3-配置文件的修改与部署" class="headerlink" title="3. 配置文件的修改与部署"></a>3. 配置文件的修改与部署</h1><p>上面已创建 OpenVPN 配置所需要的各种证书和私钥，现在可以为服务器和客户端设置对应的配置文件。</p>
<p>在 OpenVPN 的安装目录的 sample-config 文件夹中存放有 3 个示例模板文件 : server.ovpn、client.ovpn、sample.ovpn 。其中：</p>
<ul>
<li>server.ovpn 是服务器的配置模板</li>
<li>client.ovpn 是客户端的配置模板</li>
<li>sample.ovpn 也可用作客户端配置模板，不过配置比较简单，不够全面。</li>
</ul>
<p>按照官方的说法 , client.ovpn 可用于连接具有多个客户端的服务器端。</p>
<p>复制 server.ovpn 到服务器的 config 目录 , client.ovpn 到客户端的 config 目录，并在此基础上进行修改。在 OpenVPN 的配置文件中，前面带「#」或「;」的表示注释内容。</p>
<h2 id="3-1-配置文件的简单使用"><a href="#3-1-配置文件的简单使用" class="headerlink" title="3.1  配置文件的简单使用"></a>3.1  配置文件的简单使用</h2><ul>
<li>修改客户端的 client.ovpn 的 remote 项，让它指向服务端外部 IP 地址，格式例如 : remote x.x.x.x 1194 , 1194 是服务端定义的端口，这个可以通过服务端的配置文件修改，服务端和客户端端口必须匹配。</li>
<li>证书：在第 92, 93 行的「大概」位置，修改指定的 crt 和 key 文件，与之生成的证书文件名匹配。</li>
</ul>
<h2 id="3-2-编辑服务器端配置文件"><a href="#3-2-编辑服务器端配置文件" class="headerlink" title="3.2 编辑服务器端配置文件"></a>3.2 编辑服务器端配置文件</h2><p>server.ovpn 中所有用到的命令如下 : </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">local 192.168.0.2     #指定监听的本机 IP「因为有些计算机具备多个IP地址」，该命令是可选的，默认监听所有 IP 地址。</div><div class="line">port 1194             #指定监听的本机端口号</div><div class="line">proto udp             #指定采用的传输协议，可以选择 tcp 或 udp</div><div class="line">dev tun               #指定创建的通信隧道类型，可选 tun 或 tap</div><div class="line">ca ca.crt             #指定 CA 证书的文件路径</div><div class="line">cert server.crt       #指定服务器端的证书文件路径</div><div class="line">key server.key    #指定服务器端的私钥文件路径</div><div class="line">dh dh1024.pem         #指定迪菲赫尔曼参数的文件路径</div><div class="line">server 10.0.0.0 255.255.255.0   #指定虚拟局域网占用的 IP 地址段和子网掩码，此处配置的服务器自身占用 10.0.0.1。</div><div class="line">ifconfig-pool-persist ipp.txt   #服务器自动给客户端分配 IP 后，客户端下次连接时，仍然采用上次的 IP 地址(第一次分配的IP保存在 ipp.txt中，下一次分配其中保存的 IP)。</div><div class="line">tls-auth ta.key 0     #开启 TLS，使用 ta.key 防御攻击。服务器端的第二个参数值为 0，客户端的为 1。</div><div class="line">keepalive 10 120      #每 10 秒 ping 一次，连接超时时间设为 120 秒。</div><div class="line">comp-lzo              #开启 VPN 连接压缩，如果服务器端开启，客户端也必须开启</div><div class="line">client-to-client      #允许客户端与客户端相连接，默认情况下客户端只能与服务器相连接</div><div class="line">persist-key</div><div class="line">persist-tun           #持久化选项可以尽量避免访问在重启时由于用户权限降低而无法访问的某些资源。</div><div class="line">status openvpn-status.log    #指定记录 OpenVPN 状态的日志文件路径</div><div class="line">verb 3                #指定日志文件的记录详细级别，可选 0 - 9，等级越高日志内容越详细</div></pre></td></tr></table></figure>
<h2 id="3-3-编辑客户端配置文件"><a href="#3-3-编辑客户端配置文件" class="headerlink" title="3.3 编辑客户端配置文件"></a>3.3 编辑客户端配置文件</h2><p>client.ovpn 中所有用到的命令如下 : </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">client         #指定当前 VPN 是客户端</div><div class="line">dev tun        #必须与服务器端的保持一致</div><div class="line">proto udp      #必须与服务器端的保持一致</div><div class="line">remote 192.168.0.2 1194      //指定连接的远程服务器的实际 IP 地址和端口号</div><div class="line">resolv-retry infinite    #断线自动重新连接，在网络不稳定的情况下「例如：笔记本电脑无线网络」非常有用。</div><div class="line">nobind         #不绑定特定的本地端口号</div><div class="line">persist-key</div><div class="line">persist-tun</div><div class="line">ca ca.crt      #指定 CA 证书的文件路径</div><div class="line">cert client.crt       //指定当前客户端的证书文件路径</div><div class="line">key client.key    //指定当前客户端的私钥文件路径</div><div class="line">ns-cert-type server      #指定采用服务器校验方式</div><div class="line">tls-auth ta.key 1     //如果服务器设置了防御 DoS 等攻击的 ta.key，则必须每个客户端开启；如果未设置，则注释掉这一行；</div><div class="line">comp-lzo              #与服务器保持一致</div><div class="line">verb 3                #指定日志文件的记录详细级别，可选 0 - 9，等级越高日志内容越详细</div></pre></td></tr></table></figure>
<h1 id="4-OpenVPN-的启用"><a href="#4-OpenVPN-的启用" class="headerlink" title="4. OpenVPN 的启用"></a>4. OpenVPN 的启用</h1><p>生成、修改、保存完毕后，我们可以在服务器端及客户端分别配置如下内容：</p>
<p>在服务器端 OpenVPN 安装目录的 config 文件夹下应包含如下文件：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-f54bdaf3806f43d3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="服务器端config文件夹"></p>
<p>在客户端 OpenVPN 安装目录的 config 文件夹下应包含如下文件：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-25f2ee1b7a44fc85?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="客户端config文件夹"></p>
<h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/OpenVPN" target="_blank" rel="external">OpenVPN 维基百科</a></li>
<li><a href="https://openvpn.net/index.php/access-server/overview.html" target="_blank" rel="external">OpenVPN 官方网站</a></li>
<li><a href="http://blog.csdn.net/joyous/article/details/38048425" target="_blank" rel="external">FreeBSD 平台 OpenVPN 的安装、配置客户端和服务端</a></li>
<li><a href="http://www.365mini.com/page/14.htm" target="_blank" rel="external">OpenVPN 下载、安装、配置及使用详解</a></li>
<li><a href="http://blog.csdn.net/joyous/article/details/8034132" target="_blank" rel="external">OpenVPN 安装、配置客户端和服务端，以及 OpenVPN 的使用「Windows 平台」</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenVPN 是一个用于创建虚拟专用网络加密通道的软件包，本文主要介绍 OpenVPN 的配置及使用方法&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="OpenVPN" scheme="http://bitky.cc/tags/OpenVPN/"/>
    
      <category term="VPN" scheme="http://bitky.cc/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 第三方库的导入「以 Volley 为例」</title>
    <link href="http://bitky.cc/2016/06/11/android/"/>
    <id>http://bitky.cc/2016/06/11/android/</id>
    <published>2016-06-11T04:57:47.000Z</published>
    <updated>2017-04-09T06:31:19.526Z</updated>
    
    <content type="html"><![CDATA[<p>传统风格以及 Gradle 的第三方开源库，导入 Android Studio 工程的方法总结。</p>
<blockquote>
<p><strong>「注」</strong> 本文可能已过时。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-获取-Volley"><a href="#1-获取-Volley" class="headerlink" title="1. 获取 Volley"></a>1. 获取 Volley</h1><p>在 Git 中使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://android.googlesource.com/platform/frameworks/volley</div></pre></td></tr></table></figure>
<h1 id="2-传统风格库源码打包为-Jar-文件"><a href="#2-传统风格库源码打包为-Jar-文件" class="headerlink" title="2. 传统风格库源码打包为 Jar 文件"></a>2. 传统风格库源码打包为 Jar 文件</h1><h2 id="2-1-配置-Ant-环境变量"><a href="#2-1-配置-Ant-环境变量" class="headerlink" title="2.1 配置 Ant 环境变量"></a>2.1 配置 Ant 环境变量</h2><p>Ant 是一个将软件编译、测试、部署等步骤联系在一起加以自动化的一个工具，大多用于 Java 环境中的软件开发。在实际软件开发中，有很多地方可以用到 Ant 。以下 Ant 的配置方法：</p>
<ol>
<li>首先登录 Ant 的官方网站 <a href="http://ant.apache.org/bindownload.cgi" target="_blank" rel="external">http://ant.apache.org/bindownload.cgi</a> , 下载 apache-ant-X.X.X-bin.zip 。这是 Ant 要使用的类库。</li>
<li>配置 Windows 的环境变量，将 <code>%ANT_HOME%/bin</code> 以及 <code>%ANT_HOME%/lib</code> 添加至 path 环境变量中</li>
<li>在命令提示符中输入 <code>ant -version</code>，如果正常输出，说明 Ant 配置成功。</li>
</ol>
<h2 id="2-2-配置-Android-SDK-环境变量"><a href="#2-2-配置-Android-SDK-环境变量" class="headerlink" title="2.2 配置 Android SDK 环境变量"></a>2.2 配置 Android SDK 环境变量</h2><ol>
<li>在 path 系统环境变量中添加 <code>&quot;;%ANDROID_HOME%\platform-tools&quot;</code> 。 </li>
<li>在命令提示符中输入 adb, 如果下方出现： <code>Android Debug Bridge version ...</code> 等多行文字，说明配置成功。</li>
</ol>
<h2 id="2-3-打包为-Jar-文件"><a href="#2-3-打包为-Jar-文件" class="headerlink" title="2.3 打包为 Jar 文件"></a>2.3 打包为 Jar 文件</h2><p>在第三方库源码工程目录下，使用 cmd 执行如下命令：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android update project -p</div><div class="line">ant jar</div></pre></td></tr></table></figure>
<p>即可成功打包为 Jar 文件，之后直接在 Android Studio 项目中使用 <code>compile files(&#39;libs/volley.jar&#39;)</code> 来导入 Jar 。</p>
<h1 id="3-Gradle-风格第三方库导入工程"><a href="#3-Gradle-风格第三方库导入工程" class="headerlink" title="3. Gradle 风格第三方库导入工程"></a>3. Gradle 风格第三方库导入工程</h1><h2 id="3-1-直接将开源项目导入到本地工程中"><a href="#3-1-直接将开源项目导入到本地工程中" class="headerlink" title="3.1 直接将开源项目导入到本地工程中"></a>3.1 直接将开源项目导入到本地工程中</h2><p>使用经典的方式来设置 Volley, 将源码作为一个 Module 导入。<br>在 Android Studio 中，在打开项目的情况下，选择 File &gt; New Module , 然后选择 Import Existing Project 。选择你下载的源码的所在目录然后确认。一个名为 Volley 的文件夹将出现在你的项目结构中。Android Studio 会自动的更新 settings.gradle 文件以包含 Volley module , 因此你只需添加你的依赖：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':volley'</span>)</div></pre></td></tr></table></figure>
<p>##3.2 把开源项目打包为 Jar 文件</p>
<p>Gradle 工具位于如下位置：</p>
<ol>
<li><android studio="">\gradle\gradle-2.2.1\bin</android></li>
<li>C:\Users\<user>.gradle\wrapper\dists\gradle … …</user></li>
</ol>
<p>将 Gradle 工具的 bin 目录添加到 Path 中，在第三方库目录下，使用 cmd 执行如下命令：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle build</div></pre></td></tr></table></figure>
<p>编译完成后在Volley目录下会生成一个 <code>build\intermediates\bundles\release</code> 目录，Jar 文件就在里面，名字为 classes.jar，重命名下就可以了。<strong>注：此方法可能会失败</strong></p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><ol>
<li><a href="http://blog.csdn.net/houyu_1983/article/details/9129031" target="_blank" rel="external">Android 使用 Ant 编译 APK</a></li>
<li><a href="http://blog.csdn.net/nomousewch/article/details/18983351" target="_blank" rel="external"> Windows 环境下搭建 Android 开发环境「完整」</a></li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0526/2934.html" target="_blank" rel="external">网络请求库 Volley 详解</a></li>
<li><a href="http://blog.csdn.net/taowenyin/article/details/43935245" target="_blank" rel="external">最新 Volley 框架的 Jar 文件生成</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传统风格以及 Gradle 的第三方开源库，导入 Android Studio 工程的方法总结。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;「注」&lt;/strong&gt; 本文可能已过时。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://bitky.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Android" scheme="http://bitky.cc/tags/Android/"/>
    
      <category term="Ant" scheme="http://bitky.cc/tags/Ant/"/>
    
  </entry>
  
  <entry>
    <title>Qt 程序在 Windows 下的发布</title>
    <link href="http://bitky.cc/2016/06/04/qt/"/>
    <id>http://bitky.cc/2016/06/04/qt/</id>
    <published>2016-06-04T04:57:47.000Z</published>
    <updated>2017-04-09T06:33:43.259Z</updated>
    
    <content type="html"><![CDATA[<p>本文讨论在 Windows 平台下编译成功的 Qt 程序，如何在未配置 Qt 开发环境的 Windows 平台下独立运行的方法。</p>
<a id="more"></a>
<p>经过验证发现，在 Ubuntu 平台下编译成功的程序可在未安装 Qt 开发环境下的 Ubuntu16.04 中运行，所以，本文仅讨论，在 Windows 平台下编译成功的 Qt 程序，在未配置 Qt 开发环境的 Windows 平台下独立运行的方法。</p>
<h1 id="1-编译模式选择"><a href="#1-编译模式选择" class="headerlink" title="1. 编译模式选择"></a>1. 编译模式选择</h1><p>如若想要发布程序，在 IDE 中编译一定要选择 <code>release</code> 而不是 <code>debug</code>，编译成 release 版本相比于 debug 版本，程序体积「可执行文件和 dll 文件」大大减小；</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-e70ab1436031e96a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译模式选择"></p>
<h1 id="2-集成所需-dll-文件及其他依赖库"><a href="#2-集成所需-dll-文件及其他依赖库" class="headerlink" title="2. 集成所需 dll 文件及其他依赖库"></a>2. 集成所需 dll 文件及其他依赖库</h1><p>编译为 release 版本之后，找到生成的目录，其中只有 exe 扩展名的可执行文件是有用的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-4914327e2b68e1c7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译生成目录"></p>
<p>直接打开可执行文件，会提示找不到 dll 文件，解决方法如下：</p>
<h2 id="2-1-使用-Qt-自带的-windeployqt-exe-寻找依赖文件"><a href="#2-1-使用-Qt-自带的-windeployqt-exe-寻找依赖文件" class="headerlink" title="2.1 使用 Qt 自带的 windeployqt.exe 寻找依赖文件"></a>2.1 使用 Qt 自带的 windeployqt.exe 寻找依赖文件</h2><p>在 cmd 中，运行如下命令：</p>
<pre><code>&lt;Qt目录&gt;\Qt5.5.1\5.5\mingw492_32\bin\windeployqt.exe   &lt;*.exe&gt;
</code></pre><p>程序会找到该可执行程序所需的所有依赖文件，并集成进该可执行文件所在的目录：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-7739077a505e4702.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" windeployqt 寻找依赖"></p>
<p>有时程序会提示找不到所需的 gcc.exe，只需要将随 Qt 安装的 mingw 的 bin 目录添加到系统的环境变量中即可。之后执行可执行文件即可成功运行。</p>
<h2 id="2-2-手动集成所需的依赖文件"><a href="#2-2-手动集成所需的依赖文件" class="headerlink" title="2.2 手动集成所需的依赖文件"></a>2.2 手动集成所需的依赖文件</h2><p>这里，我们可以用 Process Explore 来获取所依赖的 dll 文件「Dependency Walker软件也是不错的选择」</p>
<p>打开 procexp.exe，选择菜单  -&gt; View -&gt; Lower Pane View -&gt;DLLs 勾选此选项，显示 dll 窗口。</p>
<p>在 Qt Creater 中，调试运行要发布的程序，在 Process Explore 中，找到该 exe 文件并选中，在下面就看到依赖的 dll 了。</p>
<p><strong>Process Explore寻找依赖</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-6783734efb183a1f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Process Explore寻找依赖"></p>
<p><strong>Dependency Walker寻找依赖</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-aed9be7ec425b998.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dependency Walker寻找依赖"></p>
<p>系统目录下的，一般不用关心，按 Path 排序，寻找 Qt 目录及 mingw 目录下的 dll 文件，将这些 dll 拷贝至发布程序目录下。</p>
<p>以 mingw 版 Qt 为例「VS版本安装目录有些许不同」，dll 文件在 Qt 安装目录下：</p>
<pre><code>&lt;Qt安装目录&gt;\Qt5.5.1\5.5\mingw492_32\bin
</code></pre><p>找到所有所需的 dll 文件，复制到要发布程序的目录下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-10484e100e40ee3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Qt运行目录"></p>
<p>例如，本程序需要如下依赖：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-dba69eaa834ea797.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="该程序所需依赖"></p>
<h1 id="3-打包为单个可执行文件"><a href="#3-打包为单个可执行文件" class="headerlink" title="3. 打包为单个可执行文件"></a>3. 打包为单个可执行文件</h1><p>打包工具，这里选用 Enigma Virtual Box，运行软件，选择发布程序的可执行文件路径以及生成文件的路径，左下角的“添加”按钮添加所有的 dll 文件，不包含刚才选择的 exe 文件。点击右下角的「文件选项」，选中「启用文件虚拟化」以及「压缩文件」，如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1555570-6d3b68fb05ddee95.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Enigma Virtual Box的使用"></p>
<p>最后点击右下角的“执行封包”，生成的 exe 文件的容量小了很多，并且这是一个纯粹的「绿色软件」，直接复制就能在任何存储介质上运行了。</p>
<h1 id="4-Qt5-主要依赖链接库说明"><a href="#4-Qt5-主要依赖链接库说明" class="headerlink" title="4. Qt5 主要依赖链接库说明"></a>4. Qt5 主要依赖链接库说明</h1><h2 id="4-1-Qt-模块库"><a href="#4-1-Qt-模块库" class="headerlink" title="4.1 Qt 模块库"></a>4.1 Qt 模块库</h2><ul>
<li>Qt5Core.dll      #QT核心库</li>
<li>Qt5Gui.dll       #QT Gui库</li>
<li>Qt5Widgets.dll   #QT Widgets库，QT 5中GUI程序基本都需要此dll</li>
<li>还有其他程序用到的Qt5XXX.dll</li>
</ul>
<h2 id="4-2-ICU-依赖库「International-Component-for-Unicode，Unicode工具」"><a href="#4-2-ICU-依赖库「International-Component-for-Unicode，Unicode工具」" class="headerlink" title="4.2 ICU 依赖库「International Component for Unicode，Unicode工具」"></a>4.2 ICU 依赖库「International Component for Unicode，Unicode工具」</h2><ul>
<li>icudt51.dll     </li>
<li>icuin51.dll    </li>
<li>icuuc51.dll   </li>
</ul>
<hr>
<h2 id="4-3-Qt-插件库「新增库，路径必须正确」"><a href="#4-3-Qt-插件库「新增库，路径必须正确」" class="headerlink" title="4.3 Qt 插件库「新增库，路径必须正确」"></a>4.3 Qt 插件库「新增库，路径必须正确」</h2><p>根据不同的程序，需要不同的插件库。例如 <code>QT_DIR/plugins/*/*.dll</code>，需要将 <code>platforms/*.dll</code> , <code>accessible/*.dll</code> 的文件结构保留，放在你所编译的程序所在目录，例如：</p>
<pre><code>plugins/platforms/qwindows.dll
plugins/accessible/qtaccessiblewidgets.dll
</code></pre><hr>
<h2 id="4-4-EGL-依赖库，为-OpenGL-OpenGLes-提供接口"><a href="#4-4-EGL-依赖库，为-OpenGL-OpenGLes-提供接口" class="headerlink" title="4.4 EGL 依赖库，为 OpenGL, OpenGLes 提供接口"></a>4.4 EGL 依赖库，为 OpenGL, OpenGLes 提供接口</h2><ul>
<li>libEGL.dll</li>
<li>libGLESv2.dll</li>
</ul>
<hr>
<h2 id="4-5-mingw-依赖库「msvc-编译则无需这些库」"><a href="#4-5-mingw-依赖库「msvc-编译则无需这些库」" class="headerlink" title="4.5 mingw 依赖库「msvc 编译则无需这些库」"></a>4.5 mingw 依赖库「msvc 编译则无需这些库」</h2><ul>
<li>libgcc_s_dw2-1.dll</li>
<li>libstdc++-6.dll</li>
<li>libwinpthread-1.dll</li>
</ul>
<h2 id="4-6-VC-运行库「mingw-编译则无需这些库」"><a href="#4-6-VC-运行库「mingw-编译则无需这些库」" class="headerlink" title="4.6 VC 运行库「mingw 编译则无需这些库」"></a>4.6 VC 运行库「mingw 编译则无需这些库」</h2><ul>
<li>msvcr110.dll「对应VS2012」</li>
<li>msvcp110.dll</li>
</ul>
<h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><ol>
<li><a href="http://blog.sina.com.cn/s/blog_66cd08930102w74s.html" target="_blank" rel="external">Qt 5.5 程序打包发布以及依赖</a></li>
<li><a href="http://blog.chinaunix.net/uid-24641004-id-3427565.html" target="_blank" rel="external">Qt 在 Windows 上发布之所需运行库「一」</a></li>
<li><a href="http://www.qtcn.org/bbs/apps.php?q=diary&amp;a=detail&amp;did=1336&amp;uid=123401" target="_blank" rel="external">将 Qt 动态链接生成的 exe 及依赖 dll 打包方法</a></li>
<li><a href="http://www.51hei.com/mcu/3195.html" target="_blank" rel="external">Qt 5 编译 &amp; 打包依赖 dll 发布</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讨论在 Windows 平台下编译成功的 Qt 程序，如何在未配置 Qt 开发环境的 Windows 平台下独立运行的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="C++" scheme="http://bitky.cc/tags/C/"/>
    
      <category term="QT" scheme="http://bitky.cc/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 3 基本配置教程</title>
    <link href="http://bitky.cc/2016/04/15/sublime/"/>
    <id>http://bitky.cc/2016/04/15/sublime/</id>
    <published>2016-04-15T04:57:47.000Z</published>
    <updated>2017-04-09T06:34:13.207Z</updated>
    
    <content type="html"><![CDATA[<p>以下链接是一篇很好的 Sublime Text 中文教程+配置教程</p>
<a id="more"></a>
<blockquote>
<p><a href="http://lucida.me/blog/sublime-text-complete-guide/" target="_blank" rel="external">http://lucida.me/blog/sublime-text-complete-guide/</a></p>
</blockquote>
<h1 id="1-修改-Sublime-Text-的默认配置文件位置"><a href="#1-修改-Sublime-Text-的默认配置文件位置" class="headerlink" title="1. 修改 Sublime Text 的默认配置文件位置"></a>1. 修改 Sublime Text 的默认配置文件位置</h1><p>默认情况下安装完 Sublime Text 3 , 在第一次运行的时候 , Sublime Text 3 会在 %appdata% 目录下生成一个 Sublime Text 3 的文件夹，用于存放配置文件，以及后面安装的各种插件；为便于设置完后打包，建议将配置文件位置改到安装目录下。</p>
<p>安装完 Sublime Text 3 后，不要直接运行找到 Sublime Text 3 的安装目录，并在该目录下新建 Data 文件夹(注意大小写)。如果已经运行了，请先在地址栏输入 %appdata% 然后删除该目录下的 Sublime Text 3 文件夹。完成这一步之后再打开 Sublime Text 3 所有的配置文件都会被生成在 Data 文件夹中了。</p>
<blockquote>
<p><a href="http://jingyan.baidu.com/article/6f2f55a15c89cab5b93e6cfb.html" target="_blank" rel="external">引用地址</a></p>
</blockquote>
<hr>
<h1 id="2-注册SublimeText-3"><a href="#2-注册SublimeText-3" class="headerlink" title="2. 注册SublimeText 3"></a>2. 注册SublimeText 3</h1><p>打开「sublime_text.exe」-&gt; help -&gt; License，粘贴即可。<br>这个经过测试，可以使用，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">----- BEGIN LICENSE ----- </div><div class="line">Andrew Weber </div><div class="line">Single User License </div><div class="line">EA7E-855605 </div><div class="line">813A03DD 5E4AD9E6 6C0EEB94 BC99798F </div><div class="line">942194A6 02396E98 E62C9979 4BB979FE </div><div class="line">91424C9D A45400BF F6747D88 2FB88078 </div><div class="line">90F5CC94 1CDC92DC 8457107A F151657B </div><div class="line">1D22E383 A997F016 42397640 33F41CFC </div><div class="line">E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D </div><div class="line">5CDB7036 E56DE1C0 EFCC0840 650CD3A6 </div><div class="line">B98FC99C 8FAC73EE D2B95564 DF450523 </div><div class="line">------ END LICENSE ------</div></pre></td></tr></table></figure></p>
<p><strong>注意: </strong> —– BEGIN LICENSE —– 和—— END LICENSE —— 都要复制粘贴进去。</p>
<p><a href="http://www.cnblogs.com/akwwl/p/3566445.html" target="_blank" rel="external">引用地址</a></p>
<hr>
<h1 id="3-Sublime-Text-3-汉化"><a href="#3-Sublime-Text-3-汉化" class="headerlink" title="3. Sublime Text 3 汉化"></a>3. Sublime Text 3 汉化</h1><p>点击 Preferences -&gt; Package Control , 然后点击 Package Control : Install Package , (第一次运行可以要几秒钟，因为要下载 Package Control 里面存在的包”花名册”），然后在弹出的命令界面，输入 Chinese , 选择 ChineseLocalization (回车或者鼠标单击)。</p>
<p>切换语言，帮助(H) -&gt; Language -&gt; 简体中文，繁体中文，日本语，English。</p>
<p><a href="http://jingyan.baidu.com/article/ae97a646c814ccbbfd461d24.html" target="_blank" rel="external">引用地址</a></p>
<hr>
<h1 id="4-最新推荐"><a href="#4-最新推荐" class="headerlink" title="4. 最新推荐"></a>4. 最新推荐</h1><p>现在推荐流风轻音制作的 Sublime Text 3 Build 3103 优化版</p>
<ol>
<li><a href="http://haojian138.blog.163.com/blog/static/212643110201393010438357/" target="_blank" rel="external">Sublime Text 3 Build 3103 优化版</a></li>
<li><a href="http://haojian138.blog.163.com/" target="_blank" rel="external">流风清音的博客</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下链接是一篇很好的 Sublime Text 中文教程+配置教程&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="sublime text" scheme="http://bitky.cc/tags/sublime-text/"/>
    
  </entry>
  
  <entry>
    <title>「转」识别独立安卓设备</title>
    <link href="http://bitky.cc/2016/04/15/device/"/>
    <id>http://bitky.cc/2016/04/15/device/</id>
    <published>2016-04-15T04:57:47.000Z</published>
    <updated>2017-04-11T04:34:36.070Z</updated>
    
    <content type="html"><![CDATA[<p>通过生成唯一的识别码，识别独立的安卓手机的几种方法</p>
<blockquote>
<p><strong>本文转载自</strong>：<a href="http://www.hawkwithwind.net/blog/2013/04/24/%E9%9A%BE%E9%A2%98%EF%BC%9A%E8%AF%86%E5%88%AB%E7%8B%AC%E7%AB%8B%E5%AE%89%E5%8D%93%E8%AE%BE%E5%A4%87/" target="_blank" rel="external">难题：识别独立安卓设备 - 「A WING BY WIND」</a></p>
</blockquote>
<a id="more"></a>
<p>今天碰巧朋友问到我怎么识别独立的安卓手机，就花了一些时间琢磨了一下。其实这个问题可以秒答，就是 IMEI 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TelephonyManager.getDeviceId();</div></pre></td></tr></table></figure>
<p>这需要一个权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>问题如果这么简单就好了，问题在于：</p>
<ul>
<li>平板等其他设备，无 SIM 卡，因此无 Telephony 模块。</li>
<li>有些设备恢复出厂设置的操作会清空 IMEI「水货硬解通常会导致这个结果」</li>
<li>我国许多山寨手机厂商偷懒，刷机不改 IMEI，所以 IMEI 都是一样的</li>
</ul>
<p>因此其实问题从这里才开始。网上能够搜索到的解决方案有以下几点：</p>
<h1 id="1-WIFI-MAC"><a href="#1-WIFI-MAC" class="headerlink" title="1. WIFI MAC"></a>1. WIFI MAC</h1><p>一个方案是优先采用 IMEI，当 IMEI 相同时，再比较 WIFI 的 MAC 地址。但如果手机没有 WIFI 功能或者 WIFI 功能没有开启「飞行模式」，则无法获取到 MAC 地址。更加让人惆怅的是，我国大山寨厂商实在是懒透了，无线网卡的 MAC 地址居然也不修改，不少自刷机的也是这病情「例如这个，这个还有这个」。至于说蓝牙 MAC 地址就更别说了。IMEI 重复的病因，与 MAC 地址相同的其实是一个原因，都是刷机或山寨，所以这「WIFI MAC」地址的方案其实算不上互补了，必须另谋途径。</p>
<h1 id="2-Serial-NO"><a href="#2-Serial-NO" class="headerlink" title="2. Serial NO"></a>2. Serial NO</h1><p>另一个方案是用 serial NO 。这个值仅在 Android 2.3 版本以上才提供支持。通过 adb 可以这样查看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell getprop ro.serialno</div></pre></td></tr></table></figure>
<p>代码中可使用系统变量 <code>android.os.Build.SERIAL</code> 访问。如果这个值能够取到这是仅次于 IMEI 的最好方法了。缺点是这个值在 2.2 及以下版本的 Android 系统不支持。不过好在如今的安卓世界 2.2 及以下的占有率已经越来越低了，翻新速度很快，因此这个值很值得一试。</p>
<h1 id="3-Android-ID"><a href="#3-Android-ID" class="headerlink" title="3. Android ID"></a>3. Android ID</h1><p>其实安卓系统提供了 <code>Settings.Secure.ANDROID_ID</code> 来获取唯一设备号。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.provider.Settings.Secure;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String android_id = Secure.getString(</div><div class="line">                            getContext().getContentResolver(),</div><div class="line">                            Secure.ANDROID_ID);</div></pre></td></tr></table></figure>
<p>但同样 2.2 以前的系统支持得不好。这个值是系统初次启动后生成的，因此恢复出厂设置后这个值会变，导致观测到的设备数虚高。在手机刷机、重置频繁的环境，这个值是不靠谱的。另外某大厂生产的设备居然有个 BUG，这个值是会重复的「DROID2」，因此这个值还是别用为好。</p>
<h1 id="4-Generated-UUID"><a href="#4-Generated-UUID" class="headerlink" title="4. Generated UUID"></a>4. Generated UUID</h1><p>最后还有一个自己生成 UUID 的办法，保存这个 ID，每次访问服务器时上传，自己告诉系统自己是谁。这个方法比所有硬件方法都更不靠谱，因为只需卸载软件和清理数据就会导致这个值被删除，从而产生新的 UUID，造成观测到的设备数量虚高。更别说刷机和恢复出厂设置了。这个方法非常适合用来统计软件安装次数，而非独立设备数。</p>
<h1 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h1><p>综上所述，目前为止我还没找到非常完美的统计独立设备的方案，尤其是在中国这个水货、硬解、山寨、刷机市场泛滥和不规范的安卓世界，更是难上加难。</p>
<p>但是反过来想，是不是一台完全刷新，安装了全新的 ROM 的手机，就已经不是原来的那台手机了呢？统计独立设备数的目的究竟是什么？如果要的是独立活跃设备数，其实用自己生成的 UUID 已经足够，因为原来使用的那个 UUID 已经失去活性，可以忽略了。对于 APP 开发者而言这个情况与用户换了一台手机，完全弃用旧手机的情况其实是一样的。假如是采取活跃 UUID 的方式，则即使是使用 ANDROID_ID 或者自己生成的 UUID 都是可取的做法了。</p>
<h1 id="6-文章来源："><a href="#6-文章来源：" class="headerlink" title="6. 文章来源："></a>6. 文章来源：</h1><ol>
<li><a href="http://www.hawkwithwind.net/blog/2013/04/24/%E9%9A%BE%E9%A2%98%EF%BC%9A%E8%AF%86%E5%88%AB%E7%8B%AC%E7%AB%8B%E5%AE%89%E5%8D%93%E8%AE%BE%E5%A4%87/" target="_blank" rel="external">难题：识别独立安卓设备</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过生成唯一的识别码，识别独立的安卓手机的几种方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文转载自&lt;/strong&gt;：&lt;a href=&quot;http://www.hawkwithwind.net/blog/2013/04/24/%E9%9A%BE%E9%A2%98%EF%BC%9A%E8%AF%86%E5%88%AB%E7%8B%AC%E7%AB%8B%E5%AE%89%E5%8D%93%E8%AE%BE%E5%A4%87/&quot;&gt;难题：识别独立安卓设备 - 「A WING BY WIND」&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="Android" scheme="http://bitky.cc/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「转」电子地图坐标系统研究整理</title>
    <link href="http://bitky.cc/2016/04/15/location/"/>
    <id>http://bitky.cc/2016/04/15/location/</id>
    <published>2016-04-15T04:57:47.000Z</published>
    <updated>2017-04-11T04:37:29.628Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>电子地图坐标系统研究整理总汇。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>本文由文末的参考链接整理、整合、修改而成</p>
</blockquote>
<h1 id="1-电子地图坐标系统简介"><a href="#1-电子地图坐标系统简介" class="headerlink" title="1. 电子地图坐标系统简介"></a>1. 电子地图坐标系统简介</h1><ul>
<li>WGS-84 坐标系：即地球坐标系，国际经纬度坐标标准</li>
<li>GCJ-02 坐标系：即火星坐标系，WGS84 坐标系经加密后的坐标系，国测局制定。</li>
<li>BD-09 坐标系：即百度坐标系，GCJ02 坐标系经加密后的坐标系。</li>
</ul>
<p>GCJ-02 坐标系统，就是在标准的 WGS-84 坐标系统上进行了人为的偏移，比如 Google 地图、腾讯 SOSO 地图等就是直接使用了国家 GCJ-02 坐标系统，我们有一个不成文的说法，前者叫地球坐标，后者叫火星坐标，并且，火星坐标是无法转换成地球坐标的「网上虽然有一定的方法，但基本上都是基于偏移数据库，精度较高的数据库需要购买，当然这都是一种破解手段」。</p>
<p>所有的电子地图、导航设备，都需要加入国家保密插件。第一步，地图公司测绘地图，测绘完成后，送到国家测绘局，将真实坐标的电子地图，加密成“火星坐标”，这样的地图才是可以出版和发布的，然后才可以让 GPS 公司处理。第二步，所有的 GPS 公司，只要需要汽车导航的，需要用到导航电子地图的，都需要在软件中加入国家保密算法，将 COM 口读出来的真实的坐标信号，加密转换成国家要求的保密的坐标。这样，GPS 导航仪和导航电子地图就可以完全匹配，GPS 也就可以正常工作了。</p>
<table>
<thead>
<tr>
<th>API</th>
<th style="text-align:center">坐标系</th>
</tr>
</thead>
<tbody>
<tr>
<td>百度地图 API</td>
<td style="text-align:center">百度坐标</td>
</tr>
<tr>
<td>腾讯搜搜地图 API</td>
<td style="text-align:center">火星坐标</td>
</tr>
<tr>
<td>搜狐搜狗地图 API</td>
<td style="text-align:center"><strong>搜狗坐标</strong></td>
</tr>
<tr>
<td>阿里云地图 API</td>
<td style="text-align:center">火星坐标</td>
</tr>
<tr>
<td>图吧 MapBar 地图 API</td>
<td style="text-align:center">图吧坐标</td>
</tr>
<tr>
<td>高德 MapABC 地图 API</td>
<td style="text-align:center">火星坐标</td>
</tr>
<tr>
<td>灵图 51ditu 地图 API</td>
<td style="text-align:center">火星坐标</td>
</tr>
</tbody>
</table>
<ul>
<li>注1：百度地图使用百度坐标，支持从地球坐标和火星坐标导入成百度坐标，但无法导出。并且批量坐标转换一次只能转换20个(待验证)。</li>
<li>注2：搜狗地图支持直接显示地球坐标，支持地球坐标、火星坐标、百度坐标导入成搜狗坐标，同样，搜狗坐标也无法导出。</li>
</ul>
<p>说完坐标系统，我们自然能够知道这里的问题，通过以下问题，来说说我对此的研究。</p>
<h1 id="2、各个坐标系的相互转换"><a href="#2、各个坐标系的相互转换" class="headerlink" title="2、各个坐标系的相互转换"></a>2、各个坐标系的相互转换</h1><h2 id="2-1-火星坐标系「GCJ-02」与百度坐标系「BD-09」的转换算法"><a href="#2-1-火星坐标系「GCJ-02」与百度坐标系「BD-09」的转换算法" class="headerlink" title="2.1 火星坐标系「GCJ-02」与百度坐标系「BD-09」的转换算法"></a>2.1 火星坐标系「GCJ-02」与百度坐标系「BD-09」的转换算法</h2><p>其中 bd_encrypt 将 GCJ-02 坐标转换成 BD-09 坐标， bd_decrypt 反之。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bd_encrypt</span><span class="params">(<span class="keyword">double</span> gg_lat, <span class="keyword">double</span> gg_lon, <span class="keyword">double</span> &amp;bd_lat, <span class="keyword">double</span> &amp;bd_lon)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">double</span> x = gg_lon, y = gg_lat;  </div><div class="line">    <span class="keyword">double</span> z = sqrt(x * x + y * y) + <span class="number">0.00002</span> * sin(y * x_pi);  </div><div class="line">    <span class="keyword">double</span> theta = atan2(y, x) + <span class="number">0.000003</span> * cos(x * x_pi);  </div><div class="line">    bd_lon = z * cos(theta) + <span class="number">0.0065</span>;  </div><div class="line">    bd_lat = z * sin(theta) + <span class="number">0.006</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bd_decrypt</span><span class="params">(<span class="keyword">double</span> bd_lat, <span class="keyword">double</span> bd_lon, <span class="keyword">double</span> &amp;gg_lat, <span class="keyword">double</span> &amp;gg_lon)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">double</span> x = bd_lon - <span class="number">0.0065</span>, y = bd_lat - <span class="number">0.006</span>;  </div><div class="line">    <span class="keyword">double</span> z = sqrt(x * x + y * y) - <span class="number">0.00002</span> * sin(y * x_pi);  </div><div class="line">    <span class="keyword">double</span> theta = atan2(y, x) - <span class="number">0.000003</span> * cos(x * x_pi);  </div><div class="line">    gg_lon = z * cos(theta);  </div><div class="line">    gg_lat = z * sin(theta);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-2-地球坐标系「WGS-84」到火星坐标系「GCJ-02」的转换算法"><a href="#2-2-地球坐标系「WGS-84」到火星坐标系「GCJ-02」的转换算法" class="headerlink" title="2.2 地球坐标系「WGS-84」到火星坐标系「GCJ-02」的转换算法"></a>2.2 地球坐标系「WGS-84」到火星坐标系「GCJ-02」的转换算法</h2><p>WGS-84 到 GCJ-02 的转换「即 GPS 加偏」算法</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;   </div><div class="line"><span class="keyword">namespace</span> <span class="title">Navi</span>  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">class</span> <span class="title">EvilTransform</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979324</span>;  </div><div class="line">        <span class="comment">//   </span></div><div class="line">        <span class="comment">// Krasovsky 1940   </span></div><div class="line">        <span class="comment">//   </span></div><div class="line">        <span class="comment">// a = 6378245.0, 1/f = 298.3   </span></div><div class="line">        <span class="comment">// b = a * (1 - f)   </span></div><div class="line">        <span class="comment">// ee = (a^2 - b^2) / a^2;   </span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">double</span> a = <span class="number">6378245.0</span>;  </div><div class="line">        <span class="keyword">const</span> <span class="keyword">double</span> ee = <span class="number">0.00669342162296594323</span>;  </div><div class="line">        <span class="comment">//   </span></div><div class="line">        <span class="comment">// World Geodetic System ==&gt; Mars Geodetic System   </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transform</span>(<span class="params"><span class="keyword">double</span> wgLat, <span class="keyword">double</span> wgLon, <span class="keyword">out</span> <span class="keyword">double</span> mgLat, <span class="keyword">out</span> <span class="keyword">double</span> mgLon</span>)  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> (outOfChina(wgLat, wgLon))  </div><div class="line">            &#123;  </div><div class="line">                mgLat = wgLat;  </div><div class="line">                mgLon = wgLon;  </div><div class="line">                <span class="keyword">return</span>;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">double</span> dLat = transformLat(wgLon - <span class="number">105.0</span>, wgLat - <span class="number">35.0</span>);  </div><div class="line">            <span class="keyword">double</span> dLon = transformLon(wgLon - <span class="number">105.0</span>, wgLat - <span class="number">35.0</span>);  </div><div class="line">            <span class="keyword">double</span> radLat = wgLat / <span class="number">180.0</span> * pi;  </div><div class="line">            <span class="keyword">double</span> magic = Math.Sin(radLat);  </div><div class="line">            magic = <span class="number">1</span> - ee * magic * magic;  </div><div class="line">            <span class="keyword">double</span> sqrtMagic = Math.Sqrt(magic);  </div><div class="line">            dLat = (dLat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtMagic) * pi);  </div><div class="line">            dLon = (dLon * <span class="number">180.0</span>) / (a / sqrtMagic * Math.Cos(radLat) * pi);  </div><div class="line">            mgLat = wgLat + dLat;  </div><div class="line">            mgLon = wgLon + dLon;  </div><div class="line">        &#125;  </div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">outOfChina</span>(<span class="params"><span class="keyword">double</span> lat, <span class="keyword">double</span> lon</span>)  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> (lon &lt; <span class="number">72.004</span> || lon &gt; <span class="number">137.8347</span>)  </div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </div><div class="line">            <span class="keyword">if</span> (lat &lt; <span class="number">0.8293</span> || lat &gt; <span class="number">55.8271</span>)  </div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">transformLat</span>(<span class="params"><span class="keyword">double</span> x, <span class="keyword">double</span> y</span>)  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">double</span> ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * x + <span class="number">3.0</span> * y + <span class="number">0.2</span> * y * y + <span class="number">0.1</span> * x * y + <span class="number">0.2</span> * Math.Sqrt(Math.Abs(x));  </div><div class="line">            ret += (<span class="number">20.0</span> * Math.Sin(<span class="number">6.0</span> * x * pi) + <span class="number">20.0</span> * Math.Sin(<span class="number">2.0</span> * x * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span>;  </div><div class="line">            ret += (<span class="number">20.0</span> * Math.Sin(y * pi) + <span class="number">40.0</span> * Math.Sin(y / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span>;  </div><div class="line">            ret += (<span class="number">160.0</span> * Math.Sin(y / <span class="number">12.0</span> * pi) + <span class="number">320</span> * Math.Sin(y * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;  </div><div class="line">            <span class="keyword">return</span> ret;  </div><div class="line">        &#125;  </div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">transformLon</span>(<span class="params"><span class="keyword">double</span> x, <span class="keyword">double</span> y</span>)  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">double</span> ret = <span class="number">300.0</span> + x + <span class="number">2.0</span> * y + <span class="number">0.1</span> * x * x + <span class="number">0.1</span> * x * y + <span class="number">0.1</span> * Math.Sqrt(Math.Abs(x));  </div><div class="line">            ret += (<span class="number">20.0</span> * Math.Sin(<span class="number">6.0</span> * x * pi) + <span class="number">20.0</span> * Math.Sin(<span class="number">2.0</span> * x * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span>;  </div><div class="line">            ret += (<span class="number">20.0</span> * Math.Sin(x * pi) + <span class="number">40.0</span> * Math.Sin(x / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span>;  </div><div class="line">            ret += (<span class="number">150.0</span> * Math.Sin(x / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> * Math.Sin(x / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span>;  </div><div class="line">            <span class="keyword">return</span> ret;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上参考自：<a href="http://www.xue5.com/Mobile/iOS/679842.html" target="_blank" rel="external">http://www.xue5.com/Mobile/iOS/679842.html</a></p>
<h2 id="2-3-百度在线转换API"><a href="#2-3-百度在线转换API" class="headerlink" title="2.3 百度在线转换API"></a>2.3 百度在线转换API</h2><blockquote>
<p><a href="http://api.map.baidu.com/ag/coord/convert?from=0&amp;to=4&amp;x=longitude&amp;y=latitude" target="_blank" rel="external">http://api.map.baidu.com/ag/coord/convert?from=0&amp;to=4&amp;x=longitude&amp;y=latitude</a><br>from: 来源坐标系「0 表示 WGS-84 坐标；2 表示GCJ-02 坐标」<br>to: 转换后的坐标「4 表示 BD-09 坐标，即百度地图使用的行」<br>x: 经度<br>y: 纬度  </p>
</blockquote>
<p>请求之后会返回一串 Json</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&#123;  </div><div class="line">    "error":0,  </div><div class="line">    "x":"MTIxLjUwMDIyODIxNDk2",  </div><div class="line">    "y":"MzEuMjM1ODUwMjYwMTE3"  </div><div class="line">&#125;  </div><div class="line">// error：是结果是否出错标志位，0 表示成功</div><div class="line">// x: 坐标系 2 时为经度，4 时为纬度(Base64编码)</div><div class="line">// y: 坐标系 4 时为经度，2 时为纬度(Base64编码)</div><div class="line">``` </div><div class="line"></div><div class="line">什么情况，经纬度居然还加密？那接下来也只好见招拆招了</div><div class="line"></div><div class="line">```java</div><div class="line">import java.io.BufferedReader;  </div><div class="line">import java.io.IOException;  </div><div class="line">import java.io.InputStream;  </div><div class="line">import java.io.InputStreamReader;  </div><div class="line">import java.io.OutputStreamWriter;  </div><div class="line">import java.net.URL;  </div><div class="line">import java.net.URLConnection;  </div><div class="line">import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;  </div><div class="line">public class BaiduAPIConverter extends Thread &#123;  </div><div class="line">  public static void testPost(String x, String y) throws IOException &#123;  </div><div class="line">    try &#123;  </div><div class="line">      URL url = new URL("http://api.map.baidu.com/ag/coord/convert?from=2&amp;to=4&amp;x="+ x + "&amp;y=" + y);  </div><div class="line">      URLConnection connection = url.openConnection();  </div><div class="line">      connection.setDoOutput(true);  </div><div class="line">      OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), "utf-8");  </div><div class="line">      // remember to clean up   </div><div class="line">      out.flush();  </div><div class="line">      out.close();  </div><div class="line">      // 一旦发送成功，用以下方法就可以得到服务器的回应：   </div><div class="line">      String sCurrentLine, sTotalString;  </div><div class="line">      sCurrentLine = sTotalString = "";  </div><div class="line">      InputStream l_urlStream;  </div><div class="line">      l_urlStream = connection.getInputStream();  </div><div class="line">      BufferedReader l_reader = new BufferedReader(new InputStreamReader(l_urlStream));  </div><div class="line">      while ((sCurrentLine = l_reader.readLine()) != null) &#123;  </div><div class="line">        if (!sCurrentLine.equals(""))  </div><div class="line">          sTotalString += sCurrentLine;  </div><div class="line">      &#125;  </div><div class="line">      sTotalString = sTotalString.substring(1, sTotalString.length() - 1);  </div><div class="line">      String[] results = sTotalString.split("\\,");  </div><div class="line">      if (results.length == 3) &#123;  </div><div class="line">        if (results[0].split("\\:")[1].equals("0")) &#123;  </div><div class="line">          String mapX = results[1].split("\\:")[1];  </div><div class="line">          String mapY = results[2].split("\\:")[1];  </div><div class="line">          mapX = mapX.substring(1, mapX.length() - 1);  </div><div class="line">          mapY = mapY.substring(1, mapY.length() - 1);  </div><div class="line">          mapX = new String(Base64.decode(mapX));  </div><div class="line">          mapY = new String(Base64.decode(mapY));  </div><div class="line">          System.out.println("\t" + mapX + "\t" + mapY);  </div><div class="line">        &#125;  </div><div class="line">      &#125;  </div><div class="line">     sleep(10000);  </div><div class="line">    &#125; catch (InterruptedException e) &#123;  </div><div class="line">      // TODO Auto-generated catch block   </div><div class="line">      e.printStackTrace();  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">  /** </div><div class="line">   * @param args </div><div class="line">   * @throws IOException </div><div class="line">   */  </div><div class="line">  public static void main(String[] args) throws IOException &#123;  </div><div class="line">    testPost("120.151379", "30.184678");  </div><div class="line">    System.out.println("ok");  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里也差不多好了，主要的代码都写出来了，其他的您就自己写吧。<br>以上参考自：<a href="http://scalpel.me/archives/136" target="_blank" rel="external">http://scalpel.me/archives/136</a></p>
<h2 id="2-4-百度内置转换方法，可以不局限于百度定位-SDK"><a href="#2-4-百度内置转换方法，可以不局限于百度定位-SDK" class="headerlink" title="2.4 百度内置转换方法，可以不局限于百度定位 SDK"></a>2.4 百度内置转换方法，可以不局限于百度定位 SDK</h2><p>在百度地图中取得 WGS-84 坐标，调用如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BMapManager.getLocationManager().setLocationCoordinateType(MKLocationManager.MK_COORDINATE_WGS84);</div></pre></td></tr></table></figure>
<p>这样从百度 API 中取得的坐标就是 WGS-84 了，可是这种坐标如果显示到百度地图上就会偏移，也就是说取出一个坐标，原封不动的显示上去就偏移了，所以为了显示也是正常就需要在绘制到百度地图上之前转换成 BD-09 。<br>转换成 BD-09，调用方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GeoPoint wgs84;</div><div class="line">GeoPoint bd09= CoordinateConvert.bundleDecode(CoordinateConvert.fromWgs84ToBaidu(wgs84))；</div></pre></td></tr></table></figure>
<p>这里实在不明白为何要设计成 CoordinateConvert.fromWgs84ToBaidu(wgs84) 返回了一个 Bundle，所以还需要 CoordinateConvert.bundleDecode() 再转成 GeoPoint 。</p>
<h1 id="3-参考文章"><a href="#3-参考文章" class="headerlink" title="3. 参考文章"></a>3. 参考文章</h1><ol>
<li><a href="http://blog.csdn.net/findsafety/article/details/12442639" target="_blank" rel="external">国内各地图API坐标系统比较与转换</a></li>
<li><a href="http://rovertang.com/about-baidu-map-coordinate-conversion-interface/" target="_blank" rel="external">关于百度地图坐标转换接口的研究</a></li>
<li><a href="http://blog.csdn.net/gatr/article/details/21520737" target="_blank" rel="external">构建自己的百度地图坐标纠偏数据库 </a></li>
<li><a href="http://blog.csdn.net/junfeng120125/article/details/9966857" target="_blank" rel="external">GPS纠偏算法，适用于google,高德体系的地图 </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;电子地图坐标系统研究整理总汇。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="其他" scheme="http://bitky.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Java" scheme="http://bitky.cc/tags/Java/"/>
    
      <category term="坐标" scheme="http://bitky.cc/tags/%E5%9D%90%E6%A0%87/"/>
    
      <category term="Android" scheme="http://bitky.cc/tags/Android/"/>
    
  </entry>
  
</feed>
